// Code generated by MockGen. DO NOT EDIT.
// Source: ../linked_accounts_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	linked_accounts "github.com/kappapay/backend/lib/golang/src/kappa/services/linked_accounts"
	grpc "google.golang.org/grpc"
)

// MockLinkedAccountsServiceClient is a mock of LinkedAccountsServiceClient interface.
type MockLinkedAccountsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinkedAccountsServiceClientMockRecorder
}

// MockLinkedAccountsServiceClientMockRecorder is the mock recorder for MockLinkedAccountsServiceClient.
type MockLinkedAccountsServiceClientMockRecorder struct {
	mock *MockLinkedAccountsServiceClient
}

// NewMockLinkedAccountsServiceClient creates a new mock instance.
func NewMockLinkedAccountsServiceClient(ctrl *gomock.Controller) *MockLinkedAccountsServiceClient {
	mock := &MockLinkedAccountsServiceClient{ctrl: ctrl}
	mock.recorder = &MockLinkedAccountsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkedAccountsServiceClient) EXPECT() *MockLinkedAccountsServiceClientMockRecorder {
	return m.recorder
}

// CreateLinkedAccount mocks base method.
func (m *MockLinkedAccountsServiceClient) CreateLinkedAccount(ctx context.Context, in *linked_accounts.CreateLinkedAccountRequest, opts ...grpc.CallOption) (*linked_accounts.CreateLinkedAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLinkedAccount", varargs...)
	ret0, _ := ret[0].(*linked_accounts.CreateLinkedAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkedAccount indicates an expected call of CreateLinkedAccount.
func (mr *MockLinkedAccountsServiceClientMockRecorder) CreateLinkedAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkedAccount", reflect.TypeOf((*MockLinkedAccountsServiceClient)(nil).CreateLinkedAccount), varargs...)
}

// CreatePlaidLinkToken mocks base method.
func (m *MockLinkedAccountsServiceClient) CreatePlaidLinkToken(ctx context.Context, in *linked_accounts.CreatePlaidLinkTokenRequest, opts ...grpc.CallOption) (*linked_accounts.CreatePlaidLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePlaidLinkToken", varargs...)
	ret0, _ := ret[0].(*linked_accounts.CreatePlaidLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaidLinkToken indicates an expected call of CreatePlaidLinkToken.
func (mr *MockLinkedAccountsServiceClientMockRecorder) CreatePlaidLinkToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaidLinkToken", reflect.TypeOf((*MockLinkedAccountsServiceClient)(nil).CreatePlaidLinkToken), varargs...)
}

// DeleteLinkedAccount mocks base method.
func (m *MockLinkedAccountsServiceClient) DeleteLinkedAccount(ctx context.Context, in *linked_accounts.DeleteLinkedAccountRequest, opts ...grpc.CallOption) (*linked_accounts.DeleteLinkedAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLinkedAccount", varargs...)
	ret0, _ := ret[0].(*linked_accounts.DeleteLinkedAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLinkedAccount indicates an expected call of DeleteLinkedAccount.
func (mr *MockLinkedAccountsServiceClientMockRecorder) DeleteLinkedAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkedAccount", reflect.TypeOf((*MockLinkedAccountsServiceClient)(nil).DeleteLinkedAccount), varargs...)
}

// GetLinkedAccountById mocks base method.
func (m *MockLinkedAccountsServiceClient) GetLinkedAccountById(ctx context.Context, in *linked_accounts.GetLinkedAccountByIdRequest, opts ...grpc.CallOption) (*linked_accounts.GetLinkedAccountByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinkedAccountById", varargs...)
	ret0, _ := ret[0].(*linked_accounts.GetLinkedAccountByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedAccountById indicates an expected call of GetLinkedAccountById.
func (mr *MockLinkedAccountsServiceClientMockRecorder) GetLinkedAccountById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedAccountById", reflect.TypeOf((*MockLinkedAccountsServiceClient)(nil).GetLinkedAccountById), varargs...)
}

// GetLinkedAccountsByEntityId mocks base method.
func (m *MockLinkedAccountsServiceClient) GetLinkedAccountsByEntityId(ctx context.Context, in *linked_accounts.GetLinkedAccountsByEntityIdRequest, opts ...grpc.CallOption) (*linked_accounts.GetLinkedAccountsByEntityIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinkedAccountsByEntityId", varargs...)
	ret0, _ := ret[0].(*linked_accounts.GetLinkedAccountsByEntityIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedAccountsByEntityId indicates an expected call of GetLinkedAccountsByEntityId.
func (mr *MockLinkedAccountsServiceClientMockRecorder) GetLinkedAccountsByEntityId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedAccountsByEntityId", reflect.TypeOf((*MockLinkedAccountsServiceClient)(nil).GetLinkedAccountsByEntityId), varargs...)
}

// ProcessPlaidPublicToken mocks base method.
func (m *MockLinkedAccountsServiceClient) ProcessPlaidPublicToken(ctx context.Context, in *linked_accounts.ProcessPlaidPublicTokenRequest, opts ...grpc.CallOption) (*linked_accounts.ProcessPlaidPublicTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessPlaidPublicToken", varargs...)
	ret0, _ := ret[0].(*linked_accounts.ProcessPlaidPublicTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPlaidPublicToken indicates an expected call of ProcessPlaidPublicToken.
func (mr *MockLinkedAccountsServiceClientMockRecorder) ProcessPlaidPublicToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPlaidPublicToken", reflect.TypeOf((*MockLinkedAccountsServiceClient)(nil).ProcessPlaidPublicToken), varargs...)
}

// UpdateLinkedAccount mocks base method.
func (m *MockLinkedAccountsServiceClient) UpdateLinkedAccount(ctx context.Context, in *linked_accounts.UpdateLinkedAccountRequest, opts ...grpc.CallOption) (*linked_accounts.UpdateLinkedAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLinkedAccount", varargs...)
	ret0, _ := ret[0].(*linked_accounts.UpdateLinkedAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinkedAccount indicates an expected call of UpdateLinkedAccount.
func (mr *MockLinkedAccountsServiceClientMockRecorder) UpdateLinkedAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkedAccount", reflect.TypeOf((*MockLinkedAccountsServiceClient)(nil).UpdateLinkedAccount), varargs...)
}

// MockLinkedAccountsServiceServer is a mock of LinkedAccountsServiceServer interface.
type MockLinkedAccountsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLinkedAccountsServiceServerMockRecorder
}

// MockLinkedAccountsServiceServerMockRecorder is the mock recorder for MockLinkedAccountsServiceServer.
type MockLinkedAccountsServiceServerMockRecorder struct {
	mock *MockLinkedAccountsServiceServer
}

// NewMockLinkedAccountsServiceServer creates a new mock instance.
func NewMockLinkedAccountsServiceServer(ctrl *gomock.Controller) *MockLinkedAccountsServiceServer {
	mock := &MockLinkedAccountsServiceServer{ctrl: ctrl}
	mock.recorder = &MockLinkedAccountsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkedAccountsServiceServer) EXPECT() *MockLinkedAccountsServiceServerMockRecorder {
	return m.recorder
}

// CreateLinkedAccount mocks base method.
func (m *MockLinkedAccountsServiceServer) CreateLinkedAccount(arg0 context.Context, arg1 *linked_accounts.CreateLinkedAccountRequest) (*linked_accounts.CreateLinkedAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkedAccount", arg0, arg1)
	ret0, _ := ret[0].(*linked_accounts.CreateLinkedAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkedAccount indicates an expected call of CreateLinkedAccount.
func (mr *MockLinkedAccountsServiceServerMockRecorder) CreateLinkedAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkedAccount", reflect.TypeOf((*MockLinkedAccountsServiceServer)(nil).CreateLinkedAccount), arg0, arg1)
}

// CreatePlaidLinkToken mocks base method.
func (m *MockLinkedAccountsServiceServer) CreatePlaidLinkToken(arg0 context.Context, arg1 *linked_accounts.CreatePlaidLinkTokenRequest) (*linked_accounts.CreatePlaidLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaidLinkToken", arg0, arg1)
	ret0, _ := ret[0].(*linked_accounts.CreatePlaidLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaidLinkToken indicates an expected call of CreatePlaidLinkToken.
func (mr *MockLinkedAccountsServiceServerMockRecorder) CreatePlaidLinkToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaidLinkToken", reflect.TypeOf((*MockLinkedAccountsServiceServer)(nil).CreatePlaidLinkToken), arg0, arg1)
}

// DeleteLinkedAccount mocks base method.
func (m *MockLinkedAccountsServiceServer) DeleteLinkedAccount(arg0 context.Context, arg1 *linked_accounts.DeleteLinkedAccountRequest) (*linked_accounts.DeleteLinkedAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLinkedAccount", arg0, arg1)
	ret0, _ := ret[0].(*linked_accounts.DeleteLinkedAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLinkedAccount indicates an expected call of DeleteLinkedAccount.
func (mr *MockLinkedAccountsServiceServerMockRecorder) DeleteLinkedAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkedAccount", reflect.TypeOf((*MockLinkedAccountsServiceServer)(nil).DeleteLinkedAccount), arg0, arg1)
}

// GetLinkedAccountById mocks base method.
func (m *MockLinkedAccountsServiceServer) GetLinkedAccountById(arg0 context.Context, arg1 *linked_accounts.GetLinkedAccountByIdRequest) (*linked_accounts.GetLinkedAccountByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedAccountById", arg0, arg1)
	ret0, _ := ret[0].(*linked_accounts.GetLinkedAccountByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedAccountById indicates an expected call of GetLinkedAccountById.
func (mr *MockLinkedAccountsServiceServerMockRecorder) GetLinkedAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedAccountById", reflect.TypeOf((*MockLinkedAccountsServiceServer)(nil).GetLinkedAccountById), arg0, arg1)
}

// GetLinkedAccountsByEntityId mocks base method.
func (m *MockLinkedAccountsServiceServer) GetLinkedAccountsByEntityId(arg0 context.Context, arg1 *linked_accounts.GetLinkedAccountsByEntityIdRequest) (*linked_accounts.GetLinkedAccountsByEntityIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedAccountsByEntityId", arg0, arg1)
	ret0, _ := ret[0].(*linked_accounts.GetLinkedAccountsByEntityIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedAccountsByEntityId indicates an expected call of GetLinkedAccountsByEntityId.
func (mr *MockLinkedAccountsServiceServerMockRecorder) GetLinkedAccountsByEntityId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedAccountsByEntityId", reflect.TypeOf((*MockLinkedAccountsServiceServer)(nil).GetLinkedAccountsByEntityId), arg0, arg1)
}

// ProcessPlaidPublicToken mocks base method.
func (m *MockLinkedAccountsServiceServer) ProcessPlaidPublicToken(arg0 context.Context, arg1 *linked_accounts.ProcessPlaidPublicTokenRequest) (*linked_accounts.ProcessPlaidPublicTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPlaidPublicToken", arg0, arg1)
	ret0, _ := ret[0].(*linked_accounts.ProcessPlaidPublicTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPlaidPublicToken indicates an expected call of ProcessPlaidPublicToken.
func (mr *MockLinkedAccountsServiceServerMockRecorder) ProcessPlaidPublicToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPlaidPublicToken", reflect.TypeOf((*MockLinkedAccountsServiceServer)(nil).ProcessPlaidPublicToken), arg0, arg1)
}

// UpdateLinkedAccount mocks base method.
func (m *MockLinkedAccountsServiceServer) UpdateLinkedAccount(arg0 context.Context, arg1 *linked_accounts.UpdateLinkedAccountRequest) (*linked_accounts.UpdateLinkedAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLinkedAccount", arg0, arg1)
	ret0, _ := ret[0].(*linked_accounts.UpdateLinkedAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinkedAccount indicates an expected call of UpdateLinkedAccount.
func (mr *MockLinkedAccountsServiceServerMockRecorder) UpdateLinkedAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkedAccount", reflect.TypeOf((*MockLinkedAccountsServiceServer)(nil).UpdateLinkedAccount), arg0, arg1)
}

// mustEmbedUnimplementedLinkedAccountsServiceServer mocks base method.
func (m *MockLinkedAccountsServiceServer) mustEmbedUnimplementedLinkedAccountsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLinkedAccountsServiceServer")
}

// mustEmbedUnimplementedLinkedAccountsServiceServer indicates an expected call of mustEmbedUnimplementedLinkedAccountsServiceServer.
func (mr *MockLinkedAccountsServiceServerMockRecorder) mustEmbedUnimplementedLinkedAccountsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLinkedAccountsServiceServer", reflect.TypeOf((*MockLinkedAccountsServiceServer)(nil).mustEmbedUnimplementedLinkedAccountsServiceServer))
}

// MockUnsafeLinkedAccountsServiceServer is a mock of UnsafeLinkedAccountsServiceServer interface.
type MockUnsafeLinkedAccountsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLinkedAccountsServiceServerMockRecorder
}

// MockUnsafeLinkedAccountsServiceServerMockRecorder is the mock recorder for MockUnsafeLinkedAccountsServiceServer.
type MockUnsafeLinkedAccountsServiceServerMockRecorder struct {
	mock *MockUnsafeLinkedAccountsServiceServer
}

// NewMockUnsafeLinkedAccountsServiceServer creates a new mock instance.
func NewMockUnsafeLinkedAccountsServiceServer(ctrl *gomock.Controller) *MockUnsafeLinkedAccountsServiceServer {
	mock := &MockUnsafeLinkedAccountsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLinkedAccountsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLinkedAccountsServiceServer) EXPECT() *MockUnsafeLinkedAccountsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLinkedAccountsServiceServer mocks base method.
func (m *MockUnsafeLinkedAccountsServiceServer) mustEmbedUnimplementedLinkedAccountsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLinkedAccountsServiceServer")
}

// mustEmbedUnimplementedLinkedAccountsServiceServer indicates an expected call of mustEmbedUnimplementedLinkedAccountsServiceServer.
func (mr *MockUnsafeLinkedAccountsServiceServerMockRecorder) mustEmbedUnimplementedLinkedAccountsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLinkedAccountsServiceServer", reflect.TypeOf((*MockUnsafeLinkedAccountsServiceServer)(nil).mustEmbedUnimplementedLinkedAccountsServiceServer))
}
