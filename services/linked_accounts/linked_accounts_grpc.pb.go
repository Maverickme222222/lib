// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/linked_accounts/linked_accounts.proto

package linked_accounts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkedAccountsServiceClient is the client API for LinkedAccountsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkedAccountsServiceClient interface {
	GetLinkedAccountsByEntityId(ctx context.Context, in *GetLinkedAccountsByEntityIdRequest, opts ...grpc.CallOption) (*GetLinkedAccountsByEntityIdResponse, error)
	GetLinkedAccountById(ctx context.Context, in *GetLinkedAccountByIdRequest, opts ...grpc.CallOption) (*GetLinkedAccountByIdResponse, error)
	CreateLinkedAccount(ctx context.Context, in *CreateLinkedAccountRequest, opts ...grpc.CallOption) (*CreateLinkedAccountResponse, error)
	UpdateLinkedAccount(ctx context.Context, in *UpdateLinkedAccountRequest, opts ...grpc.CallOption) (*UpdateLinkedAccountResponse, error)
	DeleteLinkedAccount(ctx context.Context, in *DeleteLinkedAccountRequest, opts ...grpc.CallOption) (*DeleteLinkedAccountResponse, error)
	// Plaid Specific Methods
	CreatePlaidLinkToken(ctx context.Context, in *CreatePlaidLinkTokenRequest, opts ...grpc.CallOption) (*CreatePlaidLinkTokenResponse, error)
	ProcessPlaidPublicToken(ctx context.Context, in *ProcessPlaidPublicTokenRequest, opts ...grpc.CallOption) (*ProcessPlaidPublicTokenResponse, error)
}

type linkedAccountsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkedAccountsServiceClient(cc grpc.ClientConnInterface) LinkedAccountsServiceClient {
	return &linkedAccountsServiceClient{cc}
}

func (c *linkedAccountsServiceClient) GetLinkedAccountsByEntityId(ctx context.Context, in *GetLinkedAccountsByEntityIdRequest, opts ...grpc.CallOption) (*GetLinkedAccountsByEntityIdResponse, error) {
	out := new(GetLinkedAccountsByEntityIdResponse)
	err := c.cc.Invoke(ctx, "/linked_accounts.LinkedAccountsService/GetLinkedAccountsByEntityId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountsServiceClient) GetLinkedAccountById(ctx context.Context, in *GetLinkedAccountByIdRequest, opts ...grpc.CallOption) (*GetLinkedAccountByIdResponse, error) {
	out := new(GetLinkedAccountByIdResponse)
	err := c.cc.Invoke(ctx, "/linked_accounts.LinkedAccountsService/GetLinkedAccountById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountsServiceClient) CreateLinkedAccount(ctx context.Context, in *CreateLinkedAccountRequest, opts ...grpc.CallOption) (*CreateLinkedAccountResponse, error) {
	out := new(CreateLinkedAccountResponse)
	err := c.cc.Invoke(ctx, "/linked_accounts.LinkedAccountsService/CreateLinkedAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountsServiceClient) UpdateLinkedAccount(ctx context.Context, in *UpdateLinkedAccountRequest, opts ...grpc.CallOption) (*UpdateLinkedAccountResponse, error) {
	out := new(UpdateLinkedAccountResponse)
	err := c.cc.Invoke(ctx, "/linked_accounts.LinkedAccountsService/UpdateLinkedAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountsServiceClient) DeleteLinkedAccount(ctx context.Context, in *DeleteLinkedAccountRequest, opts ...grpc.CallOption) (*DeleteLinkedAccountResponse, error) {
	out := new(DeleteLinkedAccountResponse)
	err := c.cc.Invoke(ctx, "/linked_accounts.LinkedAccountsService/DeleteLinkedAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountsServiceClient) CreatePlaidLinkToken(ctx context.Context, in *CreatePlaidLinkTokenRequest, opts ...grpc.CallOption) (*CreatePlaidLinkTokenResponse, error) {
	out := new(CreatePlaidLinkTokenResponse)
	err := c.cc.Invoke(ctx, "/linked_accounts.LinkedAccountsService/CreatePlaidLinkToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountsServiceClient) ProcessPlaidPublicToken(ctx context.Context, in *ProcessPlaidPublicTokenRequest, opts ...grpc.CallOption) (*ProcessPlaidPublicTokenResponse, error) {
	out := new(ProcessPlaidPublicTokenResponse)
	err := c.cc.Invoke(ctx, "/linked_accounts.LinkedAccountsService/ProcessPlaidPublicToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkedAccountsServiceServer is the server API for LinkedAccountsService service.
// All implementations must embed UnimplementedLinkedAccountsServiceServer
// for forward compatibility
type LinkedAccountsServiceServer interface {
	GetLinkedAccountsByEntityId(context.Context, *GetLinkedAccountsByEntityIdRequest) (*GetLinkedAccountsByEntityIdResponse, error)
	GetLinkedAccountById(context.Context, *GetLinkedAccountByIdRequest) (*GetLinkedAccountByIdResponse, error)
	CreateLinkedAccount(context.Context, *CreateLinkedAccountRequest) (*CreateLinkedAccountResponse, error)
	UpdateLinkedAccount(context.Context, *UpdateLinkedAccountRequest) (*UpdateLinkedAccountResponse, error)
	DeleteLinkedAccount(context.Context, *DeleteLinkedAccountRequest) (*DeleteLinkedAccountResponse, error)
	// Plaid Specific Methods
	CreatePlaidLinkToken(context.Context, *CreatePlaidLinkTokenRequest) (*CreatePlaidLinkTokenResponse, error)
	ProcessPlaidPublicToken(context.Context, *ProcessPlaidPublicTokenRequest) (*ProcessPlaidPublicTokenResponse, error)
	mustEmbedUnimplementedLinkedAccountsServiceServer()
}

// UnimplementedLinkedAccountsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinkedAccountsServiceServer struct {
}

func (UnimplementedLinkedAccountsServiceServer) GetLinkedAccountsByEntityId(context.Context, *GetLinkedAccountsByEntityIdRequest) (*GetLinkedAccountsByEntityIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkedAccountsByEntityId not implemented")
}
func (UnimplementedLinkedAccountsServiceServer) GetLinkedAccountById(context.Context, *GetLinkedAccountByIdRequest) (*GetLinkedAccountByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkedAccountById not implemented")
}
func (UnimplementedLinkedAccountsServiceServer) CreateLinkedAccount(context.Context, *CreateLinkedAccountRequest) (*CreateLinkedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLinkedAccount not implemented")
}
func (UnimplementedLinkedAccountsServiceServer) UpdateLinkedAccount(context.Context, *UpdateLinkedAccountRequest) (*UpdateLinkedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinkedAccount not implemented")
}
func (UnimplementedLinkedAccountsServiceServer) DeleteLinkedAccount(context.Context, *DeleteLinkedAccountRequest) (*DeleteLinkedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLinkedAccount not implemented")
}
func (UnimplementedLinkedAccountsServiceServer) CreatePlaidLinkToken(context.Context, *CreatePlaidLinkTokenRequest) (*CreatePlaidLinkTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaidLinkToken not implemented")
}
func (UnimplementedLinkedAccountsServiceServer) ProcessPlaidPublicToken(context.Context, *ProcessPlaidPublicTokenRequest) (*ProcessPlaidPublicTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPlaidPublicToken not implemented")
}
func (UnimplementedLinkedAccountsServiceServer) mustEmbedUnimplementedLinkedAccountsServiceServer() {}

// UnsafeLinkedAccountsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkedAccountsServiceServer will
// result in compilation errors.
type UnsafeLinkedAccountsServiceServer interface {
	mustEmbedUnimplementedLinkedAccountsServiceServer()
}

func RegisterLinkedAccountsServiceServer(s grpc.ServiceRegistrar, srv LinkedAccountsServiceServer) {
	s.RegisterService(&LinkedAccountsService_ServiceDesc, srv)
}

func _LinkedAccountsService_GetLinkedAccountsByEntityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkedAccountsByEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountsServiceServer).GetLinkedAccountsByEntityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linked_accounts.LinkedAccountsService/GetLinkedAccountsByEntityId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountsServiceServer).GetLinkedAccountsByEntityId(ctx, req.(*GetLinkedAccountsByEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountsService_GetLinkedAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkedAccountByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountsServiceServer).GetLinkedAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linked_accounts.LinkedAccountsService/GetLinkedAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountsServiceServer).GetLinkedAccountById(ctx, req.(*GetLinkedAccountByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountsService_CreateLinkedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountsServiceServer).CreateLinkedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linked_accounts.LinkedAccountsService/CreateLinkedAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountsServiceServer).CreateLinkedAccount(ctx, req.(*CreateLinkedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountsService_UpdateLinkedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountsServiceServer).UpdateLinkedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linked_accounts.LinkedAccountsService/UpdateLinkedAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountsServiceServer).UpdateLinkedAccount(ctx, req.(*UpdateLinkedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountsService_DeleteLinkedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountsServiceServer).DeleteLinkedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linked_accounts.LinkedAccountsService/DeleteLinkedAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountsServiceServer).DeleteLinkedAccount(ctx, req.(*DeleteLinkedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountsService_CreatePlaidLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaidLinkTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountsServiceServer).CreatePlaidLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linked_accounts.LinkedAccountsService/CreatePlaidLinkToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountsServiceServer).CreatePlaidLinkToken(ctx, req.(*CreatePlaidLinkTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountsService_ProcessPlaidPublicToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPlaidPublicTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountsServiceServer).ProcessPlaidPublicToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linked_accounts.LinkedAccountsService/ProcessPlaidPublicToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountsServiceServer).ProcessPlaidPublicToken(ctx, req.(*ProcessPlaidPublicTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkedAccountsService_ServiceDesc is the grpc.ServiceDesc for LinkedAccountsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkedAccountsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linked_accounts.LinkedAccountsService",
	HandlerType: (*LinkedAccountsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLinkedAccountsByEntityId",
			Handler:    _LinkedAccountsService_GetLinkedAccountsByEntityId_Handler,
		},
		{
			MethodName: "GetLinkedAccountById",
			Handler:    _LinkedAccountsService_GetLinkedAccountById_Handler,
		},
		{
			MethodName: "CreateLinkedAccount",
			Handler:    _LinkedAccountsService_CreateLinkedAccount_Handler,
		},
		{
			MethodName: "UpdateLinkedAccount",
			Handler:    _LinkedAccountsService_UpdateLinkedAccount_Handler,
		},
		{
			MethodName: "DeleteLinkedAccount",
			Handler:    _LinkedAccountsService_DeleteLinkedAccount_Handler,
		},
		{
			MethodName: "CreatePlaidLinkToken",
			Handler:    _LinkedAccountsService_CreatePlaidLinkToken_Handler,
		},
		{
			MethodName: "ProcessPlaidPublicToken",
			Handler:    _LinkedAccountsService_ProcessPlaidPublicToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/linked_accounts/linked_accounts.proto",
}
