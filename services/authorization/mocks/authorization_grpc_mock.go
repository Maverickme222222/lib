// Code generated by MockGen. DO NOT EDIT.
// Source: ../authorization_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	authorization "github.com/kappapay/backend/lib/golang/src/kappa/services/authorization"
	grpc "google.golang.org/grpc"
)

// MockAuthorizationServiceClient is a mock of AuthorizationServiceClient interface.
type MockAuthorizationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceClientMockRecorder
}

// MockAuthorizationServiceClientMockRecorder is the mock recorder for MockAuthorizationServiceClient.
type MockAuthorizationServiceClientMockRecorder struct {
	mock *MockAuthorizationServiceClient
}

// NewMockAuthorizationServiceClient creates a new mock instance.
func NewMockAuthorizationServiceClient(ctrl *gomock.Controller) *MockAuthorizationServiceClient {
	mock := &MockAuthorizationServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationServiceClient) EXPECT() *MockAuthorizationServiceClientMockRecorder {
	return m.recorder
}

// CreateDestinationAuthRequirements mocks base method.
func (m *MockAuthorizationServiceClient) CreateDestinationAuthRequirements(ctx context.Context, in *authorization.CreateDestinationAuthRequirementsRequest, opts ...grpc.CallOption) (*authorization.CreateDestinationAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDestinationAuthRequirements", varargs...)
	ret0, _ := ret[0].(*authorization.CreateDestinationAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestinationAuthRequirements indicates an expected call of CreateDestinationAuthRequirements.
func (mr *MockAuthorizationServiceClientMockRecorder) CreateDestinationAuthRequirements(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestinationAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).CreateDestinationAuthRequirements), varargs...)
}

// CreateLinkedAccountAuthRequirements mocks base method.
func (m *MockAuthorizationServiceClient) CreateLinkedAccountAuthRequirements(ctx context.Context, in *authorization.CreateLinkedAccountAuthRequirementsRequest, opts ...grpc.CallOption) (*authorization.CreateLinkedAccountAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLinkedAccountAuthRequirements", varargs...)
	ret0, _ := ret[0].(*authorization.CreateLinkedAccountAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkedAccountAuthRequirements indicates an expected call of CreateLinkedAccountAuthRequirements.
func (mr *MockAuthorizationServiceClientMockRecorder) CreateLinkedAccountAuthRequirements(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkedAccountAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).CreateLinkedAccountAuthRequirements), varargs...)
}

// CreateTransactionAuthRequirements mocks base method.
func (m *MockAuthorizationServiceClient) CreateTransactionAuthRequirements(ctx context.Context, in *authorization.CreateTransactionAuthRequirementsRequest, opts ...grpc.CallOption) (*authorization.CreateTransactionAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransactionAuthRequirements", varargs...)
	ret0, _ := ret[0].(*authorization.CreateTransactionAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionAuthRequirements indicates an expected call of CreateTransactionAuthRequirements.
func (mr *MockAuthorizationServiceClientMockRecorder) CreateTransactionAuthRequirements(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).CreateTransactionAuthRequirements), varargs...)
}

// GetAuthRequirementByID mocks base method.
func (m *MockAuthorizationServiceClient) GetAuthRequirementByID(ctx context.Context, in *authorization.GetAuthRequirementByIDRequest, opts ...grpc.CallOption) (*authorization.GetAuthRequirementByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthRequirementByID", varargs...)
	ret0, _ := ret[0].(*authorization.GetAuthRequirementByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthRequirementByID indicates an expected call of GetAuthRequirementByID.
func (mr *MockAuthorizationServiceClientMockRecorder) GetAuthRequirementByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthRequirementByID", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).GetAuthRequirementByID), varargs...)
}

// GetDestinationAuthRequirements mocks base method.
func (m *MockAuthorizationServiceClient) GetDestinationAuthRequirements(ctx context.Context, in *authorization.GetDestinationAuthRequirementsRequest, opts ...grpc.CallOption) (*authorization.GetDestinationAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDestinationAuthRequirements", varargs...)
	ret0, _ := ret[0].(*authorization.GetDestinationAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationAuthRequirements indicates an expected call of GetDestinationAuthRequirements.
func (mr *MockAuthorizationServiceClientMockRecorder) GetDestinationAuthRequirements(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).GetDestinationAuthRequirements), varargs...)
}

// GetLinkedAccountAuthRequirements mocks base method.
func (m *MockAuthorizationServiceClient) GetLinkedAccountAuthRequirements(ctx context.Context, in *authorization.GetLinkedAccountAuthRequirementsRequest, opts ...grpc.CallOption) (*authorization.GetLinkedAccountAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinkedAccountAuthRequirements", varargs...)
	ret0, _ := ret[0].(*authorization.GetLinkedAccountAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedAccountAuthRequirements indicates an expected call of GetLinkedAccountAuthRequirements.
func (mr *MockAuthorizationServiceClientMockRecorder) GetLinkedAccountAuthRequirements(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedAccountAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).GetLinkedAccountAuthRequirements), varargs...)
}

// GetTransactionAuthRequirements mocks base method.
func (m *MockAuthorizationServiceClient) GetTransactionAuthRequirements(ctx context.Context, in *authorization.GetTransactionAuthRequirementsRequest, opts ...grpc.CallOption) (*authorization.GetTransactionAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionAuthRequirements", varargs...)
	ret0, _ := ret[0].(*authorization.GetTransactionAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionAuthRequirements indicates an expected call of GetTransactionAuthRequirements.
func (mr *MockAuthorizationServiceClientMockRecorder) GetTransactionAuthRequirements(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).GetTransactionAuthRequirements), varargs...)
}

// UpdateAuthRequirement mocks base method.
func (m *MockAuthorizationServiceClient) UpdateAuthRequirement(ctx context.Context, in *authorization.UpdateAuthRequirementRequest, opts ...grpc.CallOption) (*authorization.UpdateAuthRequirementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthRequirement", varargs...)
	ret0, _ := ret[0].(*authorization.UpdateAuthRequirementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthRequirement indicates an expected call of UpdateAuthRequirement.
func (mr *MockAuthorizationServiceClientMockRecorder) UpdateAuthRequirement(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthRequirement", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).UpdateAuthRequirement), varargs...)
}

// MockAuthorizationServiceServer is a mock of AuthorizationServiceServer interface.
type MockAuthorizationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceServerMockRecorder
}

// MockAuthorizationServiceServerMockRecorder is the mock recorder for MockAuthorizationServiceServer.
type MockAuthorizationServiceServerMockRecorder struct {
	mock *MockAuthorizationServiceServer
}

// NewMockAuthorizationServiceServer creates a new mock instance.
func NewMockAuthorizationServiceServer(ctrl *gomock.Controller) *MockAuthorizationServiceServer {
	mock := &MockAuthorizationServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationServiceServer) EXPECT() *MockAuthorizationServiceServerMockRecorder {
	return m.recorder
}

// CreateDestinationAuthRequirements mocks base method.
func (m *MockAuthorizationServiceServer) CreateDestinationAuthRequirements(arg0 context.Context, arg1 *authorization.CreateDestinationAuthRequirementsRequest) (*authorization.CreateDestinationAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDestinationAuthRequirements", arg0, arg1)
	ret0, _ := ret[0].(*authorization.CreateDestinationAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestinationAuthRequirements indicates an expected call of CreateDestinationAuthRequirements.
func (mr *MockAuthorizationServiceServerMockRecorder) CreateDestinationAuthRequirements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestinationAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).CreateDestinationAuthRequirements), arg0, arg1)
}

// CreateLinkedAccountAuthRequirements mocks base method.
func (m *MockAuthorizationServiceServer) CreateLinkedAccountAuthRequirements(arg0 context.Context, arg1 *authorization.CreateLinkedAccountAuthRequirementsRequest) (*authorization.CreateLinkedAccountAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkedAccountAuthRequirements", arg0, arg1)
	ret0, _ := ret[0].(*authorization.CreateLinkedAccountAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkedAccountAuthRequirements indicates an expected call of CreateLinkedAccountAuthRequirements.
func (mr *MockAuthorizationServiceServerMockRecorder) CreateLinkedAccountAuthRequirements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkedAccountAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).CreateLinkedAccountAuthRequirements), arg0, arg1)
}

// CreateTransactionAuthRequirements mocks base method.
func (m *MockAuthorizationServiceServer) CreateTransactionAuthRequirements(arg0 context.Context, arg1 *authorization.CreateTransactionAuthRequirementsRequest) (*authorization.CreateTransactionAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionAuthRequirements", arg0, arg1)
	ret0, _ := ret[0].(*authorization.CreateTransactionAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionAuthRequirements indicates an expected call of CreateTransactionAuthRequirements.
func (mr *MockAuthorizationServiceServerMockRecorder) CreateTransactionAuthRequirements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).CreateTransactionAuthRequirements), arg0, arg1)
}

// GetAuthRequirementByID mocks base method.
func (m *MockAuthorizationServiceServer) GetAuthRequirementByID(arg0 context.Context, arg1 *authorization.GetAuthRequirementByIDRequest) (*authorization.GetAuthRequirementByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthRequirementByID", arg0, arg1)
	ret0, _ := ret[0].(*authorization.GetAuthRequirementByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthRequirementByID indicates an expected call of GetAuthRequirementByID.
func (mr *MockAuthorizationServiceServerMockRecorder) GetAuthRequirementByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthRequirementByID", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).GetAuthRequirementByID), arg0, arg1)
}

// GetDestinationAuthRequirements mocks base method.
func (m *MockAuthorizationServiceServer) GetDestinationAuthRequirements(arg0 context.Context, arg1 *authorization.GetDestinationAuthRequirementsRequest) (*authorization.GetDestinationAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationAuthRequirements", arg0, arg1)
	ret0, _ := ret[0].(*authorization.GetDestinationAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationAuthRequirements indicates an expected call of GetDestinationAuthRequirements.
func (mr *MockAuthorizationServiceServerMockRecorder) GetDestinationAuthRequirements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).GetDestinationAuthRequirements), arg0, arg1)
}

// GetLinkedAccountAuthRequirements mocks base method.
func (m *MockAuthorizationServiceServer) GetLinkedAccountAuthRequirements(arg0 context.Context, arg1 *authorization.GetLinkedAccountAuthRequirementsRequest) (*authorization.GetLinkedAccountAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedAccountAuthRequirements", arg0, arg1)
	ret0, _ := ret[0].(*authorization.GetLinkedAccountAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedAccountAuthRequirements indicates an expected call of GetLinkedAccountAuthRequirements.
func (mr *MockAuthorizationServiceServerMockRecorder) GetLinkedAccountAuthRequirements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedAccountAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).GetLinkedAccountAuthRequirements), arg0, arg1)
}

// GetTransactionAuthRequirements mocks base method.
func (m *MockAuthorizationServiceServer) GetTransactionAuthRequirements(arg0 context.Context, arg1 *authorization.GetTransactionAuthRequirementsRequest) (*authorization.GetTransactionAuthRequirementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionAuthRequirements", arg0, arg1)
	ret0, _ := ret[0].(*authorization.GetTransactionAuthRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionAuthRequirements indicates an expected call of GetTransactionAuthRequirements.
func (mr *MockAuthorizationServiceServerMockRecorder) GetTransactionAuthRequirements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionAuthRequirements", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).GetTransactionAuthRequirements), arg0, arg1)
}

// UpdateAuthRequirement mocks base method.
func (m *MockAuthorizationServiceServer) UpdateAuthRequirement(arg0 context.Context, arg1 *authorization.UpdateAuthRequirementRequest) (*authorization.UpdateAuthRequirementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthRequirement", arg0, arg1)
	ret0, _ := ret[0].(*authorization.UpdateAuthRequirementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthRequirement indicates an expected call of UpdateAuthRequirement.
func (mr *MockAuthorizationServiceServerMockRecorder) UpdateAuthRequirement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthRequirement", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).UpdateAuthRequirement), arg0, arg1)
}

// mustEmbedUnimplementedAuthorizationServiceServer mocks base method.
func (m *MockAuthorizationServiceServer) mustEmbedUnimplementedAuthorizationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthorizationServiceServer")
}

// mustEmbedUnimplementedAuthorizationServiceServer indicates an expected call of mustEmbedUnimplementedAuthorizationServiceServer.
func (mr *MockAuthorizationServiceServerMockRecorder) mustEmbedUnimplementedAuthorizationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthorizationServiceServer", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).mustEmbedUnimplementedAuthorizationServiceServer))
}

// MockUnsafeAuthorizationServiceServer is a mock of UnsafeAuthorizationServiceServer interface.
type MockUnsafeAuthorizationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthorizationServiceServerMockRecorder
}

// MockUnsafeAuthorizationServiceServerMockRecorder is the mock recorder for MockUnsafeAuthorizationServiceServer.
type MockUnsafeAuthorizationServiceServerMockRecorder struct {
	mock *MockUnsafeAuthorizationServiceServer
}

// NewMockUnsafeAuthorizationServiceServer creates a new mock instance.
func NewMockUnsafeAuthorizationServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthorizationServiceServer {
	mock := &MockUnsafeAuthorizationServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthorizationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthorizationServiceServer) EXPECT() *MockUnsafeAuthorizationServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthorizationServiceServer mocks base method.
func (m *MockUnsafeAuthorizationServiceServer) mustEmbedUnimplementedAuthorizationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthorizationServiceServer")
}

// mustEmbedUnimplementedAuthorizationServiceServer indicates an expected call of mustEmbedUnimplementedAuthorizationServiceServer.
func (mr *MockUnsafeAuthorizationServiceServerMockRecorder) mustEmbedUnimplementedAuthorizationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthorizationServiceServer", reflect.TypeOf((*MockUnsafeAuthorizationServiceServer)(nil).mustEmbedUnimplementedAuthorizationServiceServer))
}
