// Code generated by MockGen. DO NOT EDIT.
// Source: ../limits_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	limits "github.com/kappapay/backend/lib/golang/src/kappa/services/limits"
	grpc "google.golang.org/grpc"
)

// MockLimitsServiceClient is a mock of LimitsServiceClient interface.
type MockLimitsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLimitsServiceClientMockRecorder
}

// MockLimitsServiceClientMockRecorder is the mock recorder for MockLimitsServiceClient.
type MockLimitsServiceClientMockRecorder struct {
	mock *MockLimitsServiceClient
}

// NewMockLimitsServiceClient creates a new mock instance.
func NewMockLimitsServiceClient(ctrl *gomock.Controller) *MockLimitsServiceClient {
	mock := &MockLimitsServiceClient{ctrl: ctrl}
	mock.recorder = &MockLimitsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitsServiceClient) EXPECT() *MockLimitsServiceClientMockRecorder {
	return m.recorder
}

// CheckTransaction mocks base method.
func (m *MockLimitsServiceClient) CheckTransaction(ctx context.Context, in *limits.CheckTransactionRequest, opts ...grpc.CallOption) (*limits.CheckTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckTransaction", varargs...)
	ret0, _ := ret[0].(*limits.CheckTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTransaction indicates an expected call of CheckTransaction.
func (mr *MockLimitsServiceClientMockRecorder) CheckTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransaction", reflect.TypeOf((*MockLimitsServiceClient)(nil).CheckTransaction), varargs...)
}

// CheckTransactionQuote mocks base method.
func (m *MockLimitsServiceClient) CheckTransactionQuote(ctx context.Context, in *limits.CheckTransactionQuoteRequest, opts ...grpc.CallOption) (*limits.CheckTransactionQuoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckTransactionQuote", varargs...)
	ret0, _ := ret[0].(*limits.CheckTransactionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTransactionQuote indicates an expected call of CheckTransactionQuote.
func (mr *MockLimitsServiceClientMockRecorder) CheckTransactionQuote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransactionQuote", reflect.TypeOf((*MockLimitsServiceClient)(nil).CheckTransactionQuote), varargs...)
}

// CreateLimit mocks base method.
func (m *MockLimitsServiceClient) CreateLimit(ctx context.Context, in *limits.CreateLimitRequest, opts ...grpc.CallOption) (*limits.CreateLimitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLimit", varargs...)
	ret0, _ := ret[0].(*limits.CreateLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLimit indicates an expected call of CreateLimit.
func (mr *MockLimitsServiceClientMockRecorder) CreateLimit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLimit", reflect.TypeOf((*MockLimitsServiceClient)(nil).CreateLimit), varargs...)
}

// CreateLimitsForEntity mocks base method.
func (m *MockLimitsServiceClient) CreateLimitsForEntity(ctx context.Context, in *limits.CreateLimitsForEntityRequest, opts ...grpc.CallOption) (*limits.CreateLimitsForEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLimitsForEntity", varargs...)
	ret0, _ := ret[0].(*limits.CreateLimitsForEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLimitsForEntity indicates an expected call of CreateLimitsForEntity.
func (mr *MockLimitsServiceClientMockRecorder) CreateLimitsForEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLimitsForEntity", reflect.TypeOf((*MockLimitsServiceClient)(nil).CreateLimitsForEntity), varargs...)
}

// DeleteLimit mocks base method.
func (m *MockLimitsServiceClient) DeleteLimit(ctx context.Context, in *limits.DeleteLimitRequest, opts ...grpc.CallOption) (*limits.DeleteLimitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLimit", varargs...)
	ret0, _ := ret[0].(*limits.DeleteLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLimit indicates an expected call of DeleteLimit.
func (mr *MockLimitsServiceClientMockRecorder) DeleteLimit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLimit", reflect.TypeOf((*MockLimitsServiceClient)(nil).DeleteLimit), varargs...)
}

// GetDefaultLimits mocks base method.
func (m *MockLimitsServiceClient) GetDefaultLimits(ctx context.Context, in *limits.GetDefaultLimitsRequest, opts ...grpc.CallOption) (*limits.GetDefaultLimitsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefaultLimits", varargs...)
	ret0, _ := ret[0].(*limits.GetDefaultLimitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultLimits indicates an expected call of GetDefaultLimits.
func (mr *MockLimitsServiceClientMockRecorder) GetDefaultLimits(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultLimits", reflect.TypeOf((*MockLimitsServiceClient)(nil).GetDefaultLimits), varargs...)
}

// GetLimitByID mocks base method.
func (m *MockLimitsServiceClient) GetLimitByID(ctx context.Context, in *limits.GetLimitByIDRequest, opts ...grpc.CallOption) (*limits.GetLimitByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLimitByID", varargs...)
	ret0, _ := ret[0].(*limits.GetLimitByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimitByID indicates an expected call of GetLimitByID.
func (mr *MockLimitsServiceClientMockRecorder) GetLimitByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitByID", reflect.TypeOf((*MockLimitsServiceClient)(nil).GetLimitByID), varargs...)
}

// GetLimitsByEntityID mocks base method.
func (m *MockLimitsServiceClient) GetLimitsByEntityID(ctx context.Context, in *limits.GetLimitsByEntityIDRequest, opts ...grpc.CallOption) (*limits.GetLimitsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLimitsByEntityID", varargs...)
	ret0, _ := ret[0].(*limits.GetLimitsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimitsByEntityID indicates an expected call of GetLimitsByEntityID.
func (mr *MockLimitsServiceClientMockRecorder) GetLimitsByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitsByEntityID", reflect.TypeOf((*MockLimitsServiceClient)(nil).GetLimitsByEntityID), varargs...)
}

// UpdateLimit mocks base method.
func (m *MockLimitsServiceClient) UpdateLimit(ctx context.Context, in *limits.UpdateLimitRequest, opts ...grpc.CallOption) (*limits.UpdateLimitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLimit", varargs...)
	ret0, _ := ret[0].(*limits.UpdateLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLimit indicates an expected call of UpdateLimit.
func (mr *MockLimitsServiceClientMockRecorder) UpdateLimit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLimit", reflect.TypeOf((*MockLimitsServiceClient)(nil).UpdateLimit), varargs...)
}

// MockLimitsServiceServer is a mock of LimitsServiceServer interface.
type MockLimitsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLimitsServiceServerMockRecorder
}

// MockLimitsServiceServerMockRecorder is the mock recorder for MockLimitsServiceServer.
type MockLimitsServiceServerMockRecorder struct {
	mock *MockLimitsServiceServer
}

// NewMockLimitsServiceServer creates a new mock instance.
func NewMockLimitsServiceServer(ctrl *gomock.Controller) *MockLimitsServiceServer {
	mock := &MockLimitsServiceServer{ctrl: ctrl}
	mock.recorder = &MockLimitsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitsServiceServer) EXPECT() *MockLimitsServiceServerMockRecorder {
	return m.recorder
}

// CheckTransaction mocks base method.
func (m *MockLimitsServiceServer) CheckTransaction(arg0 context.Context, arg1 *limits.CheckTransactionRequest) (*limits.CheckTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTransaction", arg0, arg1)
	ret0, _ := ret[0].(*limits.CheckTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTransaction indicates an expected call of CheckTransaction.
func (mr *MockLimitsServiceServerMockRecorder) CheckTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransaction", reflect.TypeOf((*MockLimitsServiceServer)(nil).CheckTransaction), arg0, arg1)
}

// CheckTransactionQuote mocks base method.
func (m *MockLimitsServiceServer) CheckTransactionQuote(arg0 context.Context, arg1 *limits.CheckTransactionQuoteRequest) (*limits.CheckTransactionQuoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTransactionQuote", arg0, arg1)
	ret0, _ := ret[0].(*limits.CheckTransactionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTransactionQuote indicates an expected call of CheckTransactionQuote.
func (mr *MockLimitsServiceServerMockRecorder) CheckTransactionQuote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransactionQuote", reflect.TypeOf((*MockLimitsServiceServer)(nil).CheckTransactionQuote), arg0, arg1)
}

// CreateLimit mocks base method.
func (m *MockLimitsServiceServer) CreateLimit(arg0 context.Context, arg1 *limits.CreateLimitRequest) (*limits.CreateLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLimit", arg0, arg1)
	ret0, _ := ret[0].(*limits.CreateLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLimit indicates an expected call of CreateLimit.
func (mr *MockLimitsServiceServerMockRecorder) CreateLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLimit", reflect.TypeOf((*MockLimitsServiceServer)(nil).CreateLimit), arg0, arg1)
}

// CreateLimitsForEntity mocks base method.
func (m *MockLimitsServiceServer) CreateLimitsForEntity(arg0 context.Context, arg1 *limits.CreateLimitsForEntityRequest) (*limits.CreateLimitsForEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLimitsForEntity", arg0, arg1)
	ret0, _ := ret[0].(*limits.CreateLimitsForEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLimitsForEntity indicates an expected call of CreateLimitsForEntity.
func (mr *MockLimitsServiceServerMockRecorder) CreateLimitsForEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLimitsForEntity", reflect.TypeOf((*MockLimitsServiceServer)(nil).CreateLimitsForEntity), arg0, arg1)
}

// DeleteLimit mocks base method.
func (m *MockLimitsServiceServer) DeleteLimit(arg0 context.Context, arg1 *limits.DeleteLimitRequest) (*limits.DeleteLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLimit", arg0, arg1)
	ret0, _ := ret[0].(*limits.DeleteLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLimit indicates an expected call of DeleteLimit.
func (mr *MockLimitsServiceServerMockRecorder) DeleteLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLimit", reflect.TypeOf((*MockLimitsServiceServer)(nil).DeleteLimit), arg0, arg1)
}

// GetDefaultLimits mocks base method.
func (m *MockLimitsServiceServer) GetDefaultLimits(arg0 context.Context, arg1 *limits.GetDefaultLimitsRequest) (*limits.GetDefaultLimitsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultLimits", arg0, arg1)
	ret0, _ := ret[0].(*limits.GetDefaultLimitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultLimits indicates an expected call of GetDefaultLimits.
func (mr *MockLimitsServiceServerMockRecorder) GetDefaultLimits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultLimits", reflect.TypeOf((*MockLimitsServiceServer)(nil).GetDefaultLimits), arg0, arg1)
}

// GetLimitByID mocks base method.
func (m *MockLimitsServiceServer) GetLimitByID(arg0 context.Context, arg1 *limits.GetLimitByIDRequest) (*limits.GetLimitByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitByID", arg0, arg1)
	ret0, _ := ret[0].(*limits.GetLimitByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimitByID indicates an expected call of GetLimitByID.
func (mr *MockLimitsServiceServerMockRecorder) GetLimitByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitByID", reflect.TypeOf((*MockLimitsServiceServer)(nil).GetLimitByID), arg0, arg1)
}

// GetLimitsByEntityID mocks base method.
func (m *MockLimitsServiceServer) GetLimitsByEntityID(arg0 context.Context, arg1 *limits.GetLimitsByEntityIDRequest) (*limits.GetLimitsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitsByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*limits.GetLimitsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimitsByEntityID indicates an expected call of GetLimitsByEntityID.
func (mr *MockLimitsServiceServerMockRecorder) GetLimitsByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitsByEntityID", reflect.TypeOf((*MockLimitsServiceServer)(nil).GetLimitsByEntityID), arg0, arg1)
}

// UpdateLimit mocks base method.
func (m *MockLimitsServiceServer) UpdateLimit(arg0 context.Context, arg1 *limits.UpdateLimitRequest) (*limits.UpdateLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLimit", arg0, arg1)
	ret0, _ := ret[0].(*limits.UpdateLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLimit indicates an expected call of UpdateLimit.
func (mr *MockLimitsServiceServerMockRecorder) UpdateLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLimit", reflect.TypeOf((*MockLimitsServiceServer)(nil).UpdateLimit), arg0, arg1)
}

// mustEmbedUnimplementedLimitsServiceServer mocks base method.
func (m *MockLimitsServiceServer) mustEmbedUnimplementedLimitsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLimitsServiceServer")
}

// mustEmbedUnimplementedLimitsServiceServer indicates an expected call of mustEmbedUnimplementedLimitsServiceServer.
func (mr *MockLimitsServiceServerMockRecorder) mustEmbedUnimplementedLimitsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLimitsServiceServer", reflect.TypeOf((*MockLimitsServiceServer)(nil).mustEmbedUnimplementedLimitsServiceServer))
}

// MockUnsafeLimitsServiceServer is a mock of UnsafeLimitsServiceServer interface.
type MockUnsafeLimitsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLimitsServiceServerMockRecorder
}

// MockUnsafeLimitsServiceServerMockRecorder is the mock recorder for MockUnsafeLimitsServiceServer.
type MockUnsafeLimitsServiceServerMockRecorder struct {
	mock *MockUnsafeLimitsServiceServer
}

// NewMockUnsafeLimitsServiceServer creates a new mock instance.
func NewMockUnsafeLimitsServiceServer(ctrl *gomock.Controller) *MockUnsafeLimitsServiceServer {
	mock := &MockUnsafeLimitsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLimitsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLimitsServiceServer) EXPECT() *MockUnsafeLimitsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLimitsServiceServer mocks base method.
func (m *MockUnsafeLimitsServiceServer) mustEmbedUnimplementedLimitsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLimitsServiceServer")
}

// mustEmbedUnimplementedLimitsServiceServer indicates an expected call of mustEmbedUnimplementedLimitsServiceServer.
func (mr *MockUnsafeLimitsServiceServerMockRecorder) mustEmbedUnimplementedLimitsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLimitsServiceServer", reflect.TypeOf((*MockUnsafeLimitsServiceServer)(nil).mustEmbedUnimplementedLimitsServiceServer))
}
