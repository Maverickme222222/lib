// Code generated by MockGen. DO NOT EDIT.
// Source: ../ledger_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ledger "github.com/kappapay/backend/lib/golang/src/kappa/services/ledger"
	grpc "google.golang.org/grpc"
)

// MockLedgerServiceClient is a mock of LedgerServiceClient interface.
type MockLedgerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerServiceClientMockRecorder
}

// MockLedgerServiceClientMockRecorder is the mock recorder for MockLedgerServiceClient.
type MockLedgerServiceClientMockRecorder struct {
	mock *MockLedgerServiceClient
}

// NewMockLedgerServiceClient creates a new mock instance.
func NewMockLedgerServiceClient(ctrl *gomock.Controller) *MockLedgerServiceClient {
	mock := &MockLedgerServiceClient{ctrl: ctrl}
	mock.recorder = &MockLedgerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerServiceClient) EXPECT() *MockLedgerServiceClientMockRecorder {
	return m.recorder
}

// CreateLedgerAccount mocks base method.
func (m *MockLedgerServiceClient) CreateLedgerAccount(ctx context.Context, in *ledger.CreateLedgerAccountRequest, opts ...grpc.CallOption) (*ledger.CreateLedgerAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLedgerAccount", varargs...)
	ret0, _ := ret[0].(*ledger.CreateLedgerAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedgerAccount indicates an expected call of CreateLedgerAccount.
func (mr *MockLedgerServiceClientMockRecorder) CreateLedgerAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedgerAccount", reflect.TypeOf((*MockLedgerServiceClient)(nil).CreateLedgerAccount), varargs...)
}

// CreateLedgerTransactions mocks base method.
func (m *MockLedgerServiceClient) CreateLedgerTransactions(ctx context.Context, in *ledger.CreateLedgerTransactionsRequest, opts ...grpc.CallOption) (*ledger.CreateLedgerTransactionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLedgerTransactions", varargs...)
	ret0, _ := ret[0].(*ledger.CreateLedgerTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedgerTransactions indicates an expected call of CreateLedgerTransactions.
func (mr *MockLedgerServiceClientMockRecorder) CreateLedgerTransactions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedgerTransactions", reflect.TypeOf((*MockLedgerServiceClient)(nil).CreateLedgerTransactions), varargs...)
}

// GetLedgerAccountByID mocks base method.
func (m *MockLedgerServiceClient) GetLedgerAccountByID(ctx context.Context, in *ledger.GetLedgerAccountRequest, opts ...grpc.CallOption) (*ledger.GetLedgerAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLedgerAccountByID", varargs...)
	ret0, _ := ret[0].(*ledger.GetLedgerAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerAccountByID indicates an expected call of GetLedgerAccountByID.
func (mr *MockLedgerServiceClientMockRecorder) GetLedgerAccountByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerAccountByID", reflect.TypeOf((*MockLedgerServiceClient)(nil).GetLedgerAccountByID), varargs...)
}

// GetLedgerAccountByPath mocks base method.
func (m *MockLedgerServiceClient) GetLedgerAccountByPath(ctx context.Context, in *ledger.GetLedgerAccountByPathRequest, opts ...grpc.CallOption) (*ledger.GetLedgerAccountByPathResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLedgerAccountByPath", varargs...)
	ret0, _ := ret[0].(*ledger.GetLedgerAccountByPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerAccountByPath indicates an expected call of GetLedgerAccountByPath.
func (mr *MockLedgerServiceClientMockRecorder) GetLedgerAccountByPath(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerAccountByPath", reflect.TypeOf((*MockLedgerServiceClient)(nil).GetLedgerAccountByPath), varargs...)
}

// GetLedgerByName mocks base method.
func (m *MockLedgerServiceClient) GetLedgerByName(ctx context.Context, in *ledger.GetLedgerByNameRequest, opts ...grpc.CallOption) (*ledger.GetLedgerByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLedgerByName", varargs...)
	ret0, _ := ret[0].(*ledger.GetLedgerByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerByName indicates an expected call of GetLedgerByName.
func (mr *MockLedgerServiceClientMockRecorder) GetLedgerByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerByName", reflect.TypeOf((*MockLedgerServiceClient)(nil).GetLedgerByName), varargs...)
}

// GetLedgerTransactionsByID mocks base method.
func (m *MockLedgerServiceClient) GetLedgerTransactionsByID(ctx context.Context, in *ledger.GetLedgerTransactionsRequest, opts ...grpc.CallOption) (*ledger.GetLedgerTransactionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLedgerTransactionsByID", varargs...)
	ret0, _ := ret[0].(*ledger.GetLedgerTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerTransactionsByID indicates an expected call of GetLedgerTransactionsByID.
func (mr *MockLedgerServiceClientMockRecorder) GetLedgerTransactionsByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerTransactionsByID", reflect.TypeOf((*MockLedgerServiceClient)(nil).GetLedgerTransactionsByID), varargs...)
}

// MockLedgerServiceServer is a mock of LedgerServiceServer interface.
type MockLedgerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerServiceServerMockRecorder
}

// MockLedgerServiceServerMockRecorder is the mock recorder for MockLedgerServiceServer.
type MockLedgerServiceServerMockRecorder struct {
	mock *MockLedgerServiceServer
}

// NewMockLedgerServiceServer creates a new mock instance.
func NewMockLedgerServiceServer(ctrl *gomock.Controller) *MockLedgerServiceServer {
	mock := &MockLedgerServiceServer{ctrl: ctrl}
	mock.recorder = &MockLedgerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerServiceServer) EXPECT() *MockLedgerServiceServerMockRecorder {
	return m.recorder
}

// CreateLedgerAccount mocks base method.
func (m *MockLedgerServiceServer) CreateLedgerAccount(arg0 context.Context, arg1 *ledger.CreateLedgerAccountRequest) (*ledger.CreateLedgerAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedgerAccount", arg0, arg1)
	ret0, _ := ret[0].(*ledger.CreateLedgerAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedgerAccount indicates an expected call of CreateLedgerAccount.
func (mr *MockLedgerServiceServerMockRecorder) CreateLedgerAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedgerAccount", reflect.TypeOf((*MockLedgerServiceServer)(nil).CreateLedgerAccount), arg0, arg1)
}

// CreateLedgerTransactions mocks base method.
func (m *MockLedgerServiceServer) CreateLedgerTransactions(arg0 context.Context, arg1 *ledger.CreateLedgerTransactionsRequest) (*ledger.CreateLedgerTransactionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedgerTransactions", arg0, arg1)
	ret0, _ := ret[0].(*ledger.CreateLedgerTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedgerTransactions indicates an expected call of CreateLedgerTransactions.
func (mr *MockLedgerServiceServerMockRecorder) CreateLedgerTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedgerTransactions", reflect.TypeOf((*MockLedgerServiceServer)(nil).CreateLedgerTransactions), arg0, arg1)
}

// GetLedgerAccountByID mocks base method.
func (m *MockLedgerServiceServer) GetLedgerAccountByID(arg0 context.Context, arg1 *ledger.GetLedgerAccountRequest) (*ledger.GetLedgerAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedgerAccountByID", arg0, arg1)
	ret0, _ := ret[0].(*ledger.GetLedgerAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerAccountByID indicates an expected call of GetLedgerAccountByID.
func (mr *MockLedgerServiceServerMockRecorder) GetLedgerAccountByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerAccountByID", reflect.TypeOf((*MockLedgerServiceServer)(nil).GetLedgerAccountByID), arg0, arg1)
}

// GetLedgerAccountByPath mocks base method.
func (m *MockLedgerServiceServer) GetLedgerAccountByPath(arg0 context.Context, arg1 *ledger.GetLedgerAccountByPathRequest) (*ledger.GetLedgerAccountByPathResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedgerAccountByPath", arg0, arg1)
	ret0, _ := ret[0].(*ledger.GetLedgerAccountByPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerAccountByPath indicates an expected call of GetLedgerAccountByPath.
func (mr *MockLedgerServiceServerMockRecorder) GetLedgerAccountByPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerAccountByPath", reflect.TypeOf((*MockLedgerServiceServer)(nil).GetLedgerAccountByPath), arg0, arg1)
}

// GetLedgerByName mocks base method.
func (m *MockLedgerServiceServer) GetLedgerByName(arg0 context.Context, arg1 *ledger.GetLedgerByNameRequest) (*ledger.GetLedgerByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedgerByName", arg0, arg1)
	ret0, _ := ret[0].(*ledger.GetLedgerByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerByName indicates an expected call of GetLedgerByName.
func (mr *MockLedgerServiceServerMockRecorder) GetLedgerByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerByName", reflect.TypeOf((*MockLedgerServiceServer)(nil).GetLedgerByName), arg0, arg1)
}

// GetLedgerTransactionsByID mocks base method.
func (m *MockLedgerServiceServer) GetLedgerTransactionsByID(arg0 context.Context, arg1 *ledger.GetLedgerTransactionsRequest) (*ledger.GetLedgerTransactionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedgerTransactionsByID", arg0, arg1)
	ret0, _ := ret[0].(*ledger.GetLedgerTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerTransactionsByID indicates an expected call of GetLedgerTransactionsByID.
func (mr *MockLedgerServiceServerMockRecorder) GetLedgerTransactionsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerTransactionsByID", reflect.TypeOf((*MockLedgerServiceServer)(nil).GetLedgerTransactionsByID), arg0, arg1)
}

// mustEmbedUnimplementedLedgerServiceServer mocks base method.
func (m *MockLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLedgerServiceServer")
}

// mustEmbedUnimplementedLedgerServiceServer indicates an expected call of mustEmbedUnimplementedLedgerServiceServer.
func (mr *MockLedgerServiceServerMockRecorder) mustEmbedUnimplementedLedgerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLedgerServiceServer", reflect.TypeOf((*MockLedgerServiceServer)(nil).mustEmbedUnimplementedLedgerServiceServer))
}

// MockUnsafeLedgerServiceServer is a mock of UnsafeLedgerServiceServer interface.
type MockUnsafeLedgerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLedgerServiceServerMockRecorder
}

// MockUnsafeLedgerServiceServerMockRecorder is the mock recorder for MockUnsafeLedgerServiceServer.
type MockUnsafeLedgerServiceServerMockRecorder struct {
	mock *MockUnsafeLedgerServiceServer
}

// NewMockUnsafeLedgerServiceServer creates a new mock instance.
func NewMockUnsafeLedgerServiceServer(ctrl *gomock.Controller) *MockUnsafeLedgerServiceServer {
	mock := &MockUnsafeLedgerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLedgerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLedgerServiceServer) EXPECT() *MockUnsafeLedgerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLedgerServiceServer mocks base method.
func (m *MockUnsafeLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLedgerServiceServer")
}

// mustEmbedUnimplementedLedgerServiceServer indicates an expected call of mustEmbedUnimplementedLedgerServiceServer.
func (mr *MockUnsafeLedgerServiceServerMockRecorder) mustEmbedUnimplementedLedgerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLedgerServiceServer", reflect.TypeOf((*MockUnsafeLedgerServiceServer)(nil).mustEmbedUnimplementedLedgerServiceServer))
}
