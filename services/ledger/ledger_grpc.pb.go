// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/ledger/ledger.proto

package ledger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LedgerServiceClient is the client API for LedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerServiceClient interface {
	GetLedgerByName(ctx context.Context, in *GetLedgerByNameRequest, opts ...grpc.CallOption) (*GetLedgerByNameResponse, error)
	GetLedgerTransactionsByID(ctx context.Context, in *GetLedgerTransactionsRequest, opts ...grpc.CallOption) (*GetLedgerTransactionsResponse, error)
	CreateLedgerTransactions(ctx context.Context, in *CreateLedgerTransactionsRequest, opts ...grpc.CallOption) (*CreateLedgerTransactionsResponse, error)
	GetLedgerAccountByID(ctx context.Context, in *GetLedgerAccountRequest, opts ...grpc.CallOption) (*GetLedgerAccountResponse, error)
	GetLedgerAccountByPath(ctx context.Context, in *GetLedgerAccountByPathRequest, opts ...grpc.CallOption) (*GetLedgerAccountByPathResponse, error)
	CreateLedgerAccount(ctx context.Context, in *CreateLedgerAccountRequest, opts ...grpc.CallOption) (*CreateLedgerAccountResponse, error)
}

type ledgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerServiceClient(cc grpc.ClientConnInterface) LedgerServiceClient {
	return &ledgerServiceClient{cc}
}

func (c *ledgerServiceClient) GetLedgerByName(ctx context.Context, in *GetLedgerByNameRequest, opts ...grpc.CallOption) (*GetLedgerByNameResponse, error) {
	out := new(GetLedgerByNameResponse)
	err := c.cc.Invoke(ctx, "/ledger.LedgerService/GetLedgerByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) GetLedgerTransactionsByID(ctx context.Context, in *GetLedgerTransactionsRequest, opts ...grpc.CallOption) (*GetLedgerTransactionsResponse, error) {
	out := new(GetLedgerTransactionsResponse)
	err := c.cc.Invoke(ctx, "/ledger.LedgerService/GetLedgerTransactionsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) CreateLedgerTransactions(ctx context.Context, in *CreateLedgerTransactionsRequest, opts ...grpc.CallOption) (*CreateLedgerTransactionsResponse, error) {
	out := new(CreateLedgerTransactionsResponse)
	err := c.cc.Invoke(ctx, "/ledger.LedgerService/CreateLedgerTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) GetLedgerAccountByID(ctx context.Context, in *GetLedgerAccountRequest, opts ...grpc.CallOption) (*GetLedgerAccountResponse, error) {
	out := new(GetLedgerAccountResponse)
	err := c.cc.Invoke(ctx, "/ledger.LedgerService/GetLedgerAccountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) GetLedgerAccountByPath(ctx context.Context, in *GetLedgerAccountByPathRequest, opts ...grpc.CallOption) (*GetLedgerAccountByPathResponse, error) {
	out := new(GetLedgerAccountByPathResponse)
	err := c.cc.Invoke(ctx, "/ledger.LedgerService/GetLedgerAccountByPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) CreateLedgerAccount(ctx context.Context, in *CreateLedgerAccountRequest, opts ...grpc.CallOption) (*CreateLedgerAccountResponse, error) {
	out := new(CreateLedgerAccountResponse)
	err := c.cc.Invoke(ctx, "/ledger.LedgerService/CreateLedgerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerServiceServer is the server API for LedgerService service.
// All implementations must embed UnimplementedLedgerServiceServer
// for forward compatibility
type LedgerServiceServer interface {
	GetLedgerByName(context.Context, *GetLedgerByNameRequest) (*GetLedgerByNameResponse, error)
	GetLedgerTransactionsByID(context.Context, *GetLedgerTransactionsRequest) (*GetLedgerTransactionsResponse, error)
	CreateLedgerTransactions(context.Context, *CreateLedgerTransactionsRequest) (*CreateLedgerTransactionsResponse, error)
	GetLedgerAccountByID(context.Context, *GetLedgerAccountRequest) (*GetLedgerAccountResponse, error)
	GetLedgerAccountByPath(context.Context, *GetLedgerAccountByPathRequest) (*GetLedgerAccountByPathResponse, error)
	CreateLedgerAccount(context.Context, *CreateLedgerAccountRequest) (*CreateLedgerAccountResponse, error)
	mustEmbedUnimplementedLedgerServiceServer()
}

// UnimplementedLedgerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLedgerServiceServer struct {
}

func (UnimplementedLedgerServiceServer) GetLedgerByName(context.Context, *GetLedgerByNameRequest) (*GetLedgerByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerByName not implemented")
}
func (UnimplementedLedgerServiceServer) GetLedgerTransactionsByID(context.Context, *GetLedgerTransactionsRequest) (*GetLedgerTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerTransactionsByID not implemented")
}
func (UnimplementedLedgerServiceServer) CreateLedgerTransactions(context.Context, *CreateLedgerTransactionsRequest) (*CreateLedgerTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedgerTransactions not implemented")
}
func (UnimplementedLedgerServiceServer) GetLedgerAccountByID(context.Context, *GetLedgerAccountRequest) (*GetLedgerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerAccountByID not implemented")
}
func (UnimplementedLedgerServiceServer) GetLedgerAccountByPath(context.Context, *GetLedgerAccountByPathRequest) (*GetLedgerAccountByPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerAccountByPath not implemented")
}
func (UnimplementedLedgerServiceServer) CreateLedgerAccount(context.Context, *CreateLedgerAccountRequest) (*CreateLedgerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedgerAccount not implemented")
}
func (UnimplementedLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {}

// UnsafeLedgerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerServiceServer will
// result in compilation errors.
type UnsafeLedgerServiceServer interface {
	mustEmbedUnimplementedLedgerServiceServer()
}

func RegisterLedgerServiceServer(s grpc.ServiceRegistrar, srv LedgerServiceServer) {
	s.RegisterService(&LedgerService_ServiceDesc, srv)
}

func _LedgerService_GetLedgerByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).GetLedgerByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LedgerService/GetLedgerByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).GetLedgerByName(ctx, req.(*GetLedgerByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_GetLedgerTransactionsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).GetLedgerTransactionsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LedgerService/GetLedgerTransactionsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).GetLedgerTransactionsByID(ctx, req.(*GetLedgerTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_CreateLedgerTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLedgerTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).CreateLedgerTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LedgerService/CreateLedgerTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).CreateLedgerTransactions(ctx, req.(*CreateLedgerTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_GetLedgerAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).GetLedgerAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LedgerService/GetLedgerAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).GetLedgerAccountByID(ctx, req.(*GetLedgerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_GetLedgerAccountByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerAccountByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).GetLedgerAccountByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LedgerService/GetLedgerAccountByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).GetLedgerAccountByPath(ctx, req.(*GetLedgerAccountByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_CreateLedgerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLedgerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).CreateLedgerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LedgerService/CreateLedgerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).CreateLedgerAccount(ctx, req.(*CreateLedgerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LedgerService_ServiceDesc is the grpc.ServiceDesc for LedgerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.LedgerService",
	HandlerType: (*LedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLedgerByName",
			Handler:    _LedgerService_GetLedgerByName_Handler,
		},
		{
			MethodName: "GetLedgerTransactionsByID",
			Handler:    _LedgerService_GetLedgerTransactionsByID_Handler,
		},
		{
			MethodName: "CreateLedgerTransactions",
			Handler:    _LedgerService_CreateLedgerTransactions_Handler,
		},
		{
			MethodName: "GetLedgerAccountByID",
			Handler:    _LedgerService_GetLedgerAccountByID_Handler,
		},
		{
			MethodName: "GetLedgerAccountByPath",
			Handler:    _LedgerService_GetLedgerAccountByPath_Handler,
		},
		{
			MethodName: "CreateLedgerAccount",
			Handler:    _LedgerService_CreateLedgerAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/ledger/ledger.proto",
}
