// Code generated by MockGen. DO NOT EDIT.
// Source: ../entities_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/kappapay/backend/lib/golang/src/kappa/services/entities"
	grpc "google.golang.org/grpc"
)

// MockEntityServiceClient is a mock of EntityServiceClient interface.
type MockEntityServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEntityServiceClientMockRecorder
}

// MockEntityServiceClientMockRecorder is the mock recorder for MockEntityServiceClient.
type MockEntityServiceClientMockRecorder struct {
	mock *MockEntityServiceClient
}

// NewMockEntityServiceClient creates a new mock instance.
func NewMockEntityServiceClient(ctrl *gomock.Controller) *MockEntityServiceClient {
	mock := &MockEntityServiceClient{ctrl: ctrl}
	mock.recorder = &MockEntityServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityServiceClient) EXPECT() *MockEntityServiceClientMockRecorder {
	return m.recorder
}

// AddBusinessMember mocks base method.
func (m *MockEntityServiceClient) AddBusinessMember(ctx context.Context, in *entities.AddBusinessMemberRequest, opts ...grpc.CallOption) (*entities.AddBusinessMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBusinessMember", varargs...)
	ret0, _ := ret[0].(*entities.AddBusinessMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBusinessMember indicates an expected call of AddBusinessMember.
func (mr *MockEntityServiceClientMockRecorder) AddBusinessMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBusinessMember", reflect.TypeOf((*MockEntityServiceClient)(nil).AddBusinessMember), varargs...)
}

// AddBusinessMembers mocks base method.
func (m *MockEntityServiceClient) AddBusinessMembers(ctx context.Context, in *entities.AddBusinessMembersRequest, opts ...grpc.CallOption) (*entities.AddBusinessMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBusinessMembers", varargs...)
	ret0, _ := ret[0].(*entities.AddBusinessMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBusinessMembers indicates an expected call of AddBusinessMembers.
func (mr *MockEntityServiceClientMockRecorder) AddBusinessMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBusinessMembers", reflect.TypeOf((*MockEntityServiceClient)(nil).AddBusinessMembers), varargs...)
}

// CertifyBusinessMember mocks base method.
func (m *MockEntityServiceClient) CertifyBusinessMember(ctx context.Context, in *entities.CertifyBusinessMemberRequest, opts ...grpc.CallOption) (*entities.CertifyBusinessMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CertifyBusinessMember", varargs...)
	ret0, _ := ret[0].(*entities.CertifyBusinessMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyBusinessMember indicates an expected call of CertifyBusinessMember.
func (mr *MockEntityServiceClientMockRecorder) CertifyBusinessMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyBusinessMember", reflect.TypeOf((*MockEntityServiceClient)(nil).CertifyBusinessMember), varargs...)
}

// CheckTag mocks base method.
func (m *MockEntityServiceClient) CheckTag(ctx context.Context, in *entities.CheckTagRequest, opts ...grpc.CallOption) (*entities.CheckTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckTag", varargs...)
	ret0, _ := ret[0].(*entities.CheckTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTag indicates an expected call of CheckTag.
func (mr *MockEntityServiceClientMockRecorder) CheckTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTag", reflect.TypeOf((*MockEntityServiceClient)(nil).CheckTag), varargs...)
}

// CreateBusinessEntity mocks base method.
func (m *MockEntityServiceClient) CreateBusinessEntity(ctx context.Context, in *entities.CreateBusinessEntityRequest, opts ...grpc.CallOption) (*entities.CreateBusinessEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBusinessEntity", varargs...)
	ret0, _ := ret[0].(*entities.CreateBusinessEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBusinessEntity indicates an expected call of CreateBusinessEntity.
func (mr *MockEntityServiceClientMockRecorder) CreateBusinessEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBusinessEntity", reflect.TypeOf((*MockEntityServiceClient)(nil).CreateBusinessEntity), varargs...)
}

// CreateEntityAccountAgreement mocks base method.
func (m *MockEntityServiceClient) CreateEntityAccountAgreement(ctx context.Context, in *entities.CreateEntityAccountAgreementRequest, opts ...grpc.CallOption) (*entities.CreateEntityAccountAgreementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEntityAccountAgreement", varargs...)
	ret0, _ := ret[0].(*entities.CreateEntityAccountAgreementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityAccountAgreement indicates an expected call of CreateEntityAccountAgreement.
func (mr *MockEntityServiceClientMockRecorder) CreateEntityAccountAgreement(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityAccountAgreement", reflect.TypeOf((*MockEntityServiceClient)(nil).CreateEntityAccountAgreement), varargs...)
}

// CreateIdentity mocks base method.
func (m *MockEntityServiceClient) CreateIdentity(ctx context.Context, in *entities.CreateIdentityRequest, opts ...grpc.CallOption) (*entities.CreateIdentityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIdentity", varargs...)
	ret0, _ := ret[0].(*entities.CreateIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentity indicates an expected call of CreateIdentity.
func (mr *MockEntityServiceClientMockRecorder) CreateIdentity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentity", reflect.TypeOf((*MockEntityServiceClient)(nil).CreateIdentity), varargs...)
}

// CreateIndividualEntity mocks base method.
func (m *MockEntityServiceClient) CreateIndividualEntity(ctx context.Context, in *entities.CreateIndividualEntityRequest, opts ...grpc.CallOption) (*entities.CreateIndividualEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIndividualEntity", varargs...)
	ret0, _ := ret[0].(*entities.CreateIndividualEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndividualEntity indicates an expected call of CreateIndividualEntity.
func (mr *MockEntityServiceClientMockRecorder) CreateIndividualEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndividualEntity", reflect.TypeOf((*MockEntityServiceClient)(nil).CreateIndividualEntity), varargs...)
}

// DeleteEntityByID mocks base method.
func (m *MockEntityServiceClient) DeleteEntityByID(ctx context.Context, in *entities.DeleteEntityByIDRequest, opts ...grpc.CallOption) (*entities.DeleteEntityByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEntityByID", varargs...)
	ret0, _ := ret[0].(*entities.DeleteEntityByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntityByID indicates an expected call of DeleteEntityByID.
func (mr *MockEntityServiceClientMockRecorder) DeleteEntityByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityByID", reflect.TypeOf((*MockEntityServiceClient)(nil).DeleteEntityByID), varargs...)
}

// GetBusinessByEntityID mocks base method.
func (m *MockEntityServiceClient) GetBusinessByEntityID(ctx context.Context, in *entities.GetBusinessByEntityIDRequest, opts ...grpc.CallOption) (*entities.GetBusinessByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessByEntityID", varargs...)
	ret0, _ := ret[0].(*entities.GetBusinessByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessByEntityID indicates an expected call of GetBusinessByEntityID.
func (mr *MockEntityServiceClientMockRecorder) GetBusinessByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessByEntityID", reflect.TypeOf((*MockEntityServiceClient)(nil).GetBusinessByEntityID), varargs...)
}

// GetBusinessEntityByNameAndDomicile mocks base method.
func (m *MockEntityServiceClient) GetBusinessEntityByNameAndDomicile(ctx context.Context, in *entities.GetBusinessEntityByNameAndDomicileRequest, opts ...grpc.CallOption) (*entities.GetBusinessEntityByNameAndDomicileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessEntityByNameAndDomicile", varargs...)
	ret0, _ := ret[0].(*entities.GetBusinessEntityByNameAndDomicileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessEntityByNameAndDomicile indicates an expected call of GetBusinessEntityByNameAndDomicile.
func (mr *MockEntityServiceClientMockRecorder) GetBusinessEntityByNameAndDomicile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessEntityByNameAndDomicile", reflect.TypeOf((*MockEntityServiceClient)(nil).GetBusinessEntityByNameAndDomicile), varargs...)
}

// GetBusinessEntityByTag mocks base method.
func (m *MockEntityServiceClient) GetBusinessEntityByTag(ctx context.Context, in *entities.GetBusinessEntityByTagRequest, opts ...grpc.CallOption) (*entities.GetBusinessEntityByTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessEntityByTag", varargs...)
	ret0, _ := ret[0].(*entities.GetBusinessEntityByTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessEntityByTag indicates an expected call of GetBusinessEntityByTag.
func (mr *MockEntityServiceClientMockRecorder) GetBusinessEntityByTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessEntityByTag", reflect.TypeOf((*MockEntityServiceClient)(nil).GetBusinessEntityByTag), varargs...)
}

// GetBusinessMemberByID mocks base method.
func (m *MockEntityServiceClient) GetBusinessMemberByID(ctx context.Context, in *entities.GetBusinessMemberByIDRequest, opts ...grpc.CallOption) (*entities.GetBusinessMemberByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessMemberByID", varargs...)
	ret0, _ := ret[0].(*entities.GetBusinessMemberByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMemberByID indicates an expected call of GetBusinessMemberByID.
func (mr *MockEntityServiceClientMockRecorder) GetBusinessMemberByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMemberByID", reflect.TypeOf((*MockEntityServiceClient)(nil).GetBusinessMemberByID), varargs...)
}

// GetBusinessMembers mocks base method.
func (m *MockEntityServiceClient) GetBusinessMembers(ctx context.Context, in *entities.GetBusinessMembersRequest, opts ...grpc.CallOption) (*entities.GetBusinessMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessMembers", varargs...)
	ret0, _ := ret[0].(*entities.GetBusinessMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMembers indicates an expected call of GetBusinessMembers.
func (mr *MockEntityServiceClientMockRecorder) GetBusinessMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMembers", reflect.TypeOf((*MockEntityServiceClient)(nil).GetBusinessMembers), varargs...)
}

// GetBusinessMembersByIndividualEntityID mocks base method.
func (m *MockEntityServiceClient) GetBusinessMembersByIndividualEntityID(ctx context.Context, in *entities.GetBusinessMembersByIndividualEntityIDRequest, opts ...grpc.CallOption) (*entities.GetBusinessMembersByIndividualEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessMembersByIndividualEntityID", varargs...)
	ret0, _ := ret[0].(*entities.GetBusinessMembersByIndividualEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMembersByIndividualEntityID indicates an expected call of GetBusinessMembersByIndividualEntityID.
func (mr *MockEntityServiceClientMockRecorder) GetBusinessMembersByIndividualEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMembersByIndividualEntityID", reflect.TypeOf((*MockEntityServiceClient)(nil).GetBusinessMembersByIndividualEntityID), varargs...)
}

// GetEntitiesByUserID mocks base method.
func (m *MockEntityServiceClient) GetEntitiesByUserID(ctx context.Context, in *entities.GetEntitiesByUserIDRequest, opts ...grpc.CallOption) (*entities.GetEntitiesByUserIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntitiesByUserID", varargs...)
	ret0, _ := ret[0].(*entities.GetEntitiesByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesByUserID indicates an expected call of GetEntitiesByUserID.
func (mr *MockEntityServiceClientMockRecorder) GetEntitiesByUserID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesByUserID", reflect.TypeOf((*MockEntityServiceClient)(nil).GetEntitiesByUserID), varargs...)
}

// GetEntityAccountAgreementByID mocks base method.
func (m *MockEntityServiceClient) GetEntityAccountAgreementByID(ctx context.Context, in *entities.GetEntityAccountAgreementByIDRequest, opts ...grpc.CallOption) (*entities.GetEntityAccountAgreementByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityAccountAgreementByID", varargs...)
	ret0, _ := ret[0].(*entities.GetEntityAccountAgreementByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityAccountAgreementByID indicates an expected call of GetEntityAccountAgreementByID.
func (mr *MockEntityServiceClientMockRecorder) GetEntityAccountAgreementByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityAccountAgreementByID", reflect.TypeOf((*MockEntityServiceClient)(nil).GetEntityAccountAgreementByID), varargs...)
}

// GetEntityAccountAgreementsByUserID mocks base method.
func (m *MockEntityServiceClient) GetEntityAccountAgreementsByUserID(ctx context.Context, in *entities.GetEntityAccountAgreementsByUserIDRequest, opts ...grpc.CallOption) (*entities.GetEntityAccountAgreementsByUserIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityAccountAgreementsByUserID", varargs...)
	ret0, _ := ret[0].(*entities.GetEntityAccountAgreementsByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityAccountAgreementsByUserID indicates an expected call of GetEntityAccountAgreementsByUserID.
func (mr *MockEntityServiceClientMockRecorder) GetEntityAccountAgreementsByUserID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityAccountAgreementsByUserID", reflect.TypeOf((*MockEntityServiceClient)(nil).GetEntityAccountAgreementsByUserID), varargs...)
}

// GetEntityByID mocks base method.
func (m *MockEntityServiceClient) GetEntityByID(ctx context.Context, in *entities.GetEntityByIDRequest, opts ...grpc.CallOption) (*entities.GetEntityByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityByID", varargs...)
	ret0, _ := ret[0].(*entities.GetEntityByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByID indicates an expected call of GetEntityByID.
func (mr *MockEntityServiceClientMockRecorder) GetEntityByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByID", reflect.TypeOf((*MockEntityServiceClient)(nil).GetEntityByID), varargs...)
}

// GetIndividualByEntityID mocks base method.
func (m *MockEntityServiceClient) GetIndividualByEntityID(ctx context.Context, in *entities.GetIndividualByEntityIDRequest, opts ...grpc.CallOption) (*entities.GetIndividualByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIndividualByEntityID", varargs...)
	ret0, _ := ret[0].(*entities.GetIndividualByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualByEntityID indicates an expected call of GetIndividualByEntityID.
func (mr *MockEntityServiceClientMockRecorder) GetIndividualByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualByEntityID", reflect.TypeOf((*MockEntityServiceClient)(nil).GetIndividualByEntityID), varargs...)
}

// GetIndividualEntityByTag mocks base method.
func (m *MockEntityServiceClient) GetIndividualEntityByTag(ctx context.Context, in *entities.GetIndividualEntityByTagRequest, opts ...grpc.CallOption) (*entities.GetIndividualEntityByTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIndividualEntityByTag", varargs...)
	ret0, _ := ret[0].(*entities.GetIndividualEntityByTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualEntityByTag indicates an expected call of GetIndividualEntityByTag.
func (mr *MockEntityServiceClientMockRecorder) GetIndividualEntityByTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualEntityByTag", reflect.TypeOf((*MockEntityServiceClient)(nil).GetIndividualEntityByTag), varargs...)
}

// RemoveBusinessMember mocks base method.
func (m *MockEntityServiceClient) RemoveBusinessMember(ctx context.Context, in *entities.RemoveBusinessMemberRequest, opts ...grpc.CallOption) (*entities.RemoveBusinessMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBusinessMember", varargs...)
	ret0, _ := ret[0].(*entities.RemoveBusinessMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBusinessMember indicates an expected call of RemoveBusinessMember.
func (mr *MockEntityServiceClientMockRecorder) RemoveBusinessMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBusinessMember", reflect.TypeOf((*MockEntityServiceClient)(nil).RemoveBusinessMember), varargs...)
}

// RemoveBusinessMembers mocks base method.
func (m *MockEntityServiceClient) RemoveBusinessMembers(ctx context.Context, in *entities.RemoveBusinessMembersRequest, opts ...grpc.CallOption) (*entities.RemoveBusinessMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBusinessMembers", varargs...)
	ret0, _ := ret[0].(*entities.RemoveBusinessMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBusinessMembers indicates an expected call of RemoveBusinessMembers.
func (mr *MockEntityServiceClientMockRecorder) RemoveBusinessMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBusinessMembers", reflect.TypeOf((*MockEntityServiceClient)(nil).RemoveBusinessMembers), varargs...)
}

// RequestBusinessMemberKYC mocks base method.
func (m *MockEntityServiceClient) RequestBusinessMemberKYC(ctx context.Context, in *entities.RequestBusinessMemberKYCRequest, opts ...grpc.CallOption) (*entities.RequestBusinessMemberKYCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestBusinessMemberKYC", varargs...)
	ret0, _ := ret[0].(*entities.RequestBusinessMemberKYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestBusinessMemberKYC indicates an expected call of RequestBusinessMemberKYC.
func (mr *MockEntityServiceClientMockRecorder) RequestBusinessMemberKYC(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestBusinessMemberKYC", reflect.TypeOf((*MockEntityServiceClient)(nil).RequestBusinessMemberKYC), varargs...)
}

// SearchEntityByTag mocks base method.
func (m *MockEntityServiceClient) SearchEntityByTag(ctx context.Context, in *entities.SearchEntityByTagRequest, opts ...grpc.CallOption) (*entities.SearchEntityByTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchEntityByTag", varargs...)
	ret0, _ := ret[0].(*entities.SearchEntityByTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEntityByTag indicates an expected call of SearchEntityByTag.
func (mr *MockEntityServiceClientMockRecorder) SearchEntityByTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEntityByTag", reflect.TypeOf((*MockEntityServiceClient)(nil).SearchEntityByTag), varargs...)
}

// SetIdentityVerified mocks base method.
func (m *MockEntityServiceClient) SetIdentityVerified(ctx context.Context, in *entities.SetIdentityVerifiedRequest, opts ...grpc.CallOption) (*entities.SetIdentityVerifiedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetIdentityVerified", varargs...)
	ret0, _ := ret[0].(*entities.SetIdentityVerifiedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIdentityVerified indicates an expected call of SetIdentityVerified.
func (mr *MockEntityServiceClientMockRecorder) SetIdentityVerified(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdentityVerified", reflect.TypeOf((*MockEntityServiceClient)(nil).SetIdentityVerified), varargs...)
}

// SuggestTags mocks base method.
func (m *MockEntityServiceClient) SuggestTags(ctx context.Context, in *entities.SuggestTagsRequest, opts ...grpc.CallOption) (*entities.SuggestTagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SuggestTags", varargs...)
	ret0, _ := ret[0].(*entities.SuggestTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestTags indicates an expected call of SuggestTags.
func (mr *MockEntityServiceClientMockRecorder) SuggestTags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestTags", reflect.TypeOf((*MockEntityServiceClient)(nil).SuggestTags), varargs...)
}

// UpdateBusinessEntity mocks base method.
func (m *MockEntityServiceClient) UpdateBusinessEntity(ctx context.Context, in *entities.UpdateBusinessEntityRequest, opts ...grpc.CallOption) (*entities.UpdateBusinessEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBusinessEntity", varargs...)
	ret0, _ := ret[0].(*entities.UpdateBusinessEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBusinessEntity indicates an expected call of UpdateBusinessEntity.
func (mr *MockEntityServiceClientMockRecorder) UpdateBusinessEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessEntity", reflect.TypeOf((*MockEntityServiceClient)(nil).UpdateBusinessEntity), varargs...)
}

// UpdateBusinessMember mocks base method.
func (m *MockEntityServiceClient) UpdateBusinessMember(ctx context.Context, in *entities.UpdateBusinessMemberRequest, opts ...grpc.CallOption) (*entities.UpdateBusinessMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBusinessMember", varargs...)
	ret0, _ := ret[0].(*entities.UpdateBusinessMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBusinessMember indicates an expected call of UpdateBusinessMember.
func (mr *MockEntityServiceClientMockRecorder) UpdateBusinessMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessMember", reflect.TypeOf((*MockEntityServiceClient)(nil).UpdateBusinessMember), varargs...)
}

// UpdateIdentity mocks base method.
func (m *MockEntityServiceClient) UpdateIdentity(ctx context.Context, in *entities.UpdateIdentityRequest, opts ...grpc.CallOption) (*entities.UpdateIdentityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIdentity", varargs...)
	ret0, _ := ret[0].(*entities.UpdateIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentity indicates an expected call of UpdateIdentity.
func (mr *MockEntityServiceClientMockRecorder) UpdateIdentity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentity", reflect.TypeOf((*MockEntityServiceClient)(nil).UpdateIdentity), varargs...)
}

// UpdateIndividualEntity mocks base method.
func (m *MockEntityServiceClient) UpdateIndividualEntity(ctx context.Context, in *entities.UpdateIndividualEntityRequest, opts ...grpc.CallOption) (*entities.UpdateIndividualEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIndividualEntity", varargs...)
	ret0, _ := ret[0].(*entities.UpdateIndividualEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIndividualEntity indicates an expected call of UpdateIndividualEntity.
func (mr *MockEntityServiceClientMockRecorder) UpdateIndividualEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndividualEntity", reflect.TypeOf((*MockEntityServiceClient)(nil).UpdateIndividualEntity), varargs...)
}

// UpdateTag mocks base method.
func (m *MockEntityServiceClient) UpdateTag(ctx context.Context, in *entities.UpdateTagRequest, opts ...grpc.CallOption) (*entities.UpdateTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTag", varargs...)
	ret0, _ := ret[0].(*entities.UpdateTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockEntityServiceClientMockRecorder) UpdateTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockEntityServiceClient)(nil).UpdateTag), varargs...)
}

// UploadIdentityDocuments mocks base method.
func (m *MockEntityServiceClient) UploadIdentityDocuments(ctx context.Context, in *entities.UploadIdentityDocumentsRequest, opts ...grpc.CallOption) (*entities.UploadIdentityDocumentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadIdentityDocuments", varargs...)
	ret0, _ := ret[0].(*entities.UploadIdentityDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadIdentityDocuments indicates an expected call of UploadIdentityDocuments.
func (mr *MockEntityServiceClientMockRecorder) UploadIdentityDocuments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadIdentityDocuments", reflect.TypeOf((*MockEntityServiceClient)(nil).UploadIdentityDocuments), varargs...)
}

// MockEntityServiceServer is a mock of EntityServiceServer interface.
type MockEntityServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEntityServiceServerMockRecorder
}

// MockEntityServiceServerMockRecorder is the mock recorder for MockEntityServiceServer.
type MockEntityServiceServerMockRecorder struct {
	mock *MockEntityServiceServer
}

// NewMockEntityServiceServer creates a new mock instance.
func NewMockEntityServiceServer(ctrl *gomock.Controller) *MockEntityServiceServer {
	mock := &MockEntityServiceServer{ctrl: ctrl}
	mock.recorder = &MockEntityServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityServiceServer) EXPECT() *MockEntityServiceServerMockRecorder {
	return m.recorder
}

// AddBusinessMember mocks base method.
func (m *MockEntityServiceServer) AddBusinessMember(arg0 context.Context, arg1 *entities.AddBusinessMemberRequest) (*entities.AddBusinessMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBusinessMember", arg0, arg1)
	ret0, _ := ret[0].(*entities.AddBusinessMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBusinessMember indicates an expected call of AddBusinessMember.
func (mr *MockEntityServiceServerMockRecorder) AddBusinessMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBusinessMember", reflect.TypeOf((*MockEntityServiceServer)(nil).AddBusinessMember), arg0, arg1)
}

// AddBusinessMembers mocks base method.
func (m *MockEntityServiceServer) AddBusinessMembers(arg0 context.Context, arg1 *entities.AddBusinessMembersRequest) (*entities.AddBusinessMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBusinessMembers", arg0, arg1)
	ret0, _ := ret[0].(*entities.AddBusinessMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBusinessMembers indicates an expected call of AddBusinessMembers.
func (mr *MockEntityServiceServerMockRecorder) AddBusinessMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBusinessMembers", reflect.TypeOf((*MockEntityServiceServer)(nil).AddBusinessMembers), arg0, arg1)
}

// CertifyBusinessMember mocks base method.
func (m *MockEntityServiceServer) CertifyBusinessMember(arg0 context.Context, arg1 *entities.CertifyBusinessMemberRequest) (*entities.CertifyBusinessMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyBusinessMember", arg0, arg1)
	ret0, _ := ret[0].(*entities.CertifyBusinessMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyBusinessMember indicates an expected call of CertifyBusinessMember.
func (mr *MockEntityServiceServerMockRecorder) CertifyBusinessMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyBusinessMember", reflect.TypeOf((*MockEntityServiceServer)(nil).CertifyBusinessMember), arg0, arg1)
}

// CheckTag mocks base method.
func (m *MockEntityServiceServer) CheckTag(arg0 context.Context, arg1 *entities.CheckTagRequest) (*entities.CheckTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTag", arg0, arg1)
	ret0, _ := ret[0].(*entities.CheckTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTag indicates an expected call of CheckTag.
func (mr *MockEntityServiceServerMockRecorder) CheckTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTag", reflect.TypeOf((*MockEntityServiceServer)(nil).CheckTag), arg0, arg1)
}

// CreateBusinessEntity mocks base method.
func (m *MockEntityServiceServer) CreateBusinessEntity(arg0 context.Context, arg1 *entities.CreateBusinessEntityRequest) (*entities.CreateBusinessEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBusinessEntity", arg0, arg1)
	ret0, _ := ret[0].(*entities.CreateBusinessEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBusinessEntity indicates an expected call of CreateBusinessEntity.
func (mr *MockEntityServiceServerMockRecorder) CreateBusinessEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBusinessEntity", reflect.TypeOf((*MockEntityServiceServer)(nil).CreateBusinessEntity), arg0, arg1)
}

// CreateEntityAccountAgreement mocks base method.
func (m *MockEntityServiceServer) CreateEntityAccountAgreement(arg0 context.Context, arg1 *entities.CreateEntityAccountAgreementRequest) (*entities.CreateEntityAccountAgreementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityAccountAgreement", arg0, arg1)
	ret0, _ := ret[0].(*entities.CreateEntityAccountAgreementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityAccountAgreement indicates an expected call of CreateEntityAccountAgreement.
func (mr *MockEntityServiceServerMockRecorder) CreateEntityAccountAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityAccountAgreement", reflect.TypeOf((*MockEntityServiceServer)(nil).CreateEntityAccountAgreement), arg0, arg1)
}

// CreateIdentity mocks base method.
func (m *MockEntityServiceServer) CreateIdentity(arg0 context.Context, arg1 *entities.CreateIdentityRequest) (*entities.CreateIdentityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentity", arg0, arg1)
	ret0, _ := ret[0].(*entities.CreateIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentity indicates an expected call of CreateIdentity.
func (mr *MockEntityServiceServerMockRecorder) CreateIdentity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentity", reflect.TypeOf((*MockEntityServiceServer)(nil).CreateIdentity), arg0, arg1)
}

// CreateIndividualEntity mocks base method.
func (m *MockEntityServiceServer) CreateIndividualEntity(arg0 context.Context, arg1 *entities.CreateIndividualEntityRequest) (*entities.CreateIndividualEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndividualEntity", arg0, arg1)
	ret0, _ := ret[0].(*entities.CreateIndividualEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndividualEntity indicates an expected call of CreateIndividualEntity.
func (mr *MockEntityServiceServerMockRecorder) CreateIndividualEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndividualEntity", reflect.TypeOf((*MockEntityServiceServer)(nil).CreateIndividualEntity), arg0, arg1)
}

// DeleteEntityByID mocks base method.
func (m *MockEntityServiceServer) DeleteEntityByID(arg0 context.Context, arg1 *entities.DeleteEntityByIDRequest) (*entities.DeleteEntityByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.DeleteEntityByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntityByID indicates an expected call of DeleteEntityByID.
func (mr *MockEntityServiceServerMockRecorder) DeleteEntityByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityByID", reflect.TypeOf((*MockEntityServiceServer)(nil).DeleteEntityByID), arg0, arg1)
}

// GetBusinessByEntityID mocks base method.
func (m *MockEntityServiceServer) GetBusinessByEntityID(arg0 context.Context, arg1 *entities.GetBusinessByEntityIDRequest) (*entities.GetBusinessByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetBusinessByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessByEntityID indicates an expected call of GetBusinessByEntityID.
func (mr *MockEntityServiceServerMockRecorder) GetBusinessByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessByEntityID", reflect.TypeOf((*MockEntityServiceServer)(nil).GetBusinessByEntityID), arg0, arg1)
}

// GetBusinessEntityByNameAndDomicile mocks base method.
func (m *MockEntityServiceServer) GetBusinessEntityByNameAndDomicile(arg0 context.Context, arg1 *entities.GetBusinessEntityByNameAndDomicileRequest) (*entities.GetBusinessEntityByNameAndDomicileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessEntityByNameAndDomicile", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetBusinessEntityByNameAndDomicileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessEntityByNameAndDomicile indicates an expected call of GetBusinessEntityByNameAndDomicile.
func (mr *MockEntityServiceServerMockRecorder) GetBusinessEntityByNameAndDomicile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessEntityByNameAndDomicile", reflect.TypeOf((*MockEntityServiceServer)(nil).GetBusinessEntityByNameAndDomicile), arg0, arg1)
}

// GetBusinessEntityByTag mocks base method.
func (m *MockEntityServiceServer) GetBusinessEntityByTag(arg0 context.Context, arg1 *entities.GetBusinessEntityByTagRequest) (*entities.GetBusinessEntityByTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessEntityByTag", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetBusinessEntityByTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessEntityByTag indicates an expected call of GetBusinessEntityByTag.
func (mr *MockEntityServiceServerMockRecorder) GetBusinessEntityByTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessEntityByTag", reflect.TypeOf((*MockEntityServiceServer)(nil).GetBusinessEntityByTag), arg0, arg1)
}

// GetBusinessMemberByID mocks base method.
func (m *MockEntityServiceServer) GetBusinessMemberByID(arg0 context.Context, arg1 *entities.GetBusinessMemberByIDRequest) (*entities.GetBusinessMemberByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessMemberByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetBusinessMemberByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMemberByID indicates an expected call of GetBusinessMemberByID.
func (mr *MockEntityServiceServerMockRecorder) GetBusinessMemberByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMemberByID", reflect.TypeOf((*MockEntityServiceServer)(nil).GetBusinessMemberByID), arg0, arg1)
}

// GetBusinessMembers mocks base method.
func (m *MockEntityServiceServer) GetBusinessMembers(arg0 context.Context, arg1 *entities.GetBusinessMembersRequest) (*entities.GetBusinessMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessMembers", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetBusinessMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMembers indicates an expected call of GetBusinessMembers.
func (mr *MockEntityServiceServerMockRecorder) GetBusinessMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMembers", reflect.TypeOf((*MockEntityServiceServer)(nil).GetBusinessMembers), arg0, arg1)
}

// GetBusinessMembersByIndividualEntityID mocks base method.
func (m *MockEntityServiceServer) GetBusinessMembersByIndividualEntityID(arg0 context.Context, arg1 *entities.GetBusinessMembersByIndividualEntityIDRequest) (*entities.GetBusinessMembersByIndividualEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessMembersByIndividualEntityID", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetBusinessMembersByIndividualEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMembersByIndividualEntityID indicates an expected call of GetBusinessMembersByIndividualEntityID.
func (mr *MockEntityServiceServerMockRecorder) GetBusinessMembersByIndividualEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMembersByIndividualEntityID", reflect.TypeOf((*MockEntityServiceServer)(nil).GetBusinessMembersByIndividualEntityID), arg0, arg1)
}

// GetEntitiesByUserID mocks base method.
func (m *MockEntityServiceServer) GetEntitiesByUserID(arg0 context.Context, arg1 *entities.GetEntitiesByUserIDRequest) (*entities.GetEntitiesByUserIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesByUserID", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetEntitiesByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesByUserID indicates an expected call of GetEntitiesByUserID.
func (mr *MockEntityServiceServerMockRecorder) GetEntitiesByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesByUserID", reflect.TypeOf((*MockEntityServiceServer)(nil).GetEntitiesByUserID), arg0, arg1)
}

// GetEntityAccountAgreementByID mocks base method.
func (m *MockEntityServiceServer) GetEntityAccountAgreementByID(arg0 context.Context, arg1 *entities.GetEntityAccountAgreementByIDRequest) (*entities.GetEntityAccountAgreementByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityAccountAgreementByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetEntityAccountAgreementByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityAccountAgreementByID indicates an expected call of GetEntityAccountAgreementByID.
func (mr *MockEntityServiceServerMockRecorder) GetEntityAccountAgreementByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityAccountAgreementByID", reflect.TypeOf((*MockEntityServiceServer)(nil).GetEntityAccountAgreementByID), arg0, arg1)
}

// GetEntityAccountAgreementsByUserID mocks base method.
func (m *MockEntityServiceServer) GetEntityAccountAgreementsByUserID(arg0 context.Context, arg1 *entities.GetEntityAccountAgreementsByUserIDRequest) (*entities.GetEntityAccountAgreementsByUserIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityAccountAgreementsByUserID", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetEntityAccountAgreementsByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityAccountAgreementsByUserID indicates an expected call of GetEntityAccountAgreementsByUserID.
func (mr *MockEntityServiceServerMockRecorder) GetEntityAccountAgreementsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityAccountAgreementsByUserID", reflect.TypeOf((*MockEntityServiceServer)(nil).GetEntityAccountAgreementsByUserID), arg0, arg1)
}

// GetEntityByID mocks base method.
func (m *MockEntityServiceServer) GetEntityByID(arg0 context.Context, arg1 *entities.GetEntityByIDRequest) (*entities.GetEntityByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetEntityByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByID indicates an expected call of GetEntityByID.
func (mr *MockEntityServiceServerMockRecorder) GetEntityByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByID", reflect.TypeOf((*MockEntityServiceServer)(nil).GetEntityByID), arg0, arg1)
}

// GetIndividualByEntityID mocks base method.
func (m *MockEntityServiceServer) GetIndividualByEntityID(arg0 context.Context, arg1 *entities.GetIndividualByEntityIDRequest) (*entities.GetIndividualByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndividualByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetIndividualByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualByEntityID indicates an expected call of GetIndividualByEntityID.
func (mr *MockEntityServiceServerMockRecorder) GetIndividualByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualByEntityID", reflect.TypeOf((*MockEntityServiceServer)(nil).GetIndividualByEntityID), arg0, arg1)
}

// GetIndividualEntityByTag mocks base method.
func (m *MockEntityServiceServer) GetIndividualEntityByTag(arg0 context.Context, arg1 *entities.GetIndividualEntityByTagRequest) (*entities.GetIndividualEntityByTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndividualEntityByTag", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetIndividualEntityByTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualEntityByTag indicates an expected call of GetIndividualEntityByTag.
func (mr *MockEntityServiceServerMockRecorder) GetIndividualEntityByTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualEntityByTag", reflect.TypeOf((*MockEntityServiceServer)(nil).GetIndividualEntityByTag), arg0, arg1)
}

// RemoveBusinessMember mocks base method.
func (m *MockEntityServiceServer) RemoveBusinessMember(arg0 context.Context, arg1 *entities.RemoveBusinessMemberRequest) (*entities.RemoveBusinessMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBusinessMember", arg0, arg1)
	ret0, _ := ret[0].(*entities.RemoveBusinessMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBusinessMember indicates an expected call of RemoveBusinessMember.
func (mr *MockEntityServiceServerMockRecorder) RemoveBusinessMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBusinessMember", reflect.TypeOf((*MockEntityServiceServer)(nil).RemoveBusinessMember), arg0, arg1)
}

// RemoveBusinessMembers mocks base method.
func (m *MockEntityServiceServer) RemoveBusinessMembers(arg0 context.Context, arg1 *entities.RemoveBusinessMembersRequest) (*entities.RemoveBusinessMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBusinessMembers", arg0, arg1)
	ret0, _ := ret[0].(*entities.RemoveBusinessMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBusinessMembers indicates an expected call of RemoveBusinessMembers.
func (mr *MockEntityServiceServerMockRecorder) RemoveBusinessMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBusinessMembers", reflect.TypeOf((*MockEntityServiceServer)(nil).RemoveBusinessMembers), arg0, arg1)
}

// RequestBusinessMemberKYC mocks base method.
func (m *MockEntityServiceServer) RequestBusinessMemberKYC(arg0 context.Context, arg1 *entities.RequestBusinessMemberKYCRequest) (*entities.RequestBusinessMemberKYCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestBusinessMemberKYC", arg0, arg1)
	ret0, _ := ret[0].(*entities.RequestBusinessMemberKYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestBusinessMemberKYC indicates an expected call of RequestBusinessMemberKYC.
func (mr *MockEntityServiceServerMockRecorder) RequestBusinessMemberKYC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestBusinessMemberKYC", reflect.TypeOf((*MockEntityServiceServer)(nil).RequestBusinessMemberKYC), arg0, arg1)
}

// SearchEntityByTag mocks base method.
func (m *MockEntityServiceServer) SearchEntityByTag(arg0 context.Context, arg1 *entities.SearchEntityByTagRequest) (*entities.SearchEntityByTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEntityByTag", arg0, arg1)
	ret0, _ := ret[0].(*entities.SearchEntityByTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEntityByTag indicates an expected call of SearchEntityByTag.
func (mr *MockEntityServiceServerMockRecorder) SearchEntityByTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEntityByTag", reflect.TypeOf((*MockEntityServiceServer)(nil).SearchEntityByTag), arg0, arg1)
}

// SetIdentityVerified mocks base method.
func (m *MockEntityServiceServer) SetIdentityVerified(arg0 context.Context, arg1 *entities.SetIdentityVerifiedRequest) (*entities.SetIdentityVerifiedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIdentityVerified", arg0, arg1)
	ret0, _ := ret[0].(*entities.SetIdentityVerifiedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIdentityVerified indicates an expected call of SetIdentityVerified.
func (mr *MockEntityServiceServerMockRecorder) SetIdentityVerified(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdentityVerified", reflect.TypeOf((*MockEntityServiceServer)(nil).SetIdentityVerified), arg0, arg1)
}

// SuggestTags mocks base method.
func (m *MockEntityServiceServer) SuggestTags(arg0 context.Context, arg1 *entities.SuggestTagsRequest) (*entities.SuggestTagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestTags", arg0, arg1)
	ret0, _ := ret[0].(*entities.SuggestTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestTags indicates an expected call of SuggestTags.
func (mr *MockEntityServiceServerMockRecorder) SuggestTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestTags", reflect.TypeOf((*MockEntityServiceServer)(nil).SuggestTags), arg0, arg1)
}

// UpdateBusinessEntity mocks base method.
func (m *MockEntityServiceServer) UpdateBusinessEntity(arg0 context.Context, arg1 *entities.UpdateBusinessEntityRequest) (*entities.UpdateBusinessEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessEntity", arg0, arg1)
	ret0, _ := ret[0].(*entities.UpdateBusinessEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBusinessEntity indicates an expected call of UpdateBusinessEntity.
func (mr *MockEntityServiceServerMockRecorder) UpdateBusinessEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessEntity", reflect.TypeOf((*MockEntityServiceServer)(nil).UpdateBusinessEntity), arg0, arg1)
}

// UpdateBusinessMember mocks base method.
func (m *MockEntityServiceServer) UpdateBusinessMember(arg0 context.Context, arg1 *entities.UpdateBusinessMemberRequest) (*entities.UpdateBusinessMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessMember", arg0, arg1)
	ret0, _ := ret[0].(*entities.UpdateBusinessMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBusinessMember indicates an expected call of UpdateBusinessMember.
func (mr *MockEntityServiceServerMockRecorder) UpdateBusinessMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessMember", reflect.TypeOf((*MockEntityServiceServer)(nil).UpdateBusinessMember), arg0, arg1)
}

// UpdateIdentity mocks base method.
func (m *MockEntityServiceServer) UpdateIdentity(arg0 context.Context, arg1 *entities.UpdateIdentityRequest) (*entities.UpdateIdentityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentity", arg0, arg1)
	ret0, _ := ret[0].(*entities.UpdateIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentity indicates an expected call of UpdateIdentity.
func (mr *MockEntityServiceServerMockRecorder) UpdateIdentity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentity", reflect.TypeOf((*MockEntityServiceServer)(nil).UpdateIdentity), arg0, arg1)
}

// UpdateIndividualEntity mocks base method.
func (m *MockEntityServiceServer) UpdateIndividualEntity(arg0 context.Context, arg1 *entities.UpdateIndividualEntityRequest) (*entities.UpdateIndividualEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndividualEntity", arg0, arg1)
	ret0, _ := ret[0].(*entities.UpdateIndividualEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIndividualEntity indicates an expected call of UpdateIndividualEntity.
func (mr *MockEntityServiceServerMockRecorder) UpdateIndividualEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndividualEntity", reflect.TypeOf((*MockEntityServiceServer)(nil).UpdateIndividualEntity), arg0, arg1)
}

// UpdateTag mocks base method.
func (m *MockEntityServiceServer) UpdateTag(arg0 context.Context, arg1 *entities.UpdateTagRequest) (*entities.UpdateTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", arg0, arg1)
	ret0, _ := ret[0].(*entities.UpdateTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockEntityServiceServerMockRecorder) UpdateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockEntityServiceServer)(nil).UpdateTag), arg0, arg1)
}

// UploadIdentityDocuments mocks base method.
func (m *MockEntityServiceServer) UploadIdentityDocuments(arg0 context.Context, arg1 *entities.UploadIdentityDocumentsRequest) (*entities.UploadIdentityDocumentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadIdentityDocuments", arg0, arg1)
	ret0, _ := ret[0].(*entities.UploadIdentityDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadIdentityDocuments indicates an expected call of UploadIdentityDocuments.
func (mr *MockEntityServiceServerMockRecorder) UploadIdentityDocuments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadIdentityDocuments", reflect.TypeOf((*MockEntityServiceServer)(nil).UploadIdentityDocuments), arg0, arg1)
}

// mustEmbedUnimplementedEntityServiceServer mocks base method.
func (m *MockEntityServiceServer) mustEmbedUnimplementedEntityServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEntityServiceServer")
}

// mustEmbedUnimplementedEntityServiceServer indicates an expected call of mustEmbedUnimplementedEntityServiceServer.
func (mr *MockEntityServiceServerMockRecorder) mustEmbedUnimplementedEntityServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEntityServiceServer", reflect.TypeOf((*MockEntityServiceServer)(nil).mustEmbedUnimplementedEntityServiceServer))
}

// MockUnsafeEntityServiceServer is a mock of UnsafeEntityServiceServer interface.
type MockUnsafeEntityServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEntityServiceServerMockRecorder
}

// MockUnsafeEntityServiceServerMockRecorder is the mock recorder for MockUnsafeEntityServiceServer.
type MockUnsafeEntityServiceServerMockRecorder struct {
	mock *MockUnsafeEntityServiceServer
}

// NewMockUnsafeEntityServiceServer creates a new mock instance.
func NewMockUnsafeEntityServiceServer(ctrl *gomock.Controller) *MockUnsafeEntityServiceServer {
	mock := &MockUnsafeEntityServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEntityServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEntityServiceServer) EXPECT() *MockUnsafeEntityServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEntityServiceServer mocks base method.
func (m *MockUnsafeEntityServiceServer) mustEmbedUnimplementedEntityServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEntityServiceServer")
}

// mustEmbedUnimplementedEntityServiceServer indicates an expected call of mustEmbedUnimplementedEntityServiceServer.
func (mr *MockUnsafeEntityServiceServerMockRecorder) mustEmbedUnimplementedEntityServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEntityServiceServer", reflect.TypeOf((*MockUnsafeEntityServiceServer)(nil).mustEmbedUnimplementedEntityServiceServer))
}
