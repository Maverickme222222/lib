// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/entities/entities.proto

package entities

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityServiceClient interface {
	// Creates a new individual entity
	CreateIndividualEntity(ctx context.Context, in *CreateIndividualEntityRequest, opts ...grpc.CallOption) (*CreateIndividualEntityResponse, error)
	GetIndividualByEntityID(ctx context.Context, in *GetIndividualByEntityIDRequest, opts ...grpc.CallOption) (*GetIndividualByEntityIDResponse, error)
	GetIndividualEntityByTag(ctx context.Context, in *GetIndividualEntityByTagRequest, opts ...grpc.CallOption) (*GetIndividualEntityByTagResponse, error)
	UpdateIndividualEntity(ctx context.Context, in *UpdateIndividualEntityRequest, opts ...grpc.CallOption) (*UpdateIndividualEntityResponse, error)
	CreateBusinessEntity(ctx context.Context, in *CreateBusinessEntityRequest, opts ...grpc.CallOption) (*CreateBusinessEntityResponse, error)
	GetBusinessByEntityID(ctx context.Context, in *GetBusinessByEntityIDRequest, opts ...grpc.CallOption) (*GetBusinessByEntityIDResponse, error)
	GetBusinessEntityByTag(ctx context.Context, in *GetBusinessEntityByTagRequest, opts ...grpc.CallOption) (*GetBusinessEntityByTagResponse, error)
	GetBusinessEntityByNameAndDomicile(ctx context.Context, in *GetBusinessEntityByNameAndDomicileRequest, opts ...grpc.CallOption) (*GetBusinessEntityByNameAndDomicileResponse, error)
	GetEntityByID(ctx context.Context, in *GetEntityByIDRequest, opts ...grpc.CallOption) (*GetEntityByIDResponse, error)
	DeleteEntityByID(ctx context.Context, in *DeleteEntityByIDRequest, opts ...grpc.CallOption) (*DeleteEntityByIDResponse, error)
	UpdateBusinessEntity(ctx context.Context, in *UpdateBusinessEntityRequest, opts ...grpc.CallOption) (*UpdateBusinessEntityResponse, error)
	CheckTag(ctx context.Context, in *CheckTagRequest, opts ...grpc.CallOption) (*CheckTagResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	SuggestTags(ctx context.Context, in *SuggestTagsRequest, opts ...grpc.CallOption) (*SuggestTagsResponse, error)
	// Business Members
	AddBusinessMember(ctx context.Context, in *AddBusinessMemberRequest, opts ...grpc.CallOption) (*AddBusinessMemberResponse, error)
	GetBusinessMemberByID(ctx context.Context, in *GetBusinessMemberByIDRequest, opts ...grpc.CallOption) (*GetBusinessMemberByIDResponse, error)
	GetBusinessMembersByIndividualEntityID(ctx context.Context, in *GetBusinessMembersByIndividualEntityIDRequest, opts ...grpc.CallOption) (*GetBusinessMembersByIndividualEntityIDResponse, error)
	UpdateBusinessMember(ctx context.Context, in *UpdateBusinessMemberRequest, opts ...grpc.CallOption) (*UpdateBusinessMemberResponse, error)
	CertifyBusinessMember(ctx context.Context, in *CertifyBusinessMemberRequest, opts ...grpc.CallOption) (*CertifyBusinessMemberResponse, error)
	AddBusinessMembers(ctx context.Context, in *AddBusinessMembersRequest, opts ...grpc.CallOption) (*AddBusinessMembersResponse, error)
	GetBusinessMembers(ctx context.Context, in *GetBusinessMembersRequest, opts ...grpc.CallOption) (*GetBusinessMembersResponse, error)
	RequestBusinessMemberKYC(ctx context.Context, in *RequestBusinessMemberKYCRequest, opts ...grpc.CallOption) (*RequestBusinessMemberKYCResponse, error)
	RemoveBusinessMember(ctx context.Context, in *RemoveBusinessMemberRequest, opts ...grpc.CallOption) (*RemoveBusinessMemberResponse, error)
	RemoveBusinessMembers(ctx context.Context, in *RemoveBusinessMembersRequest, opts ...grpc.CallOption) (*RemoveBusinessMembersResponse, error)
	CreateIdentity(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*CreateIdentityResponse, error)
	SetIdentityVerified(ctx context.Context, in *SetIdentityVerifiedRequest, opts ...grpc.CallOption) (*SetIdentityVerifiedResponse, error)
	UploadIdentityDocuments(ctx context.Context, in *UploadIdentityDocumentsRequest, opts ...grpc.CallOption) (*UploadIdentityDocumentsResponse, error)
	GetEntitiesByUserID(ctx context.Context, in *GetEntitiesByUserIDRequest, opts ...grpc.CallOption) (*GetEntitiesByUserIDResponse, error)
	UpdateIdentity(ctx context.Context, in *UpdateIdentityRequest, opts ...grpc.CallOption) (*UpdateIdentityResponse, error)
	SearchEntityByTag(ctx context.Context, in *SearchEntityByTagRequest, opts ...grpc.CallOption) (*SearchEntityByTagResponse, error)
	CreateEntityAccountAgreement(ctx context.Context, in *CreateEntityAccountAgreementRequest, opts ...grpc.CallOption) (*CreateEntityAccountAgreementResponse, error)
	GetEntityAccountAgreementByID(ctx context.Context, in *GetEntityAccountAgreementByIDRequest, opts ...grpc.CallOption) (*GetEntityAccountAgreementByIDResponse, error)
	GetEntityAccountAgreementsByUserID(ctx context.Context, in *GetEntityAccountAgreementsByUserIDRequest, opts ...grpc.CallOption) (*GetEntityAccountAgreementsByUserIDResponse, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) CreateIndividualEntity(ctx context.Context, in *CreateIndividualEntityRequest, opts ...grpc.CallOption) (*CreateIndividualEntityResponse, error) {
	out := new(CreateIndividualEntityResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/CreateIndividualEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetIndividualByEntityID(ctx context.Context, in *GetIndividualByEntityIDRequest, opts ...grpc.CallOption) (*GetIndividualByEntityIDResponse, error) {
	out := new(GetIndividualByEntityIDResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetIndividualByEntityID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetIndividualEntityByTag(ctx context.Context, in *GetIndividualEntityByTagRequest, opts ...grpc.CallOption) (*GetIndividualEntityByTagResponse, error) {
	out := new(GetIndividualEntityByTagResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetIndividualEntityByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateIndividualEntity(ctx context.Context, in *UpdateIndividualEntityRequest, opts ...grpc.CallOption) (*UpdateIndividualEntityResponse, error) {
	out := new(UpdateIndividualEntityResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/UpdateIndividualEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CreateBusinessEntity(ctx context.Context, in *CreateBusinessEntityRequest, opts ...grpc.CallOption) (*CreateBusinessEntityResponse, error) {
	out := new(CreateBusinessEntityResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/CreateBusinessEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetBusinessByEntityID(ctx context.Context, in *GetBusinessByEntityIDRequest, opts ...grpc.CallOption) (*GetBusinessByEntityIDResponse, error) {
	out := new(GetBusinessByEntityIDResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetBusinessByEntityID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetBusinessEntityByTag(ctx context.Context, in *GetBusinessEntityByTagRequest, opts ...grpc.CallOption) (*GetBusinessEntityByTagResponse, error) {
	out := new(GetBusinessEntityByTagResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetBusinessEntityByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetBusinessEntityByNameAndDomicile(ctx context.Context, in *GetBusinessEntityByNameAndDomicileRequest, opts ...grpc.CallOption) (*GetBusinessEntityByNameAndDomicileResponse, error) {
	out := new(GetBusinessEntityByNameAndDomicileResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetBusinessEntityByNameAndDomicile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetEntityByID(ctx context.Context, in *GetEntityByIDRequest, opts ...grpc.CallOption) (*GetEntityByIDResponse, error) {
	out := new(GetEntityByIDResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetEntityByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) DeleteEntityByID(ctx context.Context, in *DeleteEntityByIDRequest, opts ...grpc.CallOption) (*DeleteEntityByIDResponse, error) {
	out := new(DeleteEntityByIDResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/DeleteEntityByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateBusinessEntity(ctx context.Context, in *UpdateBusinessEntityRequest, opts ...grpc.CallOption) (*UpdateBusinessEntityResponse, error) {
	out := new(UpdateBusinessEntityResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/UpdateBusinessEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CheckTag(ctx context.Context, in *CheckTagRequest, opts ...grpc.CallOption) (*CheckTagResponse, error) {
	out := new(CheckTagResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/CheckTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	out := new(UpdateTagResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) SuggestTags(ctx context.Context, in *SuggestTagsRequest, opts ...grpc.CallOption) (*SuggestTagsResponse, error) {
	out := new(SuggestTagsResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/SuggestTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) AddBusinessMember(ctx context.Context, in *AddBusinessMemberRequest, opts ...grpc.CallOption) (*AddBusinessMemberResponse, error) {
	out := new(AddBusinessMemberResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/AddBusinessMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetBusinessMemberByID(ctx context.Context, in *GetBusinessMemberByIDRequest, opts ...grpc.CallOption) (*GetBusinessMemberByIDResponse, error) {
	out := new(GetBusinessMemberByIDResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetBusinessMemberByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetBusinessMembersByIndividualEntityID(ctx context.Context, in *GetBusinessMembersByIndividualEntityIDRequest, opts ...grpc.CallOption) (*GetBusinessMembersByIndividualEntityIDResponse, error) {
	out := new(GetBusinessMembersByIndividualEntityIDResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetBusinessMembersByIndividualEntityID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateBusinessMember(ctx context.Context, in *UpdateBusinessMemberRequest, opts ...grpc.CallOption) (*UpdateBusinessMemberResponse, error) {
	out := new(UpdateBusinessMemberResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/UpdateBusinessMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CertifyBusinessMember(ctx context.Context, in *CertifyBusinessMemberRequest, opts ...grpc.CallOption) (*CertifyBusinessMemberResponse, error) {
	out := new(CertifyBusinessMemberResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/CertifyBusinessMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) AddBusinessMembers(ctx context.Context, in *AddBusinessMembersRequest, opts ...grpc.CallOption) (*AddBusinessMembersResponse, error) {
	out := new(AddBusinessMembersResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/AddBusinessMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetBusinessMembers(ctx context.Context, in *GetBusinessMembersRequest, opts ...grpc.CallOption) (*GetBusinessMembersResponse, error) {
	out := new(GetBusinessMembersResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetBusinessMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) RequestBusinessMemberKYC(ctx context.Context, in *RequestBusinessMemberKYCRequest, opts ...grpc.CallOption) (*RequestBusinessMemberKYCResponse, error) {
	out := new(RequestBusinessMemberKYCResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/RequestBusinessMemberKYC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) RemoveBusinessMember(ctx context.Context, in *RemoveBusinessMemberRequest, opts ...grpc.CallOption) (*RemoveBusinessMemberResponse, error) {
	out := new(RemoveBusinessMemberResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/RemoveBusinessMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) RemoveBusinessMembers(ctx context.Context, in *RemoveBusinessMembersRequest, opts ...grpc.CallOption) (*RemoveBusinessMembersResponse, error) {
	out := new(RemoveBusinessMembersResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/RemoveBusinessMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CreateIdentity(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*CreateIdentityResponse, error) {
	out := new(CreateIdentityResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/CreateIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) SetIdentityVerified(ctx context.Context, in *SetIdentityVerifiedRequest, opts ...grpc.CallOption) (*SetIdentityVerifiedResponse, error) {
	out := new(SetIdentityVerifiedResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/SetIdentityVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UploadIdentityDocuments(ctx context.Context, in *UploadIdentityDocumentsRequest, opts ...grpc.CallOption) (*UploadIdentityDocumentsResponse, error) {
	out := new(UploadIdentityDocumentsResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/UploadIdentityDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetEntitiesByUserID(ctx context.Context, in *GetEntitiesByUserIDRequest, opts ...grpc.CallOption) (*GetEntitiesByUserIDResponse, error) {
	out := new(GetEntitiesByUserIDResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetEntitiesByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateIdentity(ctx context.Context, in *UpdateIdentityRequest, opts ...grpc.CallOption) (*UpdateIdentityResponse, error) {
	out := new(UpdateIdentityResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/UpdateIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) SearchEntityByTag(ctx context.Context, in *SearchEntityByTagRequest, opts ...grpc.CallOption) (*SearchEntityByTagResponse, error) {
	out := new(SearchEntityByTagResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/SearchEntityByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CreateEntityAccountAgreement(ctx context.Context, in *CreateEntityAccountAgreementRequest, opts ...grpc.CallOption) (*CreateEntityAccountAgreementResponse, error) {
	out := new(CreateEntityAccountAgreementResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/CreateEntityAccountAgreement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetEntityAccountAgreementByID(ctx context.Context, in *GetEntityAccountAgreementByIDRequest, opts ...grpc.CallOption) (*GetEntityAccountAgreementByIDResponse, error) {
	out := new(GetEntityAccountAgreementByIDResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetEntityAccountAgreementByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetEntityAccountAgreementsByUserID(ctx context.Context, in *GetEntityAccountAgreementsByUserIDRequest, opts ...grpc.CallOption) (*GetEntityAccountAgreementsByUserIDResponse, error) {
	out := new(GetEntityAccountAgreementsByUserIDResponse)
	err := c.cc.Invoke(ctx, "/entities.EntityService/GetEntityAccountAgreementsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
// All implementations must embed UnimplementedEntityServiceServer
// for forward compatibility
type EntityServiceServer interface {
	// Creates a new individual entity
	CreateIndividualEntity(context.Context, *CreateIndividualEntityRequest) (*CreateIndividualEntityResponse, error)
	GetIndividualByEntityID(context.Context, *GetIndividualByEntityIDRequest) (*GetIndividualByEntityIDResponse, error)
	GetIndividualEntityByTag(context.Context, *GetIndividualEntityByTagRequest) (*GetIndividualEntityByTagResponse, error)
	UpdateIndividualEntity(context.Context, *UpdateIndividualEntityRequest) (*UpdateIndividualEntityResponse, error)
	CreateBusinessEntity(context.Context, *CreateBusinessEntityRequest) (*CreateBusinessEntityResponse, error)
	GetBusinessByEntityID(context.Context, *GetBusinessByEntityIDRequest) (*GetBusinessByEntityIDResponse, error)
	GetBusinessEntityByTag(context.Context, *GetBusinessEntityByTagRequest) (*GetBusinessEntityByTagResponse, error)
	GetBusinessEntityByNameAndDomicile(context.Context, *GetBusinessEntityByNameAndDomicileRequest) (*GetBusinessEntityByNameAndDomicileResponse, error)
	GetEntityByID(context.Context, *GetEntityByIDRequest) (*GetEntityByIDResponse, error)
	DeleteEntityByID(context.Context, *DeleteEntityByIDRequest) (*DeleteEntityByIDResponse, error)
	UpdateBusinessEntity(context.Context, *UpdateBusinessEntityRequest) (*UpdateBusinessEntityResponse, error)
	CheckTag(context.Context, *CheckTagRequest) (*CheckTagResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	SuggestTags(context.Context, *SuggestTagsRequest) (*SuggestTagsResponse, error)
	// Business Members
	AddBusinessMember(context.Context, *AddBusinessMemberRequest) (*AddBusinessMemberResponse, error)
	GetBusinessMemberByID(context.Context, *GetBusinessMemberByIDRequest) (*GetBusinessMemberByIDResponse, error)
	GetBusinessMembersByIndividualEntityID(context.Context, *GetBusinessMembersByIndividualEntityIDRequest) (*GetBusinessMembersByIndividualEntityIDResponse, error)
	UpdateBusinessMember(context.Context, *UpdateBusinessMemberRequest) (*UpdateBusinessMemberResponse, error)
	CertifyBusinessMember(context.Context, *CertifyBusinessMemberRequest) (*CertifyBusinessMemberResponse, error)
	AddBusinessMembers(context.Context, *AddBusinessMembersRequest) (*AddBusinessMembersResponse, error)
	GetBusinessMembers(context.Context, *GetBusinessMembersRequest) (*GetBusinessMembersResponse, error)
	RequestBusinessMemberKYC(context.Context, *RequestBusinessMemberKYCRequest) (*RequestBusinessMemberKYCResponse, error)
	RemoveBusinessMember(context.Context, *RemoveBusinessMemberRequest) (*RemoveBusinessMemberResponse, error)
	RemoveBusinessMembers(context.Context, *RemoveBusinessMembersRequest) (*RemoveBusinessMembersResponse, error)
	CreateIdentity(context.Context, *CreateIdentityRequest) (*CreateIdentityResponse, error)
	SetIdentityVerified(context.Context, *SetIdentityVerifiedRequest) (*SetIdentityVerifiedResponse, error)
	UploadIdentityDocuments(context.Context, *UploadIdentityDocumentsRequest) (*UploadIdentityDocumentsResponse, error)
	GetEntitiesByUserID(context.Context, *GetEntitiesByUserIDRequest) (*GetEntitiesByUserIDResponse, error)
	UpdateIdentity(context.Context, *UpdateIdentityRequest) (*UpdateIdentityResponse, error)
	SearchEntityByTag(context.Context, *SearchEntityByTagRequest) (*SearchEntityByTagResponse, error)
	CreateEntityAccountAgreement(context.Context, *CreateEntityAccountAgreementRequest) (*CreateEntityAccountAgreementResponse, error)
	GetEntityAccountAgreementByID(context.Context, *GetEntityAccountAgreementByIDRequest) (*GetEntityAccountAgreementByIDResponse, error)
	GetEntityAccountAgreementsByUserID(context.Context, *GetEntityAccountAgreementsByUserIDRequest) (*GetEntityAccountAgreementsByUserIDResponse, error)
	mustEmbedUnimplementedEntityServiceServer()
}

// UnimplementedEntityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEntityServiceServer struct {
}

func (UnimplementedEntityServiceServer) CreateIndividualEntity(context.Context, *CreateIndividualEntityRequest) (*CreateIndividualEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndividualEntity not implemented")
}
func (UnimplementedEntityServiceServer) GetIndividualByEntityID(context.Context, *GetIndividualByEntityIDRequest) (*GetIndividualByEntityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndividualByEntityID not implemented")
}
func (UnimplementedEntityServiceServer) GetIndividualEntityByTag(context.Context, *GetIndividualEntityByTagRequest) (*GetIndividualEntityByTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndividualEntityByTag not implemented")
}
func (UnimplementedEntityServiceServer) UpdateIndividualEntity(context.Context, *UpdateIndividualEntityRequest) (*UpdateIndividualEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndividualEntity not implemented")
}
func (UnimplementedEntityServiceServer) CreateBusinessEntity(context.Context, *CreateBusinessEntityRequest) (*CreateBusinessEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessEntity not implemented")
}
func (UnimplementedEntityServiceServer) GetBusinessByEntityID(context.Context, *GetBusinessByEntityIDRequest) (*GetBusinessByEntityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessByEntityID not implemented")
}
func (UnimplementedEntityServiceServer) GetBusinessEntityByTag(context.Context, *GetBusinessEntityByTagRequest) (*GetBusinessEntityByTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessEntityByTag not implemented")
}
func (UnimplementedEntityServiceServer) GetBusinessEntityByNameAndDomicile(context.Context, *GetBusinessEntityByNameAndDomicileRequest) (*GetBusinessEntityByNameAndDomicileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessEntityByNameAndDomicile not implemented")
}
func (UnimplementedEntityServiceServer) GetEntityByID(context.Context, *GetEntityByIDRequest) (*GetEntityByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityByID not implemented")
}
func (UnimplementedEntityServiceServer) DeleteEntityByID(context.Context, *DeleteEntityByIDRequest) (*DeleteEntityByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntityByID not implemented")
}
func (UnimplementedEntityServiceServer) UpdateBusinessEntity(context.Context, *UpdateBusinessEntityRequest) (*UpdateBusinessEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessEntity not implemented")
}
func (UnimplementedEntityServiceServer) CheckTag(context.Context, *CheckTagRequest) (*CheckTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTag not implemented")
}
func (UnimplementedEntityServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedEntityServiceServer) SuggestTags(context.Context, *SuggestTagsRequest) (*SuggestTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestTags not implemented")
}
func (UnimplementedEntityServiceServer) AddBusinessMember(context.Context, *AddBusinessMemberRequest) (*AddBusinessMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessMember not implemented")
}
func (UnimplementedEntityServiceServer) GetBusinessMemberByID(context.Context, *GetBusinessMemberByIDRequest) (*GetBusinessMemberByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessMemberByID not implemented")
}
func (UnimplementedEntityServiceServer) GetBusinessMembersByIndividualEntityID(context.Context, *GetBusinessMembersByIndividualEntityIDRequest) (*GetBusinessMembersByIndividualEntityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessMembersByIndividualEntityID not implemented")
}
func (UnimplementedEntityServiceServer) UpdateBusinessMember(context.Context, *UpdateBusinessMemberRequest) (*UpdateBusinessMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessMember not implemented")
}
func (UnimplementedEntityServiceServer) CertifyBusinessMember(context.Context, *CertifyBusinessMemberRequest) (*CertifyBusinessMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertifyBusinessMember not implemented")
}
func (UnimplementedEntityServiceServer) AddBusinessMembers(context.Context, *AddBusinessMembersRequest) (*AddBusinessMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessMembers not implemented")
}
func (UnimplementedEntityServiceServer) GetBusinessMembers(context.Context, *GetBusinessMembersRequest) (*GetBusinessMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessMembers not implemented")
}
func (UnimplementedEntityServiceServer) RequestBusinessMemberKYC(context.Context, *RequestBusinessMemberKYCRequest) (*RequestBusinessMemberKYCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBusinessMemberKYC not implemented")
}
func (UnimplementedEntityServiceServer) RemoveBusinessMember(context.Context, *RemoveBusinessMemberRequest) (*RemoveBusinessMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBusinessMember not implemented")
}
func (UnimplementedEntityServiceServer) RemoveBusinessMembers(context.Context, *RemoveBusinessMembersRequest) (*RemoveBusinessMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBusinessMembers not implemented")
}
func (UnimplementedEntityServiceServer) CreateIdentity(context.Context, *CreateIdentityRequest) (*CreateIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentity not implemented")
}
func (UnimplementedEntityServiceServer) SetIdentityVerified(context.Context, *SetIdentityVerifiedRequest) (*SetIdentityVerifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIdentityVerified not implemented")
}
func (UnimplementedEntityServiceServer) UploadIdentityDocuments(context.Context, *UploadIdentityDocumentsRequest) (*UploadIdentityDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadIdentityDocuments not implemented")
}
func (UnimplementedEntityServiceServer) GetEntitiesByUserID(context.Context, *GetEntitiesByUserIDRequest) (*GetEntitiesByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitiesByUserID not implemented")
}
func (UnimplementedEntityServiceServer) UpdateIdentity(context.Context, *UpdateIdentityRequest) (*UpdateIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentity not implemented")
}
func (UnimplementedEntityServiceServer) SearchEntityByTag(context.Context, *SearchEntityByTagRequest) (*SearchEntityByTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEntityByTag not implemented")
}
func (UnimplementedEntityServiceServer) CreateEntityAccountAgreement(context.Context, *CreateEntityAccountAgreementRequest) (*CreateEntityAccountAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntityAccountAgreement not implemented")
}
func (UnimplementedEntityServiceServer) GetEntityAccountAgreementByID(context.Context, *GetEntityAccountAgreementByIDRequest) (*GetEntityAccountAgreementByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityAccountAgreementByID not implemented")
}
func (UnimplementedEntityServiceServer) GetEntityAccountAgreementsByUserID(context.Context, *GetEntityAccountAgreementsByUserIDRequest) (*GetEntityAccountAgreementsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityAccountAgreementsByUserID not implemented")
}
func (UnimplementedEntityServiceServer) mustEmbedUnimplementedEntityServiceServer() {}

// UnsafeEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServiceServer will
// result in compilation errors.
type UnsafeEntityServiceServer interface {
	mustEmbedUnimplementedEntityServiceServer()
}

func RegisterEntityServiceServer(s grpc.ServiceRegistrar, srv EntityServiceServer) {
	s.RegisterService(&EntityService_ServiceDesc, srv)
}

func _EntityService_CreateIndividualEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndividualEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateIndividualEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/CreateIndividualEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateIndividualEntity(ctx, req.(*CreateIndividualEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetIndividualByEntityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndividualByEntityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetIndividualByEntityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetIndividualByEntityID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetIndividualByEntityID(ctx, req.(*GetIndividualByEntityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetIndividualEntityByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndividualEntityByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetIndividualEntityByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetIndividualEntityByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetIndividualEntityByTag(ctx, req.(*GetIndividualEntityByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateIndividualEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIndividualEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateIndividualEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/UpdateIndividualEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateIndividualEntity(ctx, req.(*UpdateIndividualEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CreateBusinessEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateBusinessEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/CreateBusinessEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateBusinessEntity(ctx, req.(*CreateBusinessEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetBusinessByEntityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessByEntityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetBusinessByEntityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetBusinessByEntityID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetBusinessByEntityID(ctx, req.(*GetBusinessByEntityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetBusinessEntityByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessEntityByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetBusinessEntityByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetBusinessEntityByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetBusinessEntityByTag(ctx, req.(*GetBusinessEntityByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetBusinessEntityByNameAndDomicile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessEntityByNameAndDomicileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetBusinessEntityByNameAndDomicile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetBusinessEntityByNameAndDomicile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetBusinessEntityByNameAndDomicile(ctx, req.(*GetBusinessEntityByNameAndDomicileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetEntityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetEntityByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntityByID(ctx, req.(*GetEntityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_DeleteEntityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).DeleteEntityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/DeleteEntityByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).DeleteEntityByID(ctx, req.(*DeleteEntityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateBusinessEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateBusinessEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/UpdateBusinessEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateBusinessEntity(ctx, req.(*UpdateBusinessEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CheckTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CheckTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/CheckTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CheckTag(ctx, req.(*CheckTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_SuggestTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).SuggestTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/SuggestTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).SuggestTags(ctx, req.(*SuggestTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_AddBusinessMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).AddBusinessMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/AddBusinessMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).AddBusinessMember(ctx, req.(*AddBusinessMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetBusinessMemberByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessMemberByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetBusinessMemberByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetBusinessMemberByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetBusinessMemberByID(ctx, req.(*GetBusinessMemberByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetBusinessMembersByIndividualEntityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessMembersByIndividualEntityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetBusinessMembersByIndividualEntityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetBusinessMembersByIndividualEntityID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetBusinessMembersByIndividualEntityID(ctx, req.(*GetBusinessMembersByIndividualEntityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateBusinessMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateBusinessMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/UpdateBusinessMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateBusinessMember(ctx, req.(*UpdateBusinessMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CertifyBusinessMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertifyBusinessMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CertifyBusinessMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/CertifyBusinessMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CertifyBusinessMember(ctx, req.(*CertifyBusinessMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_AddBusinessMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).AddBusinessMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/AddBusinessMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).AddBusinessMembers(ctx, req.(*AddBusinessMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetBusinessMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetBusinessMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetBusinessMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetBusinessMembers(ctx, req.(*GetBusinessMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_RequestBusinessMemberKYC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBusinessMemberKYCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).RequestBusinessMemberKYC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/RequestBusinessMemberKYC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).RequestBusinessMemberKYC(ctx, req.(*RequestBusinessMemberKYCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_RemoveBusinessMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBusinessMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).RemoveBusinessMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/RemoveBusinessMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).RemoveBusinessMember(ctx, req.(*RemoveBusinessMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_RemoveBusinessMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBusinessMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).RemoveBusinessMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/RemoveBusinessMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).RemoveBusinessMembers(ctx, req.(*RemoveBusinessMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CreateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/CreateIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateIdentity(ctx, req.(*CreateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_SetIdentityVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIdentityVerifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).SetIdentityVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/SetIdentityVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).SetIdentityVerified(ctx, req.(*SetIdentityVerifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UploadIdentityDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadIdentityDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UploadIdentityDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/UploadIdentityDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UploadIdentityDocuments(ctx, req.(*UploadIdentityDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetEntitiesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntitiesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetEntitiesByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntitiesByUserID(ctx, req.(*GetEntitiesByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/UpdateIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateIdentity(ctx, req.(*UpdateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_SearchEntityByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEntityByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).SearchEntityByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/SearchEntityByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).SearchEntityByTag(ctx, req.(*SearchEntityByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CreateEntityAccountAgreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityAccountAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateEntityAccountAgreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/CreateEntityAccountAgreement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateEntityAccountAgreement(ctx, req.(*CreateEntityAccountAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetEntityAccountAgreementByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityAccountAgreementByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntityAccountAgreementByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetEntityAccountAgreementByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntityAccountAgreementByID(ctx, req.(*GetEntityAccountAgreementByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetEntityAccountAgreementsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityAccountAgreementsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntityAccountAgreementsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.EntityService/GetEntityAccountAgreementsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntityAccountAgreementsByUserID(ctx, req.(*GetEntityAccountAgreementsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityService_ServiceDesc is the grpc.ServiceDesc for EntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entities.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIndividualEntity",
			Handler:    _EntityService_CreateIndividualEntity_Handler,
		},
		{
			MethodName: "GetIndividualByEntityID",
			Handler:    _EntityService_GetIndividualByEntityID_Handler,
		},
		{
			MethodName: "GetIndividualEntityByTag",
			Handler:    _EntityService_GetIndividualEntityByTag_Handler,
		},
		{
			MethodName: "UpdateIndividualEntity",
			Handler:    _EntityService_UpdateIndividualEntity_Handler,
		},
		{
			MethodName: "CreateBusinessEntity",
			Handler:    _EntityService_CreateBusinessEntity_Handler,
		},
		{
			MethodName: "GetBusinessByEntityID",
			Handler:    _EntityService_GetBusinessByEntityID_Handler,
		},
		{
			MethodName: "GetBusinessEntityByTag",
			Handler:    _EntityService_GetBusinessEntityByTag_Handler,
		},
		{
			MethodName: "GetBusinessEntityByNameAndDomicile",
			Handler:    _EntityService_GetBusinessEntityByNameAndDomicile_Handler,
		},
		{
			MethodName: "GetEntityByID",
			Handler:    _EntityService_GetEntityByID_Handler,
		},
		{
			MethodName: "DeleteEntityByID",
			Handler:    _EntityService_DeleteEntityByID_Handler,
		},
		{
			MethodName: "UpdateBusinessEntity",
			Handler:    _EntityService_UpdateBusinessEntity_Handler,
		},
		{
			MethodName: "CheckTag",
			Handler:    _EntityService_CheckTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _EntityService_UpdateTag_Handler,
		},
		{
			MethodName: "SuggestTags",
			Handler:    _EntityService_SuggestTags_Handler,
		},
		{
			MethodName: "AddBusinessMember",
			Handler:    _EntityService_AddBusinessMember_Handler,
		},
		{
			MethodName: "GetBusinessMemberByID",
			Handler:    _EntityService_GetBusinessMemberByID_Handler,
		},
		{
			MethodName: "GetBusinessMembersByIndividualEntityID",
			Handler:    _EntityService_GetBusinessMembersByIndividualEntityID_Handler,
		},
		{
			MethodName: "UpdateBusinessMember",
			Handler:    _EntityService_UpdateBusinessMember_Handler,
		},
		{
			MethodName: "CertifyBusinessMember",
			Handler:    _EntityService_CertifyBusinessMember_Handler,
		},
		{
			MethodName: "AddBusinessMembers",
			Handler:    _EntityService_AddBusinessMembers_Handler,
		},
		{
			MethodName: "GetBusinessMembers",
			Handler:    _EntityService_GetBusinessMembers_Handler,
		},
		{
			MethodName: "RequestBusinessMemberKYC",
			Handler:    _EntityService_RequestBusinessMemberKYC_Handler,
		},
		{
			MethodName: "RemoveBusinessMember",
			Handler:    _EntityService_RemoveBusinessMember_Handler,
		},
		{
			MethodName: "RemoveBusinessMembers",
			Handler:    _EntityService_RemoveBusinessMembers_Handler,
		},
		{
			MethodName: "CreateIdentity",
			Handler:    _EntityService_CreateIdentity_Handler,
		},
		{
			MethodName: "SetIdentityVerified",
			Handler:    _EntityService_SetIdentityVerified_Handler,
		},
		{
			MethodName: "UploadIdentityDocuments",
			Handler:    _EntityService_UploadIdentityDocuments_Handler,
		},
		{
			MethodName: "GetEntitiesByUserID",
			Handler:    _EntityService_GetEntitiesByUserID_Handler,
		},
		{
			MethodName: "UpdateIdentity",
			Handler:    _EntityService_UpdateIdentity_Handler,
		},
		{
			MethodName: "SearchEntityByTag",
			Handler:    _EntityService_SearchEntityByTag_Handler,
		},
		{
			MethodName: "CreateEntityAccountAgreement",
			Handler:    _EntityService_CreateEntityAccountAgreement_Handler,
		},
		{
			MethodName: "GetEntityAccountAgreementByID",
			Handler:    _EntityService_GetEntityAccountAgreementByID_Handler,
		},
		{
			MethodName: "GetEntityAccountAgreementsByUserID",
			Handler:    _EntityService_GetEntityAccountAgreementsByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/entities/entities.proto",
}
