// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/ecobank/ecobank.proto

package ecobank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EcobankServiceClient is the client API for EcobankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EcobankServiceClient interface {
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error)
	GetGeneralFBOAccountBalance(ctx context.Context, in *GetGeneralFBOAccountBalanceRequest, opts ...grpc.CallOption) (*GetGeneralFBOAccountBalanceResponse, error)
	GetOperatingAccountBalance(ctx context.Context, in *GetOperatingAccountBalanceRequest, opts ...grpc.CallOption) (*GetOperatingAccountBalanceResponse, error)
	GetOperatingWalletBalance(ctx context.Context, in *GetOperatingWalletBalanceRequest, opts ...grpc.CallOption) (*GetOperatingWalletBalanceResponse, error)
	GetVUBalances(ctx context.Context, in *GetVUBalancesRequest, opts ...grpc.CallOption) (*GetVUBalancesResponse, error)
	CreateVUDeposit(ctx context.Context, in *CreateVUDepositRequest, opts ...grpc.CallOption) (*CreateVUDepositResponse, error)
	UpdateVUDepositStatus(ctx context.Context, in *UpdateVUDepositStatusRequest, opts ...grpc.CallOption) (*UpdateVUDepositStatusResponse, error)
	FundVUDeposit(ctx context.Context, in *FundVUDepositRequest, opts ...grpc.CallOption) (*FundVUDepositResponse, error)
	MakeVUDeposit(ctx context.Context, in *MakeVUDepositRequest, opts ...grpc.CallOption) (*MakeVUDepositResponse, error)
	CheckVUDeposit(ctx context.Context, in *CheckVUDepositRequest, opts ...grpc.CallOption) (*CheckVUDepositResponse, error)
	CompleteVUDeposit(ctx context.Context, in *CompleteVUDepositRequest, opts ...grpc.CallOption) (*CompleteVUDepositResponse, error)
	CreateVUWithdrawal(ctx context.Context, in *CreateVUWithdrawalRequest, opts ...grpc.CallOption) (*CreateVUWithdrawalResponse, error)
	UpdateVUWithdrawalStatus(ctx context.Context, in *UpdateVUWithdrawalStatusRequest, opts ...grpc.CallOption) (*UpdateVUWithdrawalStatusResponse, error)
	MakeVUWithdrawal(ctx context.Context, in *MakeVUWithdrawalRequest, opts ...grpc.CallOption) (*MakeVUWithdrawalResponse, error)
	CheckVUWithdrawal(ctx context.Context, in *CheckVUWithdrawalRequest, opts ...grpc.CallOption) (*CheckVUWithdrawalResponse, error)
	FundVUWithdrawal(ctx context.Context, in *FundVUWithdrawalRequest, opts ...grpc.CallOption) (*FundVUWithdrawalResponse, error)
	CompleteVUWithdrawal(ctx context.Context, in *CompleteVUWithdrawalRequest, opts ...grpc.CallOption) (*CompleteVUWithdrawalResponse, error)
	InitiatePayment(ctx context.Context, in *InitiatePaymentRequest, opts ...grpc.CallOption) (*InitiatePaymentResponse, error)
	GetVUDepositsByStatus(ctx context.Context, in *GetVUDepositsByStatusRequest, opts ...grpc.CallOption) (*GetVUDepositsByStatusResponse, error)
	GetVUDepositById(ctx context.Context, in *GetVUDepositByIdRequest, opts ...grpc.CallOption) (*GetVUDepositByIdResponse, error)
	GetVUWithdrawalsByStatus(ctx context.Context, in *GetVUWithdrawalsByStatusRequest, opts ...grpc.CallOption) (*GetVUWithdrawalsByStatusResponse, error)
	GetVUWithdrawalById(ctx context.Context, in *GetVUWithdrawalByIdRequest, opts ...grpc.CallOption) (*GetVUWithdrawalByIdResponse, error)
	GetFBOAccountAvailableBalance(ctx context.Context, in *GetFBOAccountAvailableBalanceRequest, opts ...grpc.CallOption) (*GetFBOAccountAvailableBalanceResponse, error)
	GetVUTransactionByReference(ctx context.Context, in *GetVUTransactionByReferenceRequest, opts ...grpc.CallOption) (*GetVUTransactionByReferenceResponse, error)
	HandleEcobankWebhookEvent(ctx context.Context, in *HandleEcobankWebhookEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ecobankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEcobankServiceClient(cc grpc.ClientConnInterface) EcobankServiceClient {
	return &ecobankServiceClient{cc}
}

func (c *ecobankServiceClient) GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error) {
	out := new(GetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetGeneralFBOAccountBalance(ctx context.Context, in *GetGeneralFBOAccountBalanceRequest, opts ...grpc.CallOption) (*GetGeneralFBOAccountBalanceResponse, error) {
	out := new(GetGeneralFBOAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetGeneralFBOAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetOperatingAccountBalance(ctx context.Context, in *GetOperatingAccountBalanceRequest, opts ...grpc.CallOption) (*GetOperatingAccountBalanceResponse, error) {
	out := new(GetOperatingAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetOperatingAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetOperatingWalletBalance(ctx context.Context, in *GetOperatingWalletBalanceRequest, opts ...grpc.CallOption) (*GetOperatingWalletBalanceResponse, error) {
	out := new(GetOperatingWalletBalanceResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetOperatingWalletBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetVUBalances(ctx context.Context, in *GetVUBalancesRequest, opts ...grpc.CallOption) (*GetVUBalancesResponse, error) {
	out := new(GetVUBalancesResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetVUBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) CreateVUDeposit(ctx context.Context, in *CreateVUDepositRequest, opts ...grpc.CallOption) (*CreateVUDepositResponse, error) {
	out := new(CreateVUDepositResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/CreateVUDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) UpdateVUDepositStatus(ctx context.Context, in *UpdateVUDepositStatusRequest, opts ...grpc.CallOption) (*UpdateVUDepositStatusResponse, error) {
	out := new(UpdateVUDepositStatusResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/UpdateVUDepositStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) FundVUDeposit(ctx context.Context, in *FundVUDepositRequest, opts ...grpc.CallOption) (*FundVUDepositResponse, error) {
	out := new(FundVUDepositResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/FundVUDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) MakeVUDeposit(ctx context.Context, in *MakeVUDepositRequest, opts ...grpc.CallOption) (*MakeVUDepositResponse, error) {
	out := new(MakeVUDepositResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/MakeVUDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) CheckVUDeposit(ctx context.Context, in *CheckVUDepositRequest, opts ...grpc.CallOption) (*CheckVUDepositResponse, error) {
	out := new(CheckVUDepositResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/CheckVUDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) CompleteVUDeposit(ctx context.Context, in *CompleteVUDepositRequest, opts ...grpc.CallOption) (*CompleteVUDepositResponse, error) {
	out := new(CompleteVUDepositResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/CompleteVUDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) CreateVUWithdrawal(ctx context.Context, in *CreateVUWithdrawalRequest, opts ...grpc.CallOption) (*CreateVUWithdrawalResponse, error) {
	out := new(CreateVUWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/CreateVUWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) UpdateVUWithdrawalStatus(ctx context.Context, in *UpdateVUWithdrawalStatusRequest, opts ...grpc.CallOption) (*UpdateVUWithdrawalStatusResponse, error) {
	out := new(UpdateVUWithdrawalStatusResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/UpdateVUWithdrawalStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) MakeVUWithdrawal(ctx context.Context, in *MakeVUWithdrawalRequest, opts ...grpc.CallOption) (*MakeVUWithdrawalResponse, error) {
	out := new(MakeVUWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/MakeVUWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) CheckVUWithdrawal(ctx context.Context, in *CheckVUWithdrawalRequest, opts ...grpc.CallOption) (*CheckVUWithdrawalResponse, error) {
	out := new(CheckVUWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/CheckVUWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) FundVUWithdrawal(ctx context.Context, in *FundVUWithdrawalRequest, opts ...grpc.CallOption) (*FundVUWithdrawalResponse, error) {
	out := new(FundVUWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/FundVUWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) CompleteVUWithdrawal(ctx context.Context, in *CompleteVUWithdrawalRequest, opts ...grpc.CallOption) (*CompleteVUWithdrawalResponse, error) {
	out := new(CompleteVUWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/CompleteVUWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) InitiatePayment(ctx context.Context, in *InitiatePaymentRequest, opts ...grpc.CallOption) (*InitiatePaymentResponse, error) {
	out := new(InitiatePaymentResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/InitiatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetVUDepositsByStatus(ctx context.Context, in *GetVUDepositsByStatusRequest, opts ...grpc.CallOption) (*GetVUDepositsByStatusResponse, error) {
	out := new(GetVUDepositsByStatusResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetVUDepositsByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetVUDepositById(ctx context.Context, in *GetVUDepositByIdRequest, opts ...grpc.CallOption) (*GetVUDepositByIdResponse, error) {
	out := new(GetVUDepositByIdResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetVUDepositById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetVUWithdrawalsByStatus(ctx context.Context, in *GetVUWithdrawalsByStatusRequest, opts ...grpc.CallOption) (*GetVUWithdrawalsByStatusResponse, error) {
	out := new(GetVUWithdrawalsByStatusResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetVUWithdrawalsByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetVUWithdrawalById(ctx context.Context, in *GetVUWithdrawalByIdRequest, opts ...grpc.CallOption) (*GetVUWithdrawalByIdResponse, error) {
	out := new(GetVUWithdrawalByIdResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetVUWithdrawalById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetFBOAccountAvailableBalance(ctx context.Context, in *GetFBOAccountAvailableBalanceRequest, opts ...grpc.CallOption) (*GetFBOAccountAvailableBalanceResponse, error) {
	out := new(GetFBOAccountAvailableBalanceResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetFBOAccountAvailableBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) GetVUTransactionByReference(ctx context.Context, in *GetVUTransactionByReferenceRequest, opts ...grpc.CallOption) (*GetVUTransactionByReferenceResponse, error) {
	out := new(GetVUTransactionByReferenceResponse)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/GetVUTransactionByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecobankServiceClient) HandleEcobankWebhookEvent(ctx context.Context, in *HandleEcobankWebhookEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ecobank.EcobankService/HandleEcobankWebhookEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EcobankServiceServer is the server API for EcobankService service.
// All implementations must embed UnimplementedEcobankServiceServer
// for forward compatibility
type EcobankServiceServer interface {
	GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error)
	GetGeneralFBOAccountBalance(context.Context, *GetGeneralFBOAccountBalanceRequest) (*GetGeneralFBOAccountBalanceResponse, error)
	GetOperatingAccountBalance(context.Context, *GetOperatingAccountBalanceRequest) (*GetOperatingAccountBalanceResponse, error)
	GetOperatingWalletBalance(context.Context, *GetOperatingWalletBalanceRequest) (*GetOperatingWalletBalanceResponse, error)
	GetVUBalances(context.Context, *GetVUBalancesRequest) (*GetVUBalancesResponse, error)
	CreateVUDeposit(context.Context, *CreateVUDepositRequest) (*CreateVUDepositResponse, error)
	UpdateVUDepositStatus(context.Context, *UpdateVUDepositStatusRequest) (*UpdateVUDepositStatusResponse, error)
	FundVUDeposit(context.Context, *FundVUDepositRequest) (*FundVUDepositResponse, error)
	MakeVUDeposit(context.Context, *MakeVUDepositRequest) (*MakeVUDepositResponse, error)
	CheckVUDeposit(context.Context, *CheckVUDepositRequest) (*CheckVUDepositResponse, error)
	CompleteVUDeposit(context.Context, *CompleteVUDepositRequest) (*CompleteVUDepositResponse, error)
	CreateVUWithdrawal(context.Context, *CreateVUWithdrawalRequest) (*CreateVUWithdrawalResponse, error)
	UpdateVUWithdrawalStatus(context.Context, *UpdateVUWithdrawalStatusRequest) (*UpdateVUWithdrawalStatusResponse, error)
	MakeVUWithdrawal(context.Context, *MakeVUWithdrawalRequest) (*MakeVUWithdrawalResponse, error)
	CheckVUWithdrawal(context.Context, *CheckVUWithdrawalRequest) (*CheckVUWithdrawalResponse, error)
	FundVUWithdrawal(context.Context, *FundVUWithdrawalRequest) (*FundVUWithdrawalResponse, error)
	CompleteVUWithdrawal(context.Context, *CompleteVUWithdrawalRequest) (*CompleteVUWithdrawalResponse, error)
	InitiatePayment(context.Context, *InitiatePaymentRequest) (*InitiatePaymentResponse, error)
	GetVUDepositsByStatus(context.Context, *GetVUDepositsByStatusRequest) (*GetVUDepositsByStatusResponse, error)
	GetVUDepositById(context.Context, *GetVUDepositByIdRequest) (*GetVUDepositByIdResponse, error)
	GetVUWithdrawalsByStatus(context.Context, *GetVUWithdrawalsByStatusRequest) (*GetVUWithdrawalsByStatusResponse, error)
	GetVUWithdrawalById(context.Context, *GetVUWithdrawalByIdRequest) (*GetVUWithdrawalByIdResponse, error)
	GetFBOAccountAvailableBalance(context.Context, *GetFBOAccountAvailableBalanceRequest) (*GetFBOAccountAvailableBalanceResponse, error)
	GetVUTransactionByReference(context.Context, *GetVUTransactionByReferenceRequest) (*GetVUTransactionByReferenceResponse, error)
	HandleEcobankWebhookEvent(context.Context, *HandleEcobankWebhookEventRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEcobankServiceServer()
}

// UnimplementedEcobankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEcobankServiceServer struct {
}

func (UnimplementedEcobankServiceServer) GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedEcobankServiceServer) GetGeneralFBOAccountBalance(context.Context, *GetGeneralFBOAccountBalanceRequest) (*GetGeneralFBOAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneralFBOAccountBalance not implemented")
}
func (UnimplementedEcobankServiceServer) GetOperatingAccountBalance(context.Context, *GetOperatingAccountBalanceRequest) (*GetOperatingAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatingAccountBalance not implemented")
}
func (UnimplementedEcobankServiceServer) GetOperatingWalletBalance(context.Context, *GetOperatingWalletBalanceRequest) (*GetOperatingWalletBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatingWalletBalance not implemented")
}
func (UnimplementedEcobankServiceServer) GetVUBalances(context.Context, *GetVUBalancesRequest) (*GetVUBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVUBalances not implemented")
}
func (UnimplementedEcobankServiceServer) CreateVUDeposit(context.Context, *CreateVUDepositRequest) (*CreateVUDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVUDeposit not implemented")
}
func (UnimplementedEcobankServiceServer) UpdateVUDepositStatus(context.Context, *UpdateVUDepositStatusRequest) (*UpdateVUDepositStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVUDepositStatus not implemented")
}
func (UnimplementedEcobankServiceServer) FundVUDeposit(context.Context, *FundVUDepositRequest) (*FundVUDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundVUDeposit not implemented")
}
func (UnimplementedEcobankServiceServer) MakeVUDeposit(context.Context, *MakeVUDepositRequest) (*MakeVUDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeVUDeposit not implemented")
}
func (UnimplementedEcobankServiceServer) CheckVUDeposit(context.Context, *CheckVUDepositRequest) (*CheckVUDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVUDeposit not implemented")
}
func (UnimplementedEcobankServiceServer) CompleteVUDeposit(context.Context, *CompleteVUDepositRequest) (*CompleteVUDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteVUDeposit not implemented")
}
func (UnimplementedEcobankServiceServer) CreateVUWithdrawal(context.Context, *CreateVUWithdrawalRequest) (*CreateVUWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVUWithdrawal not implemented")
}
func (UnimplementedEcobankServiceServer) UpdateVUWithdrawalStatus(context.Context, *UpdateVUWithdrawalStatusRequest) (*UpdateVUWithdrawalStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVUWithdrawalStatus not implemented")
}
func (UnimplementedEcobankServiceServer) MakeVUWithdrawal(context.Context, *MakeVUWithdrawalRequest) (*MakeVUWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeVUWithdrawal not implemented")
}
func (UnimplementedEcobankServiceServer) CheckVUWithdrawal(context.Context, *CheckVUWithdrawalRequest) (*CheckVUWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVUWithdrawal not implemented")
}
func (UnimplementedEcobankServiceServer) FundVUWithdrawal(context.Context, *FundVUWithdrawalRequest) (*FundVUWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundVUWithdrawal not implemented")
}
func (UnimplementedEcobankServiceServer) CompleteVUWithdrawal(context.Context, *CompleteVUWithdrawalRequest) (*CompleteVUWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteVUWithdrawal not implemented")
}
func (UnimplementedEcobankServiceServer) InitiatePayment(context.Context, *InitiatePaymentRequest) (*InitiatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePayment not implemented")
}
func (UnimplementedEcobankServiceServer) GetVUDepositsByStatus(context.Context, *GetVUDepositsByStatusRequest) (*GetVUDepositsByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVUDepositsByStatus not implemented")
}
func (UnimplementedEcobankServiceServer) GetVUDepositById(context.Context, *GetVUDepositByIdRequest) (*GetVUDepositByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVUDepositById not implemented")
}
func (UnimplementedEcobankServiceServer) GetVUWithdrawalsByStatus(context.Context, *GetVUWithdrawalsByStatusRequest) (*GetVUWithdrawalsByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVUWithdrawalsByStatus not implemented")
}
func (UnimplementedEcobankServiceServer) GetVUWithdrawalById(context.Context, *GetVUWithdrawalByIdRequest) (*GetVUWithdrawalByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVUWithdrawalById not implemented")
}
func (UnimplementedEcobankServiceServer) GetFBOAccountAvailableBalance(context.Context, *GetFBOAccountAvailableBalanceRequest) (*GetFBOAccountAvailableBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFBOAccountAvailableBalance not implemented")
}
func (UnimplementedEcobankServiceServer) GetVUTransactionByReference(context.Context, *GetVUTransactionByReferenceRequest) (*GetVUTransactionByReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVUTransactionByReference not implemented")
}
func (UnimplementedEcobankServiceServer) HandleEcobankWebhookEvent(context.Context, *HandleEcobankWebhookEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleEcobankWebhookEvent not implemented")
}
func (UnimplementedEcobankServiceServer) mustEmbedUnimplementedEcobankServiceServer() {}

// UnsafeEcobankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EcobankServiceServer will
// result in compilation errors.
type UnsafeEcobankServiceServer interface {
	mustEmbedUnimplementedEcobankServiceServer()
}

func RegisterEcobankServiceServer(s grpc.ServiceRegistrar, srv EcobankServiceServer) {
	s.RegisterService(&EcobankService_ServiceDesc, srv)
}

func _EcobankService_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetAccountBalance(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetGeneralFBOAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneralFBOAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetGeneralFBOAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetGeneralFBOAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetGeneralFBOAccountBalance(ctx, req.(*GetGeneralFBOAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetOperatingAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatingAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetOperatingAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetOperatingAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetOperatingAccountBalance(ctx, req.(*GetOperatingAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetOperatingWalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatingWalletBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetOperatingWalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetOperatingWalletBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetOperatingWalletBalance(ctx, req.(*GetOperatingWalletBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetVUBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVUBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetVUBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetVUBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetVUBalances(ctx, req.(*GetVUBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_CreateVUDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVUDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).CreateVUDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/CreateVUDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).CreateVUDeposit(ctx, req.(*CreateVUDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_UpdateVUDepositStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVUDepositStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).UpdateVUDepositStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/UpdateVUDepositStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).UpdateVUDepositStatus(ctx, req.(*UpdateVUDepositStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_FundVUDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundVUDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).FundVUDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/FundVUDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).FundVUDeposit(ctx, req.(*FundVUDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_MakeVUDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeVUDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).MakeVUDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/MakeVUDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).MakeVUDeposit(ctx, req.(*MakeVUDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_CheckVUDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVUDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).CheckVUDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/CheckVUDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).CheckVUDeposit(ctx, req.(*CheckVUDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_CompleteVUDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteVUDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).CompleteVUDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/CompleteVUDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).CompleteVUDeposit(ctx, req.(*CompleteVUDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_CreateVUWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVUWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).CreateVUWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/CreateVUWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).CreateVUWithdrawal(ctx, req.(*CreateVUWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_UpdateVUWithdrawalStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVUWithdrawalStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).UpdateVUWithdrawalStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/UpdateVUWithdrawalStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).UpdateVUWithdrawalStatus(ctx, req.(*UpdateVUWithdrawalStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_MakeVUWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeVUWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).MakeVUWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/MakeVUWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).MakeVUWithdrawal(ctx, req.(*MakeVUWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_CheckVUWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVUWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).CheckVUWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/CheckVUWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).CheckVUWithdrawal(ctx, req.(*CheckVUWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_FundVUWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundVUWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).FundVUWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/FundVUWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).FundVUWithdrawal(ctx, req.(*FundVUWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_CompleteVUWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteVUWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).CompleteVUWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/CompleteVUWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).CompleteVUWithdrawal(ctx, req.(*CompleteVUWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_InitiatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).InitiatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/InitiatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).InitiatePayment(ctx, req.(*InitiatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetVUDepositsByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVUDepositsByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetVUDepositsByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetVUDepositsByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetVUDepositsByStatus(ctx, req.(*GetVUDepositsByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetVUDepositById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVUDepositByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetVUDepositById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetVUDepositById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetVUDepositById(ctx, req.(*GetVUDepositByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetVUWithdrawalsByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVUWithdrawalsByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetVUWithdrawalsByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetVUWithdrawalsByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetVUWithdrawalsByStatus(ctx, req.(*GetVUWithdrawalsByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetVUWithdrawalById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVUWithdrawalByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetVUWithdrawalById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetVUWithdrawalById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetVUWithdrawalById(ctx, req.(*GetVUWithdrawalByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetFBOAccountAvailableBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFBOAccountAvailableBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetFBOAccountAvailableBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetFBOAccountAvailableBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetFBOAccountAvailableBalance(ctx, req.(*GetFBOAccountAvailableBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_GetVUTransactionByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVUTransactionByReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).GetVUTransactionByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/GetVUTransactionByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).GetVUTransactionByReference(ctx, req.(*GetVUTransactionByReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcobankService_HandleEcobankWebhookEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleEcobankWebhookEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcobankServiceServer).HandleEcobankWebhookEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobank.EcobankService/HandleEcobankWebhookEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcobankServiceServer).HandleEcobankWebhookEvent(ctx, req.(*HandleEcobankWebhookEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EcobankService_ServiceDesc is the grpc.ServiceDesc for EcobankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EcobankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecobank.EcobankService",
	HandlerType: (*EcobankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountBalance",
			Handler:    _EcobankService_GetAccountBalance_Handler,
		},
		{
			MethodName: "GetGeneralFBOAccountBalance",
			Handler:    _EcobankService_GetGeneralFBOAccountBalance_Handler,
		},
		{
			MethodName: "GetOperatingAccountBalance",
			Handler:    _EcobankService_GetOperatingAccountBalance_Handler,
		},
		{
			MethodName: "GetOperatingWalletBalance",
			Handler:    _EcobankService_GetOperatingWalletBalance_Handler,
		},
		{
			MethodName: "GetVUBalances",
			Handler:    _EcobankService_GetVUBalances_Handler,
		},
		{
			MethodName: "CreateVUDeposit",
			Handler:    _EcobankService_CreateVUDeposit_Handler,
		},
		{
			MethodName: "UpdateVUDepositStatus",
			Handler:    _EcobankService_UpdateVUDepositStatus_Handler,
		},
		{
			MethodName: "FundVUDeposit",
			Handler:    _EcobankService_FundVUDeposit_Handler,
		},
		{
			MethodName: "MakeVUDeposit",
			Handler:    _EcobankService_MakeVUDeposit_Handler,
		},
		{
			MethodName: "CheckVUDeposit",
			Handler:    _EcobankService_CheckVUDeposit_Handler,
		},
		{
			MethodName: "CompleteVUDeposit",
			Handler:    _EcobankService_CompleteVUDeposit_Handler,
		},
		{
			MethodName: "CreateVUWithdrawal",
			Handler:    _EcobankService_CreateVUWithdrawal_Handler,
		},
		{
			MethodName: "UpdateVUWithdrawalStatus",
			Handler:    _EcobankService_UpdateVUWithdrawalStatus_Handler,
		},
		{
			MethodName: "MakeVUWithdrawal",
			Handler:    _EcobankService_MakeVUWithdrawal_Handler,
		},
		{
			MethodName: "CheckVUWithdrawal",
			Handler:    _EcobankService_CheckVUWithdrawal_Handler,
		},
		{
			MethodName: "FundVUWithdrawal",
			Handler:    _EcobankService_FundVUWithdrawal_Handler,
		},
		{
			MethodName: "CompleteVUWithdrawal",
			Handler:    _EcobankService_CompleteVUWithdrawal_Handler,
		},
		{
			MethodName: "InitiatePayment",
			Handler:    _EcobankService_InitiatePayment_Handler,
		},
		{
			MethodName: "GetVUDepositsByStatus",
			Handler:    _EcobankService_GetVUDepositsByStatus_Handler,
		},
		{
			MethodName: "GetVUDepositById",
			Handler:    _EcobankService_GetVUDepositById_Handler,
		},
		{
			MethodName: "GetVUWithdrawalsByStatus",
			Handler:    _EcobankService_GetVUWithdrawalsByStatus_Handler,
		},
		{
			MethodName: "GetVUWithdrawalById",
			Handler:    _EcobankService_GetVUWithdrawalById_Handler,
		},
		{
			MethodName: "GetFBOAccountAvailableBalance",
			Handler:    _EcobankService_GetFBOAccountAvailableBalance_Handler,
		},
		{
			MethodName: "GetVUTransactionByReference",
			Handler:    _EcobankService_GetVUTransactionByReference_Handler,
		},
		{
			MethodName: "HandleEcobankWebhookEvent",
			Handler:    _EcobankService_HandleEcobankWebhookEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/ecobank/ecobank.proto",
}
