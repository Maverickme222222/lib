// Code generated by MockGen. DO NOT EDIT.
// Source: ../ecobank_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ecobank "github.com/kappapay/backend/lib/golang/src/kappa/services/ecobank"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockEcobankServiceClient is a mock of EcobankServiceClient interface.
type MockEcobankServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEcobankServiceClientMockRecorder
}

// MockEcobankServiceClientMockRecorder is the mock recorder for MockEcobankServiceClient.
type MockEcobankServiceClientMockRecorder struct {
	mock *MockEcobankServiceClient
}

// NewMockEcobankServiceClient creates a new mock instance.
func NewMockEcobankServiceClient(ctrl *gomock.Controller) *MockEcobankServiceClient {
	mock := &MockEcobankServiceClient{ctrl: ctrl}
	mock.recorder = &MockEcobankServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcobankServiceClient) EXPECT() *MockEcobankServiceClientMockRecorder {
	return m.recorder
}

// CheckVUDeposit mocks base method.
func (m *MockEcobankServiceClient) CheckVUDeposit(ctx context.Context, in *ecobank.CheckVUDepositRequest, opts ...grpc.CallOption) (*ecobank.CheckVUDepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckVUDeposit", varargs...)
	ret0, _ := ret[0].(*ecobank.CheckVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVUDeposit indicates an expected call of CheckVUDeposit.
func (mr *MockEcobankServiceClientMockRecorder) CheckVUDeposit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVUDeposit", reflect.TypeOf((*MockEcobankServiceClient)(nil).CheckVUDeposit), varargs...)
}

// CheckVUWithdrawal mocks base method.
func (m *MockEcobankServiceClient) CheckVUWithdrawal(ctx context.Context, in *ecobank.CheckVUWithdrawalRequest, opts ...grpc.CallOption) (*ecobank.CheckVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckVUWithdrawal", varargs...)
	ret0, _ := ret[0].(*ecobank.CheckVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVUWithdrawal indicates an expected call of CheckVUWithdrawal.
func (mr *MockEcobankServiceClientMockRecorder) CheckVUWithdrawal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVUWithdrawal", reflect.TypeOf((*MockEcobankServiceClient)(nil).CheckVUWithdrawal), varargs...)
}

// CompleteVUDeposit mocks base method.
func (m *MockEcobankServiceClient) CompleteVUDeposit(ctx context.Context, in *ecobank.CompleteVUDepositRequest, opts ...grpc.CallOption) (*ecobank.CompleteVUDepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteVUDeposit", varargs...)
	ret0, _ := ret[0].(*ecobank.CompleteVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteVUDeposit indicates an expected call of CompleteVUDeposit.
func (mr *MockEcobankServiceClientMockRecorder) CompleteVUDeposit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteVUDeposit", reflect.TypeOf((*MockEcobankServiceClient)(nil).CompleteVUDeposit), varargs...)
}

// CompleteVUWithdrawal mocks base method.
func (m *MockEcobankServiceClient) CompleteVUWithdrawal(ctx context.Context, in *ecobank.CompleteVUWithdrawalRequest, opts ...grpc.CallOption) (*ecobank.CompleteVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteVUWithdrawal", varargs...)
	ret0, _ := ret[0].(*ecobank.CompleteVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteVUWithdrawal indicates an expected call of CompleteVUWithdrawal.
func (mr *MockEcobankServiceClientMockRecorder) CompleteVUWithdrawal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteVUWithdrawal", reflect.TypeOf((*MockEcobankServiceClient)(nil).CompleteVUWithdrawal), varargs...)
}

// CreateVUDeposit mocks base method.
func (m *MockEcobankServiceClient) CreateVUDeposit(ctx context.Context, in *ecobank.CreateVUDepositRequest, opts ...grpc.CallOption) (*ecobank.CreateVUDepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVUDeposit", varargs...)
	ret0, _ := ret[0].(*ecobank.CreateVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVUDeposit indicates an expected call of CreateVUDeposit.
func (mr *MockEcobankServiceClientMockRecorder) CreateVUDeposit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVUDeposit", reflect.TypeOf((*MockEcobankServiceClient)(nil).CreateVUDeposit), varargs...)
}

// CreateVUWithdrawal mocks base method.
func (m *MockEcobankServiceClient) CreateVUWithdrawal(ctx context.Context, in *ecobank.CreateVUWithdrawalRequest, opts ...grpc.CallOption) (*ecobank.CreateVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVUWithdrawal", varargs...)
	ret0, _ := ret[0].(*ecobank.CreateVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVUWithdrawal indicates an expected call of CreateVUWithdrawal.
func (mr *MockEcobankServiceClientMockRecorder) CreateVUWithdrawal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVUWithdrawal", reflect.TypeOf((*MockEcobankServiceClient)(nil).CreateVUWithdrawal), varargs...)
}

// FundVUDeposit mocks base method.
func (m *MockEcobankServiceClient) FundVUDeposit(ctx context.Context, in *ecobank.FundVUDepositRequest, opts ...grpc.CallOption) (*ecobank.FundVUDepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FundVUDeposit", varargs...)
	ret0, _ := ret[0].(*ecobank.FundVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FundVUDeposit indicates an expected call of FundVUDeposit.
func (mr *MockEcobankServiceClientMockRecorder) FundVUDeposit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundVUDeposit", reflect.TypeOf((*MockEcobankServiceClient)(nil).FundVUDeposit), varargs...)
}

// FundVUWithdrawal mocks base method.
func (m *MockEcobankServiceClient) FundVUWithdrawal(ctx context.Context, in *ecobank.FundVUWithdrawalRequest, opts ...grpc.CallOption) (*ecobank.FundVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FundVUWithdrawal", varargs...)
	ret0, _ := ret[0].(*ecobank.FundVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FundVUWithdrawal indicates an expected call of FundVUWithdrawal.
func (mr *MockEcobankServiceClientMockRecorder) FundVUWithdrawal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundVUWithdrawal", reflect.TypeOf((*MockEcobankServiceClient)(nil).FundVUWithdrawal), varargs...)
}

// GetAccountBalance mocks base method.
func (m *MockEcobankServiceClient) GetAccountBalance(ctx context.Context, in *ecobank.GetAccountBalanceRequest, opts ...grpc.CallOption) (*ecobank.GetAccountBalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountBalance", varargs...)
	ret0, _ := ret[0].(*ecobank.GetAccountBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockEcobankServiceClientMockRecorder) GetAccountBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetAccountBalance), varargs...)
}

// GetFBOAccountAvailableBalance mocks base method.
func (m *MockEcobankServiceClient) GetFBOAccountAvailableBalance(ctx context.Context, in *ecobank.GetFBOAccountAvailableBalanceRequest, opts ...grpc.CallOption) (*ecobank.GetFBOAccountAvailableBalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFBOAccountAvailableBalance", varargs...)
	ret0, _ := ret[0].(*ecobank.GetFBOAccountAvailableBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFBOAccountAvailableBalance indicates an expected call of GetFBOAccountAvailableBalance.
func (mr *MockEcobankServiceClientMockRecorder) GetFBOAccountAvailableBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFBOAccountAvailableBalance", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetFBOAccountAvailableBalance), varargs...)
}

// GetGeneralFBOAccountBalance mocks base method.
func (m *MockEcobankServiceClient) GetGeneralFBOAccountBalance(ctx context.Context, in *ecobank.GetGeneralFBOAccountBalanceRequest, opts ...grpc.CallOption) (*ecobank.GetGeneralFBOAccountBalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGeneralFBOAccountBalance", varargs...)
	ret0, _ := ret[0].(*ecobank.GetGeneralFBOAccountBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneralFBOAccountBalance indicates an expected call of GetGeneralFBOAccountBalance.
func (mr *MockEcobankServiceClientMockRecorder) GetGeneralFBOAccountBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneralFBOAccountBalance", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetGeneralFBOAccountBalance), varargs...)
}

// GetOperatingAccountBalance mocks base method.
func (m *MockEcobankServiceClient) GetOperatingAccountBalance(ctx context.Context, in *ecobank.GetOperatingAccountBalanceRequest, opts ...grpc.CallOption) (*ecobank.GetOperatingAccountBalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperatingAccountBalance", varargs...)
	ret0, _ := ret[0].(*ecobank.GetOperatingAccountBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatingAccountBalance indicates an expected call of GetOperatingAccountBalance.
func (mr *MockEcobankServiceClientMockRecorder) GetOperatingAccountBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatingAccountBalance", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetOperatingAccountBalance), varargs...)
}

// GetOperatingWalletBalance mocks base method.
func (m *MockEcobankServiceClient) GetOperatingWalletBalance(ctx context.Context, in *ecobank.GetOperatingWalletBalanceRequest, opts ...grpc.CallOption) (*ecobank.GetOperatingWalletBalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperatingWalletBalance", varargs...)
	ret0, _ := ret[0].(*ecobank.GetOperatingWalletBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatingWalletBalance indicates an expected call of GetOperatingWalletBalance.
func (mr *MockEcobankServiceClientMockRecorder) GetOperatingWalletBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatingWalletBalance", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetOperatingWalletBalance), varargs...)
}

// GetVUBalances mocks base method.
func (m *MockEcobankServiceClient) GetVUBalances(ctx context.Context, in *ecobank.GetVUBalancesRequest, opts ...grpc.CallOption) (*ecobank.GetVUBalancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVUBalances", varargs...)
	ret0, _ := ret[0].(*ecobank.GetVUBalancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUBalances indicates an expected call of GetVUBalances.
func (mr *MockEcobankServiceClientMockRecorder) GetVUBalances(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUBalances", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetVUBalances), varargs...)
}

// GetVUDepositById mocks base method.
func (m *MockEcobankServiceClient) GetVUDepositById(ctx context.Context, in *ecobank.GetVUDepositByIdRequest, opts ...grpc.CallOption) (*ecobank.GetVUDepositByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVUDepositById", varargs...)
	ret0, _ := ret[0].(*ecobank.GetVUDepositByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUDepositById indicates an expected call of GetVUDepositById.
func (mr *MockEcobankServiceClientMockRecorder) GetVUDepositById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUDepositById", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetVUDepositById), varargs...)
}

// GetVUDepositsByStatus mocks base method.
func (m *MockEcobankServiceClient) GetVUDepositsByStatus(ctx context.Context, in *ecobank.GetVUDepositsByStatusRequest, opts ...grpc.CallOption) (*ecobank.GetVUDepositsByStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVUDepositsByStatus", varargs...)
	ret0, _ := ret[0].(*ecobank.GetVUDepositsByStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUDepositsByStatus indicates an expected call of GetVUDepositsByStatus.
func (mr *MockEcobankServiceClientMockRecorder) GetVUDepositsByStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUDepositsByStatus", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetVUDepositsByStatus), varargs...)
}

// GetVUTransactionByReference mocks base method.
func (m *MockEcobankServiceClient) GetVUTransactionByReference(ctx context.Context, in *ecobank.GetVUTransactionByReferenceRequest, opts ...grpc.CallOption) (*ecobank.GetVUTransactionByReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVUTransactionByReference", varargs...)
	ret0, _ := ret[0].(*ecobank.GetVUTransactionByReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUTransactionByReference indicates an expected call of GetVUTransactionByReference.
func (mr *MockEcobankServiceClientMockRecorder) GetVUTransactionByReference(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUTransactionByReference", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetVUTransactionByReference), varargs...)
}

// GetVUWithdrawalById mocks base method.
func (m *MockEcobankServiceClient) GetVUWithdrawalById(ctx context.Context, in *ecobank.GetVUWithdrawalByIdRequest, opts ...grpc.CallOption) (*ecobank.GetVUWithdrawalByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVUWithdrawalById", varargs...)
	ret0, _ := ret[0].(*ecobank.GetVUWithdrawalByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUWithdrawalById indicates an expected call of GetVUWithdrawalById.
func (mr *MockEcobankServiceClientMockRecorder) GetVUWithdrawalById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUWithdrawalById", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetVUWithdrawalById), varargs...)
}

// GetVUWithdrawalsByStatus mocks base method.
func (m *MockEcobankServiceClient) GetVUWithdrawalsByStatus(ctx context.Context, in *ecobank.GetVUWithdrawalsByStatusRequest, opts ...grpc.CallOption) (*ecobank.GetVUWithdrawalsByStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVUWithdrawalsByStatus", varargs...)
	ret0, _ := ret[0].(*ecobank.GetVUWithdrawalsByStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUWithdrawalsByStatus indicates an expected call of GetVUWithdrawalsByStatus.
func (mr *MockEcobankServiceClientMockRecorder) GetVUWithdrawalsByStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUWithdrawalsByStatus", reflect.TypeOf((*MockEcobankServiceClient)(nil).GetVUWithdrawalsByStatus), varargs...)
}

// HandleEcobankWebhookEvent mocks base method.
func (m *MockEcobankServiceClient) HandleEcobankWebhookEvent(ctx context.Context, in *ecobank.HandleEcobankWebhookEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleEcobankWebhookEvent", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEcobankWebhookEvent indicates an expected call of HandleEcobankWebhookEvent.
func (mr *MockEcobankServiceClientMockRecorder) HandleEcobankWebhookEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEcobankWebhookEvent", reflect.TypeOf((*MockEcobankServiceClient)(nil).HandleEcobankWebhookEvent), varargs...)
}

// InitiatePayment mocks base method.
func (m *MockEcobankServiceClient) InitiatePayment(ctx context.Context, in *ecobank.InitiatePaymentRequest, opts ...grpc.CallOption) (*ecobank.InitiatePaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitiatePayment", varargs...)
	ret0, _ := ret[0].(*ecobank.InitiatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePayment indicates an expected call of InitiatePayment.
func (mr *MockEcobankServiceClientMockRecorder) InitiatePayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePayment", reflect.TypeOf((*MockEcobankServiceClient)(nil).InitiatePayment), varargs...)
}

// MakeVUDeposit mocks base method.
func (m *MockEcobankServiceClient) MakeVUDeposit(ctx context.Context, in *ecobank.MakeVUDepositRequest, opts ...grpc.CallOption) (*ecobank.MakeVUDepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MakeVUDeposit", varargs...)
	ret0, _ := ret[0].(*ecobank.MakeVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeVUDeposit indicates an expected call of MakeVUDeposit.
func (mr *MockEcobankServiceClientMockRecorder) MakeVUDeposit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeVUDeposit", reflect.TypeOf((*MockEcobankServiceClient)(nil).MakeVUDeposit), varargs...)
}

// MakeVUWithdrawal mocks base method.
func (m *MockEcobankServiceClient) MakeVUWithdrawal(ctx context.Context, in *ecobank.MakeVUWithdrawalRequest, opts ...grpc.CallOption) (*ecobank.MakeVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MakeVUWithdrawal", varargs...)
	ret0, _ := ret[0].(*ecobank.MakeVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeVUWithdrawal indicates an expected call of MakeVUWithdrawal.
func (mr *MockEcobankServiceClientMockRecorder) MakeVUWithdrawal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeVUWithdrawal", reflect.TypeOf((*MockEcobankServiceClient)(nil).MakeVUWithdrawal), varargs...)
}

// UpdateVUDepositStatus mocks base method.
func (m *MockEcobankServiceClient) UpdateVUDepositStatus(ctx context.Context, in *ecobank.UpdateVUDepositStatusRequest, opts ...grpc.CallOption) (*ecobank.UpdateVUDepositStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVUDepositStatus", varargs...)
	ret0, _ := ret[0].(*ecobank.UpdateVUDepositStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVUDepositStatus indicates an expected call of UpdateVUDepositStatus.
func (mr *MockEcobankServiceClientMockRecorder) UpdateVUDepositStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVUDepositStatus", reflect.TypeOf((*MockEcobankServiceClient)(nil).UpdateVUDepositStatus), varargs...)
}

// UpdateVUWithdrawalStatus mocks base method.
func (m *MockEcobankServiceClient) UpdateVUWithdrawalStatus(ctx context.Context, in *ecobank.UpdateVUWithdrawalStatusRequest, opts ...grpc.CallOption) (*ecobank.UpdateVUWithdrawalStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVUWithdrawalStatus", varargs...)
	ret0, _ := ret[0].(*ecobank.UpdateVUWithdrawalStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVUWithdrawalStatus indicates an expected call of UpdateVUWithdrawalStatus.
func (mr *MockEcobankServiceClientMockRecorder) UpdateVUWithdrawalStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVUWithdrawalStatus", reflect.TypeOf((*MockEcobankServiceClient)(nil).UpdateVUWithdrawalStatus), varargs...)
}

// MockEcobankServiceServer is a mock of EcobankServiceServer interface.
type MockEcobankServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEcobankServiceServerMockRecorder
}

// MockEcobankServiceServerMockRecorder is the mock recorder for MockEcobankServiceServer.
type MockEcobankServiceServerMockRecorder struct {
	mock *MockEcobankServiceServer
}

// NewMockEcobankServiceServer creates a new mock instance.
func NewMockEcobankServiceServer(ctrl *gomock.Controller) *MockEcobankServiceServer {
	mock := &MockEcobankServiceServer{ctrl: ctrl}
	mock.recorder = &MockEcobankServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcobankServiceServer) EXPECT() *MockEcobankServiceServerMockRecorder {
	return m.recorder
}

// CheckVUDeposit mocks base method.
func (m *MockEcobankServiceServer) CheckVUDeposit(arg0 context.Context, arg1 *ecobank.CheckVUDepositRequest) (*ecobank.CheckVUDepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVUDeposit", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.CheckVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVUDeposit indicates an expected call of CheckVUDeposit.
func (mr *MockEcobankServiceServerMockRecorder) CheckVUDeposit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVUDeposit", reflect.TypeOf((*MockEcobankServiceServer)(nil).CheckVUDeposit), arg0, arg1)
}

// CheckVUWithdrawal mocks base method.
func (m *MockEcobankServiceServer) CheckVUWithdrawal(arg0 context.Context, arg1 *ecobank.CheckVUWithdrawalRequest) (*ecobank.CheckVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVUWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.CheckVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVUWithdrawal indicates an expected call of CheckVUWithdrawal.
func (mr *MockEcobankServiceServerMockRecorder) CheckVUWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVUWithdrawal", reflect.TypeOf((*MockEcobankServiceServer)(nil).CheckVUWithdrawal), arg0, arg1)
}

// CompleteVUDeposit mocks base method.
func (m *MockEcobankServiceServer) CompleteVUDeposit(arg0 context.Context, arg1 *ecobank.CompleteVUDepositRequest) (*ecobank.CompleteVUDepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteVUDeposit", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.CompleteVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteVUDeposit indicates an expected call of CompleteVUDeposit.
func (mr *MockEcobankServiceServerMockRecorder) CompleteVUDeposit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteVUDeposit", reflect.TypeOf((*MockEcobankServiceServer)(nil).CompleteVUDeposit), arg0, arg1)
}

// CompleteVUWithdrawal mocks base method.
func (m *MockEcobankServiceServer) CompleteVUWithdrawal(arg0 context.Context, arg1 *ecobank.CompleteVUWithdrawalRequest) (*ecobank.CompleteVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteVUWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.CompleteVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteVUWithdrawal indicates an expected call of CompleteVUWithdrawal.
func (mr *MockEcobankServiceServerMockRecorder) CompleteVUWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteVUWithdrawal", reflect.TypeOf((*MockEcobankServiceServer)(nil).CompleteVUWithdrawal), arg0, arg1)
}

// CreateVUDeposit mocks base method.
func (m *MockEcobankServiceServer) CreateVUDeposit(arg0 context.Context, arg1 *ecobank.CreateVUDepositRequest) (*ecobank.CreateVUDepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVUDeposit", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.CreateVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVUDeposit indicates an expected call of CreateVUDeposit.
func (mr *MockEcobankServiceServerMockRecorder) CreateVUDeposit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVUDeposit", reflect.TypeOf((*MockEcobankServiceServer)(nil).CreateVUDeposit), arg0, arg1)
}

// CreateVUWithdrawal mocks base method.
func (m *MockEcobankServiceServer) CreateVUWithdrawal(arg0 context.Context, arg1 *ecobank.CreateVUWithdrawalRequest) (*ecobank.CreateVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVUWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.CreateVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVUWithdrawal indicates an expected call of CreateVUWithdrawal.
func (mr *MockEcobankServiceServerMockRecorder) CreateVUWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVUWithdrawal", reflect.TypeOf((*MockEcobankServiceServer)(nil).CreateVUWithdrawal), arg0, arg1)
}

// FundVUDeposit mocks base method.
func (m *MockEcobankServiceServer) FundVUDeposit(arg0 context.Context, arg1 *ecobank.FundVUDepositRequest) (*ecobank.FundVUDepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FundVUDeposit", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.FundVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FundVUDeposit indicates an expected call of FundVUDeposit.
func (mr *MockEcobankServiceServerMockRecorder) FundVUDeposit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundVUDeposit", reflect.TypeOf((*MockEcobankServiceServer)(nil).FundVUDeposit), arg0, arg1)
}

// FundVUWithdrawal mocks base method.
func (m *MockEcobankServiceServer) FundVUWithdrawal(arg0 context.Context, arg1 *ecobank.FundVUWithdrawalRequest) (*ecobank.FundVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FundVUWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.FundVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FundVUWithdrawal indicates an expected call of FundVUWithdrawal.
func (mr *MockEcobankServiceServerMockRecorder) FundVUWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundVUWithdrawal", reflect.TypeOf((*MockEcobankServiceServer)(nil).FundVUWithdrawal), arg0, arg1)
}

// GetAccountBalance mocks base method.
func (m *MockEcobankServiceServer) GetAccountBalance(arg0 context.Context, arg1 *ecobank.GetAccountBalanceRequest) (*ecobank.GetAccountBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetAccountBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockEcobankServiceServerMockRecorder) GetAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetAccountBalance), arg0, arg1)
}

// GetFBOAccountAvailableBalance mocks base method.
func (m *MockEcobankServiceServer) GetFBOAccountAvailableBalance(arg0 context.Context, arg1 *ecobank.GetFBOAccountAvailableBalanceRequest) (*ecobank.GetFBOAccountAvailableBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFBOAccountAvailableBalance", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetFBOAccountAvailableBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFBOAccountAvailableBalance indicates an expected call of GetFBOAccountAvailableBalance.
func (mr *MockEcobankServiceServerMockRecorder) GetFBOAccountAvailableBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFBOAccountAvailableBalance", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetFBOAccountAvailableBalance), arg0, arg1)
}

// GetGeneralFBOAccountBalance mocks base method.
func (m *MockEcobankServiceServer) GetGeneralFBOAccountBalance(arg0 context.Context, arg1 *ecobank.GetGeneralFBOAccountBalanceRequest) (*ecobank.GetGeneralFBOAccountBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneralFBOAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetGeneralFBOAccountBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneralFBOAccountBalance indicates an expected call of GetGeneralFBOAccountBalance.
func (mr *MockEcobankServiceServerMockRecorder) GetGeneralFBOAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneralFBOAccountBalance", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetGeneralFBOAccountBalance), arg0, arg1)
}

// GetOperatingAccountBalance mocks base method.
func (m *MockEcobankServiceServer) GetOperatingAccountBalance(arg0 context.Context, arg1 *ecobank.GetOperatingAccountBalanceRequest) (*ecobank.GetOperatingAccountBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatingAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetOperatingAccountBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatingAccountBalance indicates an expected call of GetOperatingAccountBalance.
func (mr *MockEcobankServiceServerMockRecorder) GetOperatingAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatingAccountBalance", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetOperatingAccountBalance), arg0, arg1)
}

// GetOperatingWalletBalance mocks base method.
func (m *MockEcobankServiceServer) GetOperatingWalletBalance(arg0 context.Context, arg1 *ecobank.GetOperatingWalletBalanceRequest) (*ecobank.GetOperatingWalletBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatingWalletBalance", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetOperatingWalletBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatingWalletBalance indicates an expected call of GetOperatingWalletBalance.
func (mr *MockEcobankServiceServerMockRecorder) GetOperatingWalletBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatingWalletBalance", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetOperatingWalletBalance), arg0, arg1)
}

// GetVUBalances mocks base method.
func (m *MockEcobankServiceServer) GetVUBalances(arg0 context.Context, arg1 *ecobank.GetVUBalancesRequest) (*ecobank.GetVUBalancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVUBalances", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetVUBalancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUBalances indicates an expected call of GetVUBalances.
func (mr *MockEcobankServiceServerMockRecorder) GetVUBalances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUBalances", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetVUBalances), arg0, arg1)
}

// GetVUDepositById mocks base method.
func (m *MockEcobankServiceServer) GetVUDepositById(arg0 context.Context, arg1 *ecobank.GetVUDepositByIdRequest) (*ecobank.GetVUDepositByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVUDepositById", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetVUDepositByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUDepositById indicates an expected call of GetVUDepositById.
func (mr *MockEcobankServiceServerMockRecorder) GetVUDepositById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUDepositById", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetVUDepositById), arg0, arg1)
}

// GetVUDepositsByStatus mocks base method.
func (m *MockEcobankServiceServer) GetVUDepositsByStatus(arg0 context.Context, arg1 *ecobank.GetVUDepositsByStatusRequest) (*ecobank.GetVUDepositsByStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVUDepositsByStatus", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetVUDepositsByStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUDepositsByStatus indicates an expected call of GetVUDepositsByStatus.
func (mr *MockEcobankServiceServerMockRecorder) GetVUDepositsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUDepositsByStatus", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetVUDepositsByStatus), arg0, arg1)
}

// GetVUTransactionByReference mocks base method.
func (m *MockEcobankServiceServer) GetVUTransactionByReference(arg0 context.Context, arg1 *ecobank.GetVUTransactionByReferenceRequest) (*ecobank.GetVUTransactionByReferenceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVUTransactionByReference", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetVUTransactionByReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUTransactionByReference indicates an expected call of GetVUTransactionByReference.
func (mr *MockEcobankServiceServerMockRecorder) GetVUTransactionByReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUTransactionByReference", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetVUTransactionByReference), arg0, arg1)
}

// GetVUWithdrawalById mocks base method.
func (m *MockEcobankServiceServer) GetVUWithdrawalById(arg0 context.Context, arg1 *ecobank.GetVUWithdrawalByIdRequest) (*ecobank.GetVUWithdrawalByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVUWithdrawalById", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetVUWithdrawalByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUWithdrawalById indicates an expected call of GetVUWithdrawalById.
func (mr *MockEcobankServiceServerMockRecorder) GetVUWithdrawalById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUWithdrawalById", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetVUWithdrawalById), arg0, arg1)
}

// GetVUWithdrawalsByStatus mocks base method.
func (m *MockEcobankServiceServer) GetVUWithdrawalsByStatus(arg0 context.Context, arg1 *ecobank.GetVUWithdrawalsByStatusRequest) (*ecobank.GetVUWithdrawalsByStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVUWithdrawalsByStatus", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.GetVUWithdrawalsByStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVUWithdrawalsByStatus indicates an expected call of GetVUWithdrawalsByStatus.
func (mr *MockEcobankServiceServerMockRecorder) GetVUWithdrawalsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVUWithdrawalsByStatus", reflect.TypeOf((*MockEcobankServiceServer)(nil).GetVUWithdrawalsByStatus), arg0, arg1)
}

// HandleEcobankWebhookEvent mocks base method.
func (m *MockEcobankServiceServer) HandleEcobankWebhookEvent(arg0 context.Context, arg1 *ecobank.HandleEcobankWebhookEventRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEcobankWebhookEvent", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEcobankWebhookEvent indicates an expected call of HandleEcobankWebhookEvent.
func (mr *MockEcobankServiceServerMockRecorder) HandleEcobankWebhookEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEcobankWebhookEvent", reflect.TypeOf((*MockEcobankServiceServer)(nil).HandleEcobankWebhookEvent), arg0, arg1)
}

// InitiatePayment mocks base method.
func (m *MockEcobankServiceServer) InitiatePayment(arg0 context.Context, arg1 *ecobank.InitiatePaymentRequest) (*ecobank.InitiatePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePayment", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.InitiatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePayment indicates an expected call of InitiatePayment.
func (mr *MockEcobankServiceServerMockRecorder) InitiatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePayment", reflect.TypeOf((*MockEcobankServiceServer)(nil).InitiatePayment), arg0, arg1)
}

// MakeVUDeposit mocks base method.
func (m *MockEcobankServiceServer) MakeVUDeposit(arg0 context.Context, arg1 *ecobank.MakeVUDepositRequest) (*ecobank.MakeVUDepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeVUDeposit", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.MakeVUDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeVUDeposit indicates an expected call of MakeVUDeposit.
func (mr *MockEcobankServiceServerMockRecorder) MakeVUDeposit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeVUDeposit", reflect.TypeOf((*MockEcobankServiceServer)(nil).MakeVUDeposit), arg0, arg1)
}

// MakeVUWithdrawal mocks base method.
func (m *MockEcobankServiceServer) MakeVUWithdrawal(arg0 context.Context, arg1 *ecobank.MakeVUWithdrawalRequest) (*ecobank.MakeVUWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeVUWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.MakeVUWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeVUWithdrawal indicates an expected call of MakeVUWithdrawal.
func (mr *MockEcobankServiceServerMockRecorder) MakeVUWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeVUWithdrawal", reflect.TypeOf((*MockEcobankServiceServer)(nil).MakeVUWithdrawal), arg0, arg1)
}

// UpdateVUDepositStatus mocks base method.
func (m *MockEcobankServiceServer) UpdateVUDepositStatus(arg0 context.Context, arg1 *ecobank.UpdateVUDepositStatusRequest) (*ecobank.UpdateVUDepositStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVUDepositStatus", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.UpdateVUDepositStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVUDepositStatus indicates an expected call of UpdateVUDepositStatus.
func (mr *MockEcobankServiceServerMockRecorder) UpdateVUDepositStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVUDepositStatus", reflect.TypeOf((*MockEcobankServiceServer)(nil).UpdateVUDepositStatus), arg0, arg1)
}

// UpdateVUWithdrawalStatus mocks base method.
func (m *MockEcobankServiceServer) UpdateVUWithdrawalStatus(arg0 context.Context, arg1 *ecobank.UpdateVUWithdrawalStatusRequest) (*ecobank.UpdateVUWithdrawalStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVUWithdrawalStatus", arg0, arg1)
	ret0, _ := ret[0].(*ecobank.UpdateVUWithdrawalStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVUWithdrawalStatus indicates an expected call of UpdateVUWithdrawalStatus.
func (mr *MockEcobankServiceServerMockRecorder) UpdateVUWithdrawalStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVUWithdrawalStatus", reflect.TypeOf((*MockEcobankServiceServer)(nil).UpdateVUWithdrawalStatus), arg0, arg1)
}

// mustEmbedUnimplementedEcobankServiceServer mocks base method.
func (m *MockEcobankServiceServer) mustEmbedUnimplementedEcobankServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEcobankServiceServer")
}

// mustEmbedUnimplementedEcobankServiceServer indicates an expected call of mustEmbedUnimplementedEcobankServiceServer.
func (mr *MockEcobankServiceServerMockRecorder) mustEmbedUnimplementedEcobankServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEcobankServiceServer", reflect.TypeOf((*MockEcobankServiceServer)(nil).mustEmbedUnimplementedEcobankServiceServer))
}

// MockUnsafeEcobankServiceServer is a mock of UnsafeEcobankServiceServer interface.
type MockUnsafeEcobankServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEcobankServiceServerMockRecorder
}

// MockUnsafeEcobankServiceServerMockRecorder is the mock recorder for MockUnsafeEcobankServiceServer.
type MockUnsafeEcobankServiceServerMockRecorder struct {
	mock *MockUnsafeEcobankServiceServer
}

// NewMockUnsafeEcobankServiceServer creates a new mock instance.
func NewMockUnsafeEcobankServiceServer(ctrl *gomock.Controller) *MockUnsafeEcobankServiceServer {
	mock := &MockUnsafeEcobankServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEcobankServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEcobankServiceServer) EXPECT() *MockUnsafeEcobankServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEcobankServiceServer mocks base method.
func (m *MockUnsafeEcobankServiceServer) mustEmbedUnimplementedEcobankServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEcobankServiceServer")
}

// mustEmbedUnimplementedEcobankServiceServer indicates an expected call of mustEmbedUnimplementedEcobankServiceServer.
func (mr *MockUnsafeEcobankServiceServerMockRecorder) mustEmbedUnimplementedEcobankServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEcobankServiceServer", reflect.TypeOf((*MockUnsafeEcobankServiceServer)(nil).mustEmbedUnimplementedEcobankServiceServer))
}
