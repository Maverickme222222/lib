// Code generated by MockGen. DO NOT EDIT.
// Source: ../wallets_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	wallets "github.com/kappapay/backend/lib/golang/src/kappa/services/wallets"
	grpc "google.golang.org/grpc"
)

// MockWalletsServiceClient is a mock of WalletsServiceClient interface.
type MockWalletsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWalletsServiceClientMockRecorder
}

// MockWalletsServiceClientMockRecorder is the mock recorder for MockWalletsServiceClient.
type MockWalletsServiceClientMockRecorder struct {
	mock *MockWalletsServiceClient
}

// NewMockWalletsServiceClient creates a new mock instance.
func NewMockWalletsServiceClient(ctrl *gomock.Controller) *MockWalletsServiceClient {
	mock := &MockWalletsServiceClient{ctrl: ctrl}
	mock.recorder = &MockWalletsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletsServiceClient) EXPECT() *MockWalletsServiceClientMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletsServiceClient) CreateWallet(ctx context.Context, in *wallets.CreateWalletRequest, opts ...grpc.CallOption) (*wallets.CreateWalletResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWallet", varargs...)
	ret0, _ := ret[0].(*wallets.CreateWalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletsServiceClientMockRecorder) CreateWallet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletsServiceClient)(nil).CreateWallet), varargs...)
}

// GetWalletBalance mocks base method.
func (m *MockWalletsServiceClient) GetWalletBalance(ctx context.Context, in *wallets.GetWalletBalanceRequest, opts ...grpc.CallOption) (*wallets.GetWalletBalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWalletBalance", varargs...)
	ret0, _ := ret[0].(*wallets.GetWalletBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockWalletsServiceClientMockRecorder) GetWalletBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockWalletsServiceClient)(nil).GetWalletBalance), varargs...)
}

// GetWalletByEntityID mocks base method.
func (m *MockWalletsServiceClient) GetWalletByEntityID(ctx context.Context, in *wallets.GetWalletByEntityIDRequest, opts ...grpc.CallOption) (*wallets.GetWalletByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWalletByEntityID", varargs...)
	ret0, _ := ret[0].(*wallets.GetWalletByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByEntityID indicates an expected call of GetWalletByEntityID.
func (mr *MockWalletsServiceClientMockRecorder) GetWalletByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByEntityID", reflect.TypeOf((*MockWalletsServiceClient)(nil).GetWalletByEntityID), varargs...)
}

// GetWalletByID mocks base method.
func (m *MockWalletsServiceClient) GetWalletByID(ctx context.Context, in *wallets.GetWalletByIDRequest, opts ...grpc.CallOption) (*wallets.GetWalletByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWalletByID", varargs...)
	ret0, _ := ret[0].(*wallets.GetWalletByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByID indicates an expected call of GetWalletByID.
func (mr *MockWalletsServiceClientMockRecorder) GetWalletByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByID", reflect.TypeOf((*MockWalletsServiceClient)(nil).GetWalletByID), varargs...)
}

// GetWalletLedgerAccount mocks base method.
func (m *MockWalletsServiceClient) GetWalletLedgerAccount(ctx context.Context, in *wallets.GetWalletLedgerAccountRequest, opts ...grpc.CallOption) (*wallets.GetWalletLedgerAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWalletLedgerAccount", varargs...)
	ret0, _ := ret[0].(*wallets.GetWalletLedgerAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletLedgerAccount indicates an expected call of GetWalletLedgerAccount.
func (mr *MockWalletsServiceClientMockRecorder) GetWalletLedgerAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletLedgerAccount", reflect.TypeOf((*MockWalletsServiceClient)(nil).GetWalletLedgerAccount), varargs...)
}

// GetWalletOutgoingTransactionsLedgerAccount mocks base method.
func (m *MockWalletsServiceClient) GetWalletOutgoingTransactionsLedgerAccount(ctx context.Context, in *wallets.GetWalletOutgoingTransactionsLedgerAccountRequest, opts ...grpc.CallOption) (*wallets.GetWalletOutgoingTransactionsLedgerAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWalletOutgoingTransactionsLedgerAccount", varargs...)
	ret0, _ := ret[0].(*wallets.GetWalletOutgoingTransactionsLedgerAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletOutgoingTransactionsLedgerAccount indicates an expected call of GetWalletOutgoingTransactionsLedgerAccount.
func (mr *MockWalletsServiceClientMockRecorder) GetWalletOutgoingTransactionsLedgerAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletOutgoingTransactionsLedgerAccount", reflect.TypeOf((*MockWalletsServiceClient)(nil).GetWalletOutgoingTransactionsLedgerAccount), varargs...)
}

// Transfer mocks base method.
func (m *MockWalletsServiceClient) Transfer(ctx context.Context, in *wallets.TransferRequest, opts ...grpc.CallOption) (*wallets.TransferResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transfer", varargs...)
	ret0, _ := ret[0].(*wallets.TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockWalletsServiceClientMockRecorder) Transfer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockWalletsServiceClient)(nil).Transfer), varargs...)
}

// UpdateWallet mocks base method.
func (m *MockWalletsServiceClient) UpdateWallet(ctx context.Context, in *wallets.UpdateWalletRequest, opts ...grpc.CallOption) (*wallets.UpdateWalletResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWallet", varargs...)
	ret0, _ := ret[0].(*wallets.UpdateWalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockWalletsServiceClientMockRecorder) UpdateWallet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockWalletsServiceClient)(nil).UpdateWallet), varargs...)
}

// MockWalletsServiceServer is a mock of WalletsServiceServer interface.
type MockWalletsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWalletsServiceServerMockRecorder
}

// MockWalletsServiceServerMockRecorder is the mock recorder for MockWalletsServiceServer.
type MockWalletsServiceServerMockRecorder struct {
	mock *MockWalletsServiceServer
}

// NewMockWalletsServiceServer creates a new mock instance.
func NewMockWalletsServiceServer(ctrl *gomock.Controller) *MockWalletsServiceServer {
	mock := &MockWalletsServiceServer{ctrl: ctrl}
	mock.recorder = &MockWalletsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletsServiceServer) EXPECT() *MockWalletsServiceServerMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletsServiceServer) CreateWallet(arg0 context.Context, arg1 *wallets.CreateWalletRequest) (*wallets.CreateWalletResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(*wallets.CreateWalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletsServiceServerMockRecorder) CreateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletsServiceServer)(nil).CreateWallet), arg0, arg1)
}

// GetWalletBalance mocks base method.
func (m *MockWalletsServiceServer) GetWalletBalance(arg0 context.Context, arg1 *wallets.GetWalletBalanceRequest) (*wallets.GetWalletBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", arg0, arg1)
	ret0, _ := ret[0].(*wallets.GetWalletBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockWalletsServiceServerMockRecorder) GetWalletBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockWalletsServiceServer)(nil).GetWalletBalance), arg0, arg1)
}

// GetWalletByEntityID mocks base method.
func (m *MockWalletsServiceServer) GetWalletByEntityID(arg0 context.Context, arg1 *wallets.GetWalletByEntityIDRequest) (*wallets.GetWalletByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*wallets.GetWalletByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByEntityID indicates an expected call of GetWalletByEntityID.
func (mr *MockWalletsServiceServerMockRecorder) GetWalletByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByEntityID", reflect.TypeOf((*MockWalletsServiceServer)(nil).GetWalletByEntityID), arg0, arg1)
}

// GetWalletByID mocks base method.
func (m *MockWalletsServiceServer) GetWalletByID(arg0 context.Context, arg1 *wallets.GetWalletByIDRequest) (*wallets.GetWalletByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByID", arg0, arg1)
	ret0, _ := ret[0].(*wallets.GetWalletByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByID indicates an expected call of GetWalletByID.
func (mr *MockWalletsServiceServerMockRecorder) GetWalletByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByID", reflect.TypeOf((*MockWalletsServiceServer)(nil).GetWalletByID), arg0, arg1)
}

// GetWalletLedgerAccount mocks base method.
func (m *MockWalletsServiceServer) GetWalletLedgerAccount(arg0 context.Context, arg1 *wallets.GetWalletLedgerAccountRequest) (*wallets.GetWalletLedgerAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletLedgerAccount", arg0, arg1)
	ret0, _ := ret[0].(*wallets.GetWalletLedgerAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletLedgerAccount indicates an expected call of GetWalletLedgerAccount.
func (mr *MockWalletsServiceServerMockRecorder) GetWalletLedgerAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletLedgerAccount", reflect.TypeOf((*MockWalletsServiceServer)(nil).GetWalletLedgerAccount), arg0, arg1)
}

// GetWalletOutgoingTransactionsLedgerAccount mocks base method.
func (m *MockWalletsServiceServer) GetWalletOutgoingTransactionsLedgerAccount(arg0 context.Context, arg1 *wallets.GetWalletOutgoingTransactionsLedgerAccountRequest) (*wallets.GetWalletOutgoingTransactionsLedgerAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletOutgoingTransactionsLedgerAccount", arg0, arg1)
	ret0, _ := ret[0].(*wallets.GetWalletOutgoingTransactionsLedgerAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletOutgoingTransactionsLedgerAccount indicates an expected call of GetWalletOutgoingTransactionsLedgerAccount.
func (mr *MockWalletsServiceServerMockRecorder) GetWalletOutgoingTransactionsLedgerAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletOutgoingTransactionsLedgerAccount", reflect.TypeOf((*MockWalletsServiceServer)(nil).GetWalletOutgoingTransactionsLedgerAccount), arg0, arg1)
}

// Transfer mocks base method.
func (m *MockWalletsServiceServer) Transfer(arg0 context.Context, arg1 *wallets.TransferRequest) (*wallets.TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1)
	ret0, _ := ret[0].(*wallets.TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockWalletsServiceServerMockRecorder) Transfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockWalletsServiceServer)(nil).Transfer), arg0, arg1)
}

// UpdateWallet mocks base method.
func (m *MockWalletsServiceServer) UpdateWallet(arg0 context.Context, arg1 *wallets.UpdateWalletRequest) (*wallets.UpdateWalletResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", arg0, arg1)
	ret0, _ := ret[0].(*wallets.UpdateWalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockWalletsServiceServerMockRecorder) UpdateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockWalletsServiceServer)(nil).UpdateWallet), arg0, arg1)
}

// mustEmbedUnimplementedWalletsServiceServer mocks base method.
func (m *MockWalletsServiceServer) mustEmbedUnimplementedWalletsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWalletsServiceServer")
}

// mustEmbedUnimplementedWalletsServiceServer indicates an expected call of mustEmbedUnimplementedWalletsServiceServer.
func (mr *MockWalletsServiceServerMockRecorder) mustEmbedUnimplementedWalletsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWalletsServiceServer", reflect.TypeOf((*MockWalletsServiceServer)(nil).mustEmbedUnimplementedWalletsServiceServer))
}

// MockUnsafeWalletsServiceServer is a mock of UnsafeWalletsServiceServer interface.
type MockUnsafeWalletsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWalletsServiceServerMockRecorder
}

// MockUnsafeWalletsServiceServerMockRecorder is the mock recorder for MockUnsafeWalletsServiceServer.
type MockUnsafeWalletsServiceServerMockRecorder struct {
	mock *MockUnsafeWalletsServiceServer
}

// NewMockUnsafeWalletsServiceServer creates a new mock instance.
func NewMockUnsafeWalletsServiceServer(ctrl *gomock.Controller) *MockUnsafeWalletsServiceServer {
	mock := &MockUnsafeWalletsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWalletsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWalletsServiceServer) EXPECT() *MockUnsafeWalletsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWalletsServiceServer mocks base method.
func (m *MockUnsafeWalletsServiceServer) mustEmbedUnimplementedWalletsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWalletsServiceServer")
}

// mustEmbedUnimplementedWalletsServiceServer indicates an expected call of mustEmbedUnimplementedWalletsServiceServer.
func (mr *MockUnsafeWalletsServiceServerMockRecorder) mustEmbedUnimplementedWalletsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWalletsServiceServer", reflect.TypeOf((*MockUnsafeWalletsServiceServer)(nil).mustEmbedUnimplementedWalletsServiceServer))
}
