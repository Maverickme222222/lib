// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/wallets/wallets.proto

package wallets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletsServiceClient is the client API for WalletsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletsServiceClient interface {
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	GetWalletByID(ctx context.Context, in *GetWalletByIDRequest, opts ...grpc.CallOption) (*GetWalletByIDResponse, error)
	GetWalletByEntityID(ctx context.Context, in *GetWalletByEntityIDRequest, opts ...grpc.CallOption) (*GetWalletByEntityIDResponse, error)
	UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error)
	GetWalletBalance(ctx context.Context, in *GetWalletBalanceRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	GetWalletLedgerAccount(ctx context.Context, in *GetWalletLedgerAccountRequest, opts ...grpc.CallOption) (*GetWalletLedgerAccountResponse, error)
	GetWalletOutgoingTransactionsLedgerAccount(ctx context.Context, in *GetWalletOutgoingTransactionsLedgerAccountRequest, opts ...grpc.CallOption) (*GetWalletOutgoingTransactionsLedgerAccountResponse, error)
}

type walletsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletsServiceClient(cc grpc.ClientConnInterface) WalletsServiceClient {
	return &walletsServiceClient{cc}
}

func (c *walletsServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/wallets.WalletsService/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) GetWalletByID(ctx context.Context, in *GetWalletByIDRequest, opts ...grpc.CallOption) (*GetWalletByIDResponse, error) {
	out := new(GetWalletByIDResponse)
	err := c.cc.Invoke(ctx, "/wallets.WalletsService/GetWalletByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) GetWalletByEntityID(ctx context.Context, in *GetWalletByEntityIDRequest, opts ...grpc.CallOption) (*GetWalletByEntityIDResponse, error) {
	out := new(GetWalletByEntityIDResponse)
	err := c.cc.Invoke(ctx, "/wallets.WalletsService/GetWalletByEntityID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error) {
	out := new(UpdateWalletResponse)
	err := c.cc.Invoke(ctx, "/wallets.WalletsService/UpdateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) GetWalletBalance(ctx context.Context, in *GetWalletBalanceRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error) {
	out := new(GetWalletBalanceResponse)
	err := c.cc.Invoke(ctx, "/wallets.WalletsService/GetWalletBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/wallets.WalletsService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) GetWalletLedgerAccount(ctx context.Context, in *GetWalletLedgerAccountRequest, opts ...grpc.CallOption) (*GetWalletLedgerAccountResponse, error) {
	out := new(GetWalletLedgerAccountResponse)
	err := c.cc.Invoke(ctx, "/wallets.WalletsService/GetWalletLedgerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsServiceClient) GetWalletOutgoingTransactionsLedgerAccount(ctx context.Context, in *GetWalletOutgoingTransactionsLedgerAccountRequest, opts ...grpc.CallOption) (*GetWalletOutgoingTransactionsLedgerAccountResponse, error) {
	out := new(GetWalletOutgoingTransactionsLedgerAccountResponse)
	err := c.cc.Invoke(ctx, "/wallets.WalletsService/GetWalletOutgoingTransactionsLedgerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletsServiceServer is the server API for WalletsService service.
// All implementations must embed UnimplementedWalletsServiceServer
// for forward compatibility
type WalletsServiceServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	GetWalletByID(context.Context, *GetWalletByIDRequest) (*GetWalletByIDResponse, error)
	GetWalletByEntityID(context.Context, *GetWalletByEntityIDRequest) (*GetWalletByEntityIDResponse, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
	GetWalletBalance(context.Context, *GetWalletBalanceRequest) (*GetWalletBalanceResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	GetWalletLedgerAccount(context.Context, *GetWalletLedgerAccountRequest) (*GetWalletLedgerAccountResponse, error)
	GetWalletOutgoingTransactionsLedgerAccount(context.Context, *GetWalletOutgoingTransactionsLedgerAccountRequest) (*GetWalletOutgoingTransactionsLedgerAccountResponse, error)
	mustEmbedUnimplementedWalletsServiceServer()
}

// UnimplementedWalletsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWalletsServiceServer struct {
}

func (UnimplementedWalletsServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletsServiceServer) GetWalletByID(context.Context, *GetWalletByIDRequest) (*GetWalletByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByID not implemented")
}
func (UnimplementedWalletsServiceServer) GetWalletByEntityID(context.Context, *GetWalletByEntityIDRequest) (*GetWalletByEntityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByEntityID not implemented")
}
func (UnimplementedWalletsServiceServer) UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (UnimplementedWalletsServiceServer) GetWalletBalance(context.Context, *GetWalletBalanceRequest) (*GetWalletBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletBalance not implemented")
}
func (UnimplementedWalletsServiceServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedWalletsServiceServer) GetWalletLedgerAccount(context.Context, *GetWalletLedgerAccountRequest) (*GetWalletLedgerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletLedgerAccount not implemented")
}
func (UnimplementedWalletsServiceServer) GetWalletOutgoingTransactionsLedgerAccount(context.Context, *GetWalletOutgoingTransactionsLedgerAccountRequest) (*GetWalletOutgoingTransactionsLedgerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletOutgoingTransactionsLedgerAccount not implemented")
}
func (UnimplementedWalletsServiceServer) mustEmbedUnimplementedWalletsServiceServer() {}

// UnsafeWalletsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletsServiceServer will
// result in compilation errors.
type UnsafeWalletsServiceServer interface {
	mustEmbedUnimplementedWalletsServiceServer()
}

func RegisterWalletsServiceServer(s grpc.ServiceRegistrar, srv WalletsServiceServer) {
	s.RegisterService(&WalletsService_ServiceDesc, srv)
}

func _WalletsService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallets.WalletsService/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_GetWalletByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).GetWalletByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallets.WalletsService/GetWalletByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).GetWalletByID(ctx, req.(*GetWalletByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_GetWalletByEntityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletByEntityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).GetWalletByEntityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallets.WalletsService/GetWalletByEntityID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).GetWalletByEntityID(ctx, req.(*GetWalletByEntityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallets.WalletsService/UpdateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).UpdateWallet(ctx, req.(*UpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_GetWalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).GetWalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallets.WalletsService/GetWalletBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).GetWalletBalance(ctx, req.(*GetWalletBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallets.WalletsService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_GetWalletLedgerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletLedgerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).GetWalletLedgerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallets.WalletsService/GetWalletLedgerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).GetWalletLedgerAccount(ctx, req.(*GetWalletLedgerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletsService_GetWalletOutgoingTransactionsLedgerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletOutgoingTransactionsLedgerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServiceServer).GetWalletOutgoingTransactionsLedgerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallets.WalletsService/GetWalletOutgoingTransactionsLedgerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServiceServer).GetWalletOutgoingTransactionsLedgerAccount(ctx, req.(*GetWalletOutgoingTransactionsLedgerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletsService_ServiceDesc is the grpc.ServiceDesc for WalletsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallets.WalletsService",
	HandlerType: (*WalletsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _WalletsService_CreateWallet_Handler,
		},
		{
			MethodName: "GetWalletByID",
			Handler:    _WalletsService_GetWalletByID_Handler,
		},
		{
			MethodName: "GetWalletByEntityID",
			Handler:    _WalletsService_GetWalletByEntityID_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _WalletsService_UpdateWallet_Handler,
		},
		{
			MethodName: "GetWalletBalance",
			Handler:    _WalletsService_GetWalletBalance_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _WalletsService_Transfer_Handler,
		},
		{
			MethodName: "GetWalletLedgerAccount",
			Handler:    _WalletsService_GetWalletLedgerAccount_Handler,
		},
		{
			MethodName: "GetWalletOutgoingTransactionsLedgerAccount",
			Handler:    _WalletsService_GetWalletOutgoingTransactionsLedgerAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/wallets/wallets.proto",
}
