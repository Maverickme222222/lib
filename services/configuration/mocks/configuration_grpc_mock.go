// Code generated by MockGen. DO NOT EDIT.
// Source: ../configuration_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	configuration "github.com/kappapay/backend/lib/golang/src/kappa/services/configuration"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockConfigurationServiceClient is a mock of ConfigurationServiceClient interface.
type MockConfigurationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationServiceClientMockRecorder
}

// MockConfigurationServiceClientMockRecorder is the mock recorder for MockConfigurationServiceClient.
type MockConfigurationServiceClientMockRecorder struct {
	mock *MockConfigurationServiceClient
}

// NewMockConfigurationServiceClient creates a new mock instance.
func NewMockConfigurationServiceClient(ctrl *gomock.Controller) *MockConfigurationServiceClient {
	mock := &MockConfigurationServiceClient{ctrl: ctrl}
	mock.recorder = &MockConfigurationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationServiceClient) EXPECT() *MockConfigurationServiceClientMockRecorder {
	return m.recorder
}

// CreateProvider mocks base method.
func (m *MockConfigurationServiceClient) CreateProvider(ctx context.Context, in *configuration.CreateProviderRequest, opts ...grpc.CallOption) (*configuration.CreateProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProvider", varargs...)
	ret0, _ := ret[0].(*configuration.CreateProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvider indicates an expected call of CreateProvider.
func (mr *MockConfigurationServiceClientMockRecorder) CreateProvider(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvider", reflect.TypeOf((*MockConfigurationServiceClient)(nil).CreateProvider), varargs...)
}

// CreateVendor mocks base method.
func (m *MockConfigurationServiceClient) CreateVendor(ctx context.Context, in *configuration.CreateVendorRequest, opts ...grpc.CallOption) (*configuration.CreateVendorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVendor", varargs...)
	ret0, _ := ret[0].(*configuration.CreateVendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVendor indicates an expected call of CreateVendor.
func (mr *MockConfigurationServiceClientMockRecorder) CreateVendor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVendor", reflect.TypeOf((*MockConfigurationServiceClient)(nil).CreateVendor), varargs...)
}

// CreateVendorHandle mocks base method.
func (m *MockConfigurationServiceClient) CreateVendorHandle(ctx context.Context, in *configuration.CreateVendorHandleRequest, opts ...grpc.CallOption) (*configuration.CreateVendorHandleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVendorHandle", varargs...)
	ret0, _ := ret[0].(*configuration.CreateVendorHandleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVendorHandle indicates an expected call of CreateVendorHandle.
func (mr *MockConfigurationServiceClientMockRecorder) CreateVendorHandle(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVendorHandle", reflect.TypeOf((*MockConfigurationServiceClient)(nil).CreateVendorHandle), varargs...)
}

// DeleteProvider mocks base method.
func (m *MockConfigurationServiceClient) DeleteProvider(ctx context.Context, in *configuration.DeleteProviderRequest, opts ...grpc.CallOption) (*configuration.DeleteProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProvider", varargs...)
	ret0, _ := ret[0].(*configuration.DeleteProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProvider indicates an expected call of DeleteProvider.
func (mr *MockConfigurationServiceClientMockRecorder) DeleteProvider(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvider", reflect.TypeOf((*MockConfigurationServiceClient)(nil).DeleteProvider), varargs...)
}

// DeleteVendor mocks base method.
func (m *MockConfigurationServiceClient) DeleteVendor(ctx context.Context, in *configuration.DeleteVendorRequest, opts ...grpc.CallOption) (*configuration.DeleteVendorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVendor", varargs...)
	ret0, _ := ret[0].(*configuration.DeleteVendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVendor indicates an expected call of DeleteVendor.
func (mr *MockConfigurationServiceClientMockRecorder) DeleteVendor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVendor", reflect.TypeOf((*MockConfigurationServiceClient)(nil).DeleteVendor), varargs...)
}

// GetBusinessRoleByID mocks base method.
func (m *MockConfigurationServiceClient) GetBusinessRoleByID(ctx context.Context, in *configuration.GetBusinessRoleByIDRequest, opts ...grpc.CallOption) (*configuration.GetBusinessRoleByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessRoleByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetBusinessRoleByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessRoleByID indicates an expected call of GetBusinessRoleByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetBusinessRoleByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessRoleByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetBusinessRoleByID), varargs...)
}

// GetBusinessRolesByCountryAndBusinessType mocks base method.
func (m *MockConfigurationServiceClient) GetBusinessRolesByCountryAndBusinessType(ctx context.Context, in *configuration.GetBusinessRolesByCountryAndBusinessTypeRequest, opts ...grpc.CallOption) (*configuration.GetBusinessRolesByCountryAndBusinessTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessRolesByCountryAndBusinessType", varargs...)
	ret0, _ := ret[0].(*configuration.GetBusinessRolesByCountryAndBusinessTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessRolesByCountryAndBusinessType indicates an expected call of GetBusinessRolesByCountryAndBusinessType.
func (mr *MockConfigurationServiceClientMockRecorder) GetBusinessRolesByCountryAndBusinessType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessRolesByCountryAndBusinessType", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetBusinessRolesByCountryAndBusinessType), varargs...)
}

// GetBusinessTypesByCountry mocks base method.
func (m *MockConfigurationServiceClient) GetBusinessTypesByCountry(ctx context.Context, in *configuration.GetBusinessTypesByCountryRequest, opts ...grpc.CallOption) (*configuration.GetBusinessTypesByCountryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessTypesByCountry", varargs...)
	ret0, _ := ret[0].(*configuration.GetBusinessTypesByCountryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessTypesByCountry indicates an expected call of GetBusinessTypesByCountry.
func (mr *MockConfigurationServiceClientMockRecorder) GetBusinessTypesByCountry(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessTypesByCountry", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetBusinessTypesByCountry), varargs...)
}

// GetCountriesList mocks base method.
func (m *MockConfigurationServiceClient) GetCountriesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*configuration.GetCountriesListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCountriesList", varargs...)
	ret0, _ := ret[0].(*configuration.GetCountriesListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountriesList indicates an expected call of GetCountriesList.
func (mr *MockConfigurationServiceClientMockRecorder) GetCountriesList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountriesList", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetCountriesList), varargs...)
}

// GetCountryByID mocks base method.
func (m *MockConfigurationServiceClient) GetCountryByID(ctx context.Context, in *configuration.GetCountryByIDRequest, opts ...grpc.CallOption) (*configuration.GetCountryByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCountryByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetCountryByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByID indicates an expected call of GetCountryByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetCountryByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetCountryByID), varargs...)
}

// GetCountryByISOCode mocks base method.
func (m *MockConfigurationServiceClient) GetCountryByISOCode(ctx context.Context, in *configuration.GetCountryByISOCodeRequest, opts ...grpc.CallOption) (*configuration.GetCountryByISOCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCountryByISOCode", varargs...)
	ret0, _ := ret[0].(*configuration.GetCountryByISOCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByISOCode indicates an expected call of GetCountryByISOCode.
func (mr *MockConfigurationServiceClientMockRecorder) GetCountryByISOCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByISOCode", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetCountryByISOCode), varargs...)
}

// GetCurrenciesList mocks base method.
func (m *MockConfigurationServiceClient) GetCurrenciesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*configuration.GetCurrenciesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrenciesList", varargs...)
	ret0, _ := ret[0].(*configuration.GetCurrenciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrenciesList indicates an expected call of GetCurrenciesList.
func (mr *MockConfigurationServiceClientMockRecorder) GetCurrenciesList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrenciesList", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetCurrenciesList), varargs...)
}

// GetCurrencyByID mocks base method.
func (m *MockConfigurationServiceClient) GetCurrencyByID(ctx context.Context, in *configuration.GetCurrencyByIDRequest, opts ...grpc.CallOption) (*configuration.GetCurrencyByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrencyByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetCurrencyByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByID indicates an expected call of GetCurrencyByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetCurrencyByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetCurrencyByID), varargs...)
}

// GetCurrencyByISOCode mocks base method.
func (m *MockConfigurationServiceClient) GetCurrencyByISOCode(ctx context.Context, in *configuration.GetCurrencyByISOCodeRequest, opts ...grpc.CallOption) (*configuration.GetCurrencyByISOCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrencyByISOCode", varargs...)
	ret0, _ := ret[0].(*configuration.GetCurrencyByISOCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByISOCode indicates an expected call of GetCurrencyByISOCode.
func (mr *MockConfigurationServiceClientMockRecorder) GetCurrencyByISOCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByISOCode", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetCurrencyByISOCode), varargs...)
}

// GetDocumentTypeByID mocks base method.
func (m *MockConfigurationServiceClient) GetDocumentTypeByID(ctx context.Context, in *configuration.GetDocumentTypeByIDRequest, opts ...grpc.CallOption) (*configuration.GetDocumentTypeByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentTypeByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetDocumentTypeByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTypeByID indicates an expected call of GetDocumentTypeByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetDocumentTypeByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTypeByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetDocumentTypeByID), varargs...)
}

// GetDocumentTypeByName mocks base method.
func (m *MockConfigurationServiceClient) GetDocumentTypeByName(ctx context.Context, in *configuration.GetDocumentTypeByNameRequest, opts ...grpc.CallOption) (*configuration.GetDocumentTypeByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentTypeByName", varargs...)
	ret0, _ := ret[0].(*configuration.GetDocumentTypeByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTypeByName indicates an expected call of GetDocumentTypeByName.
func (mr *MockConfigurationServiceClientMockRecorder) GetDocumentTypeByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTypeByName", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetDocumentTypeByName), varargs...)
}

// GetDocumentTypes mocks base method.
func (m *MockConfigurationServiceClient) GetDocumentTypes(ctx context.Context, in *configuration.GetDocumentTypesRequest, opts ...grpc.CallOption) (*configuration.GetDocumentTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentTypes", varargs...)
	ret0, _ := ret[0].(*configuration.GetDocumentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTypes indicates an expected call of GetDocumentTypes.
func (mr *MockConfigurationServiceClientMockRecorder) GetDocumentTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTypes", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetDocumentTypes), varargs...)
}

// GetIdentityTypeByID mocks base method.
func (m *MockConfigurationServiceClient) GetIdentityTypeByID(ctx context.Context, in *configuration.GetIdentityTypeByIDRequest, opts ...grpc.CallOption) (*configuration.GetIdentityTypeByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityTypeByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetIdentityTypeByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityTypeByID indicates an expected call of GetIdentityTypeByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetIdentityTypeByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityTypeByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetIdentityTypeByID), varargs...)
}

// GetIdentityTypeByName mocks base method.
func (m *MockConfigurationServiceClient) GetIdentityTypeByName(ctx context.Context, in *configuration.GetIdentityTypeByNameRequest, opts ...grpc.CallOption) (*configuration.GetIdentityTypeByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityTypeByName", varargs...)
	ret0, _ := ret[0].(*configuration.GetIdentityTypeByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityTypeByName indicates an expected call of GetIdentityTypeByName.
func (mr *MockConfigurationServiceClientMockRecorder) GetIdentityTypeByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityTypeByName", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetIdentityTypeByName), varargs...)
}

// GetIdentityTypes mocks base method.
func (m *MockConfigurationServiceClient) GetIdentityTypes(ctx context.Context, in *configuration.GetIdentityTypesRequest, opts ...grpc.CallOption) (*configuration.GetIdentityTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityTypes", varargs...)
	ret0, _ := ret[0].(*configuration.GetIdentityTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityTypes indicates an expected call of GetIdentityTypes.
func (mr *MockConfigurationServiceClientMockRecorder) GetIdentityTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityTypes", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetIdentityTypes), varargs...)
}

// GetLanguageByID mocks base method.
func (m *MockConfigurationServiceClient) GetLanguageByID(ctx context.Context, in *configuration.GetLanguageByIDRequest, opts ...grpc.CallOption) (*configuration.GetLanguageByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLanguageByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetLanguageByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguageByID indicates an expected call of GetLanguageByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetLanguageByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetLanguageByID), varargs...)
}

// GetLanguages mocks base method.
func (m *MockConfigurationServiceClient) GetLanguages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*configuration.GetLanguagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLanguages", varargs...)
	ret0, _ := ret[0].(*configuration.GetLanguagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguages indicates an expected call of GetLanguages.
func (mr *MockConfigurationServiceClientMockRecorder) GetLanguages(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguages", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetLanguages), varargs...)
}

// GetNAICSCategories mocks base method.
func (m *MockConfigurationServiceClient) GetNAICSCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*configuration.GetNaicsCategoriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNAICSCategories", varargs...)
	ret0, _ := ret[0].(*configuration.GetNaicsCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNAICSCategories indicates an expected call of GetNAICSCategories.
func (mr *MockConfigurationServiceClientMockRecorder) GetNAICSCategories(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNAICSCategories", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetNAICSCategories), varargs...)
}

// GetProviderByID mocks base method.
func (m *MockConfigurationServiceClient) GetProviderByID(ctx context.Context, in *configuration.GetProviderByIDRequest, opts ...grpc.CallOption) (*configuration.GetProviderByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProviderByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetProviderByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderByID indicates an expected call of GetProviderByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetProviderByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetProviderByID), varargs...)
}

// GetProviderHandleByID mocks base method.
func (m *MockConfigurationServiceClient) GetProviderHandleByID(ctx context.Context, in *configuration.GetProviderHandleByIDRequest, opts ...grpc.CallOption) (*configuration.GetProviderHandleByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProviderHandleByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetProviderHandleByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderHandleByID indicates an expected call of GetProviderHandleByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetProviderHandleByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderHandleByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetProviderHandleByID), varargs...)
}

// GetTransactionDocumentTypes mocks base method.
func (m *MockConfigurationServiceClient) GetTransactionDocumentTypes(ctx context.Context, in *configuration.GetTransactionDocumentTypesRequest, opts ...grpc.CallOption) (*configuration.GetTransactionDocumentTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionDocumentTypes", varargs...)
	ret0, _ := ret[0].(*configuration.GetTransactionDocumentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionDocumentTypes indicates an expected call of GetTransactionDocumentTypes.
func (mr *MockConfigurationServiceClientMockRecorder) GetTransactionDocumentTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionDocumentTypes", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetTransactionDocumentTypes), varargs...)
}

// GetTransactionInformationOptionsByType mocks base method.
func (m *MockConfigurationServiceClient) GetTransactionInformationOptionsByType(ctx context.Context, in *configuration.GetTransactionInformationOptionsByTypeRequest, opts ...grpc.CallOption) (*configuration.GetTransactionInformationOptionsByTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionInformationOptionsByType", varargs...)
	ret0, _ := ret[0].(*configuration.GetTransactionInformationOptionsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionInformationOptionsByType indicates an expected call of GetTransactionInformationOptionsByType.
func (mr *MockConfigurationServiceClientMockRecorder) GetTransactionInformationOptionsByType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionInformationOptionsByType", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetTransactionInformationOptionsByType), varargs...)
}

// GetTransactionInformationTypes mocks base method.
func (m *MockConfigurationServiceClient) GetTransactionInformationTypes(ctx context.Context, in *configuration.GetTransactionInformationTypesRequest, opts ...grpc.CallOption) (*configuration.GetTransactionInformationTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionInformationTypes", varargs...)
	ret0, _ := ret[0].(*configuration.GetTransactionInformationTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionInformationTypes indicates an expected call of GetTransactionInformationTypes.
func (mr *MockConfigurationServiceClientMockRecorder) GetTransactionInformationTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionInformationTypes", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetTransactionInformationTypes), varargs...)
}

// GetVendorByID mocks base method.
func (m *MockConfigurationServiceClient) GetVendorByID(ctx context.Context, in *configuration.GetVendorByIDRequest, opts ...grpc.CallOption) (*configuration.GetVendorByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVendorByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetVendorByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorByID indicates an expected call of GetVendorByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetVendorByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetVendorByID), varargs...)
}

// GetVendorByName mocks base method.
func (m *MockConfigurationServiceClient) GetVendorByName(ctx context.Context, in *configuration.GetVendorByNameRequest, opts ...grpc.CallOption) (*configuration.GetVendorByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVendorByName", varargs...)
	ret0, _ := ret[0].(*configuration.GetVendorByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorByName indicates an expected call of GetVendorByName.
func (mr *MockConfigurationServiceClientMockRecorder) GetVendorByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorByName", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetVendorByName), varargs...)
}

// GetVendorHandleByHandle mocks base method.
func (m *MockConfigurationServiceClient) GetVendorHandleByHandle(ctx context.Context, in *configuration.GetVendorHandleByHandleRequest, opts ...grpc.CallOption) (*configuration.GetVendorHandleByHandleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVendorHandleByHandle", varargs...)
	ret0, _ := ret[0].(*configuration.GetVendorHandleByHandleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorHandleByHandle indicates an expected call of GetVendorHandleByHandle.
func (mr *MockConfigurationServiceClientMockRecorder) GetVendorHandleByHandle(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorHandleByHandle", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetVendorHandleByHandle), varargs...)
}

// GetVendorHandleByID mocks base method.
func (m *MockConfigurationServiceClient) GetVendorHandleByID(ctx context.Context, in *configuration.GetVendorHandleByIDRequest, opts ...grpc.CallOption) (*configuration.GetVendorHandleByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVendorHandleByID", varargs...)
	ret0, _ := ret[0].(*configuration.GetVendorHandleByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorHandleByID indicates an expected call of GetVendorHandleByID.
func (mr *MockConfigurationServiceClientMockRecorder) GetVendorHandleByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorHandleByID", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetVendorHandleByID), varargs...)
}

// GetVendors mocks base method.
func (m *MockConfigurationServiceClient) GetVendors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*configuration.GetVendorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVendors", varargs...)
	ret0, _ := ret[0].(*configuration.GetVendorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendors indicates an expected call of GetVendors.
func (mr *MockConfigurationServiceClientMockRecorder) GetVendors(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendors", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetVendors), varargs...)
}

// UpdateProvider mocks base method.
func (m *MockConfigurationServiceClient) UpdateProvider(ctx context.Context, in *configuration.UpdateProviderRequest, opts ...grpc.CallOption) (*configuration.UpdateProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProvider", varargs...)
	ret0, _ := ret[0].(*configuration.UpdateProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvider indicates an expected call of UpdateProvider.
func (mr *MockConfigurationServiceClientMockRecorder) UpdateProvider(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvider", reflect.TypeOf((*MockConfigurationServiceClient)(nil).UpdateProvider), varargs...)
}

// UpdateVendor mocks base method.
func (m *MockConfigurationServiceClient) UpdateVendor(ctx context.Context, in *configuration.UpdateVendorRequest, opts ...grpc.CallOption) (*configuration.UpdateVendorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVendor", varargs...)
	ret0, _ := ret[0].(*configuration.UpdateVendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVendor indicates an expected call of UpdateVendor.
func (mr *MockConfigurationServiceClientMockRecorder) UpdateVendor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVendor", reflect.TypeOf((*MockConfigurationServiceClient)(nil).UpdateVendor), varargs...)
}

// MockConfigurationServiceServer is a mock of ConfigurationServiceServer interface.
type MockConfigurationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationServiceServerMockRecorder
}

// MockConfigurationServiceServerMockRecorder is the mock recorder for MockConfigurationServiceServer.
type MockConfigurationServiceServerMockRecorder struct {
	mock *MockConfigurationServiceServer
}

// NewMockConfigurationServiceServer creates a new mock instance.
func NewMockConfigurationServiceServer(ctrl *gomock.Controller) *MockConfigurationServiceServer {
	mock := &MockConfigurationServiceServer{ctrl: ctrl}
	mock.recorder = &MockConfigurationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationServiceServer) EXPECT() *MockConfigurationServiceServerMockRecorder {
	return m.recorder
}

// CreateProvider mocks base method.
func (m *MockConfigurationServiceServer) CreateProvider(arg0 context.Context, arg1 *configuration.CreateProviderRequest) (*configuration.CreateProviderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvider", arg0, arg1)
	ret0, _ := ret[0].(*configuration.CreateProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvider indicates an expected call of CreateProvider.
func (mr *MockConfigurationServiceServerMockRecorder) CreateProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvider", reflect.TypeOf((*MockConfigurationServiceServer)(nil).CreateProvider), arg0, arg1)
}

// CreateVendor mocks base method.
func (m *MockConfigurationServiceServer) CreateVendor(arg0 context.Context, arg1 *configuration.CreateVendorRequest) (*configuration.CreateVendorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVendor", arg0, arg1)
	ret0, _ := ret[0].(*configuration.CreateVendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVendor indicates an expected call of CreateVendor.
func (mr *MockConfigurationServiceServerMockRecorder) CreateVendor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVendor", reflect.TypeOf((*MockConfigurationServiceServer)(nil).CreateVendor), arg0, arg1)
}

// CreateVendorHandle mocks base method.
func (m *MockConfigurationServiceServer) CreateVendorHandle(arg0 context.Context, arg1 *configuration.CreateVendorHandleRequest) (*configuration.CreateVendorHandleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVendorHandle", arg0, arg1)
	ret0, _ := ret[0].(*configuration.CreateVendorHandleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVendorHandle indicates an expected call of CreateVendorHandle.
func (mr *MockConfigurationServiceServerMockRecorder) CreateVendorHandle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVendorHandle", reflect.TypeOf((*MockConfigurationServiceServer)(nil).CreateVendorHandle), arg0, arg1)
}

// DeleteProvider mocks base method.
func (m *MockConfigurationServiceServer) DeleteProvider(arg0 context.Context, arg1 *configuration.DeleteProviderRequest) (*configuration.DeleteProviderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvider", arg0, arg1)
	ret0, _ := ret[0].(*configuration.DeleteProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProvider indicates an expected call of DeleteProvider.
func (mr *MockConfigurationServiceServerMockRecorder) DeleteProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvider", reflect.TypeOf((*MockConfigurationServiceServer)(nil).DeleteProvider), arg0, arg1)
}

// DeleteVendor mocks base method.
func (m *MockConfigurationServiceServer) DeleteVendor(arg0 context.Context, arg1 *configuration.DeleteVendorRequest) (*configuration.DeleteVendorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVendor", arg0, arg1)
	ret0, _ := ret[0].(*configuration.DeleteVendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVendor indicates an expected call of DeleteVendor.
func (mr *MockConfigurationServiceServerMockRecorder) DeleteVendor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVendor", reflect.TypeOf((*MockConfigurationServiceServer)(nil).DeleteVendor), arg0, arg1)
}

// GetBusinessRoleByID mocks base method.
func (m *MockConfigurationServiceServer) GetBusinessRoleByID(arg0 context.Context, arg1 *configuration.GetBusinessRoleByIDRequest) (*configuration.GetBusinessRoleByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessRoleByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetBusinessRoleByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessRoleByID indicates an expected call of GetBusinessRoleByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetBusinessRoleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessRoleByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetBusinessRoleByID), arg0, arg1)
}

// GetBusinessRolesByCountryAndBusinessType mocks base method.
func (m *MockConfigurationServiceServer) GetBusinessRolesByCountryAndBusinessType(arg0 context.Context, arg1 *configuration.GetBusinessRolesByCountryAndBusinessTypeRequest) (*configuration.GetBusinessRolesByCountryAndBusinessTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessRolesByCountryAndBusinessType", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetBusinessRolesByCountryAndBusinessTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessRolesByCountryAndBusinessType indicates an expected call of GetBusinessRolesByCountryAndBusinessType.
func (mr *MockConfigurationServiceServerMockRecorder) GetBusinessRolesByCountryAndBusinessType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessRolesByCountryAndBusinessType", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetBusinessRolesByCountryAndBusinessType), arg0, arg1)
}

// GetBusinessTypesByCountry mocks base method.
func (m *MockConfigurationServiceServer) GetBusinessTypesByCountry(arg0 context.Context, arg1 *configuration.GetBusinessTypesByCountryRequest) (*configuration.GetBusinessTypesByCountryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessTypesByCountry", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetBusinessTypesByCountryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessTypesByCountry indicates an expected call of GetBusinessTypesByCountry.
func (mr *MockConfigurationServiceServerMockRecorder) GetBusinessTypesByCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessTypesByCountry", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetBusinessTypesByCountry), arg0, arg1)
}

// GetCountriesList mocks base method.
func (m *MockConfigurationServiceServer) GetCountriesList(arg0 context.Context, arg1 *emptypb.Empty) (*configuration.GetCountriesListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountriesList", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetCountriesListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountriesList indicates an expected call of GetCountriesList.
func (mr *MockConfigurationServiceServerMockRecorder) GetCountriesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountriesList", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetCountriesList), arg0, arg1)
}

// GetCountryByID mocks base method.
func (m *MockConfigurationServiceServer) GetCountryByID(arg0 context.Context, arg1 *configuration.GetCountryByIDRequest) (*configuration.GetCountryByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetCountryByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByID indicates an expected call of GetCountryByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetCountryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetCountryByID), arg0, arg1)
}

// GetCountryByISOCode mocks base method.
func (m *MockConfigurationServiceServer) GetCountryByISOCode(arg0 context.Context, arg1 *configuration.GetCountryByISOCodeRequest) (*configuration.GetCountryByISOCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryByISOCode", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetCountryByISOCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByISOCode indicates an expected call of GetCountryByISOCode.
func (mr *MockConfigurationServiceServerMockRecorder) GetCountryByISOCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByISOCode", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetCountryByISOCode), arg0, arg1)
}

// GetCurrenciesList mocks base method.
func (m *MockConfigurationServiceServer) GetCurrenciesList(arg0 context.Context, arg1 *emptypb.Empty) (*configuration.GetCurrenciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrenciesList", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetCurrenciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrenciesList indicates an expected call of GetCurrenciesList.
func (mr *MockConfigurationServiceServerMockRecorder) GetCurrenciesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrenciesList", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetCurrenciesList), arg0, arg1)
}

// GetCurrencyByID mocks base method.
func (m *MockConfigurationServiceServer) GetCurrencyByID(arg0 context.Context, arg1 *configuration.GetCurrencyByIDRequest) (*configuration.GetCurrencyByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetCurrencyByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByID indicates an expected call of GetCurrencyByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetCurrencyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetCurrencyByID), arg0, arg1)
}

// GetCurrencyByISOCode mocks base method.
func (m *MockConfigurationServiceServer) GetCurrencyByISOCode(arg0 context.Context, arg1 *configuration.GetCurrencyByISOCodeRequest) (*configuration.GetCurrencyByISOCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByISOCode", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetCurrencyByISOCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByISOCode indicates an expected call of GetCurrencyByISOCode.
func (mr *MockConfigurationServiceServerMockRecorder) GetCurrencyByISOCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByISOCode", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetCurrencyByISOCode), arg0, arg1)
}

// GetDocumentTypeByID mocks base method.
func (m *MockConfigurationServiceServer) GetDocumentTypeByID(arg0 context.Context, arg1 *configuration.GetDocumentTypeByIDRequest) (*configuration.GetDocumentTypeByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentTypeByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetDocumentTypeByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTypeByID indicates an expected call of GetDocumentTypeByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetDocumentTypeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTypeByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetDocumentTypeByID), arg0, arg1)
}

// GetDocumentTypeByName mocks base method.
func (m *MockConfigurationServiceServer) GetDocumentTypeByName(arg0 context.Context, arg1 *configuration.GetDocumentTypeByNameRequest) (*configuration.GetDocumentTypeByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentTypeByName", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetDocumentTypeByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTypeByName indicates an expected call of GetDocumentTypeByName.
func (mr *MockConfigurationServiceServerMockRecorder) GetDocumentTypeByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTypeByName", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetDocumentTypeByName), arg0, arg1)
}

// GetDocumentTypes mocks base method.
func (m *MockConfigurationServiceServer) GetDocumentTypes(arg0 context.Context, arg1 *configuration.GetDocumentTypesRequest) (*configuration.GetDocumentTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentTypes", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetDocumentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTypes indicates an expected call of GetDocumentTypes.
func (mr *MockConfigurationServiceServerMockRecorder) GetDocumentTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTypes", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetDocumentTypes), arg0, arg1)
}

// GetIdentityTypeByID mocks base method.
func (m *MockConfigurationServiceServer) GetIdentityTypeByID(arg0 context.Context, arg1 *configuration.GetIdentityTypeByIDRequest) (*configuration.GetIdentityTypeByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityTypeByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetIdentityTypeByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityTypeByID indicates an expected call of GetIdentityTypeByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetIdentityTypeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityTypeByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetIdentityTypeByID), arg0, arg1)
}

// GetIdentityTypeByName mocks base method.
func (m *MockConfigurationServiceServer) GetIdentityTypeByName(arg0 context.Context, arg1 *configuration.GetIdentityTypeByNameRequest) (*configuration.GetIdentityTypeByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityTypeByName", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetIdentityTypeByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityTypeByName indicates an expected call of GetIdentityTypeByName.
func (mr *MockConfigurationServiceServerMockRecorder) GetIdentityTypeByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityTypeByName", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetIdentityTypeByName), arg0, arg1)
}

// GetIdentityTypes mocks base method.
func (m *MockConfigurationServiceServer) GetIdentityTypes(arg0 context.Context, arg1 *configuration.GetIdentityTypesRequest) (*configuration.GetIdentityTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityTypes", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetIdentityTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityTypes indicates an expected call of GetIdentityTypes.
func (mr *MockConfigurationServiceServerMockRecorder) GetIdentityTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityTypes", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetIdentityTypes), arg0, arg1)
}

// GetLanguageByID mocks base method.
func (m *MockConfigurationServiceServer) GetLanguageByID(arg0 context.Context, arg1 *configuration.GetLanguageByIDRequest) (*configuration.GetLanguageByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetLanguageByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguageByID indicates an expected call of GetLanguageByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetLanguageByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetLanguageByID), arg0, arg1)
}

// GetLanguages mocks base method.
func (m *MockConfigurationServiceServer) GetLanguages(arg0 context.Context, arg1 *emptypb.Empty) (*configuration.GetLanguagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguages", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetLanguagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguages indicates an expected call of GetLanguages.
func (mr *MockConfigurationServiceServerMockRecorder) GetLanguages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguages", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetLanguages), arg0, arg1)
}

// GetNAICSCategories mocks base method.
func (m *MockConfigurationServiceServer) GetNAICSCategories(arg0 context.Context, arg1 *emptypb.Empty) (*configuration.GetNaicsCategoriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNAICSCategories", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetNaicsCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNAICSCategories indicates an expected call of GetNAICSCategories.
func (mr *MockConfigurationServiceServerMockRecorder) GetNAICSCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNAICSCategories", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetNAICSCategories), arg0, arg1)
}

// GetProviderByID mocks base method.
func (m *MockConfigurationServiceServer) GetProviderByID(arg0 context.Context, arg1 *configuration.GetProviderByIDRequest) (*configuration.GetProviderByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetProviderByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderByID indicates an expected call of GetProviderByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetProviderByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetProviderByID), arg0, arg1)
}

// GetProviderHandleByID mocks base method.
func (m *MockConfigurationServiceServer) GetProviderHandleByID(arg0 context.Context, arg1 *configuration.GetProviderHandleByIDRequest) (*configuration.GetProviderHandleByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderHandleByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetProviderHandleByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderHandleByID indicates an expected call of GetProviderHandleByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetProviderHandleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderHandleByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetProviderHandleByID), arg0, arg1)
}

// GetTransactionDocumentTypes mocks base method.
func (m *MockConfigurationServiceServer) GetTransactionDocumentTypes(arg0 context.Context, arg1 *configuration.GetTransactionDocumentTypesRequest) (*configuration.GetTransactionDocumentTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionDocumentTypes", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetTransactionDocumentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionDocumentTypes indicates an expected call of GetTransactionDocumentTypes.
func (mr *MockConfigurationServiceServerMockRecorder) GetTransactionDocumentTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionDocumentTypes", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetTransactionDocumentTypes), arg0, arg1)
}

// GetTransactionInformationOptionsByType mocks base method.
func (m *MockConfigurationServiceServer) GetTransactionInformationOptionsByType(arg0 context.Context, arg1 *configuration.GetTransactionInformationOptionsByTypeRequest) (*configuration.GetTransactionInformationOptionsByTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionInformationOptionsByType", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetTransactionInformationOptionsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionInformationOptionsByType indicates an expected call of GetTransactionInformationOptionsByType.
func (mr *MockConfigurationServiceServerMockRecorder) GetTransactionInformationOptionsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionInformationOptionsByType", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetTransactionInformationOptionsByType), arg0, arg1)
}

// GetTransactionInformationTypes mocks base method.
func (m *MockConfigurationServiceServer) GetTransactionInformationTypes(arg0 context.Context, arg1 *configuration.GetTransactionInformationTypesRequest) (*configuration.GetTransactionInformationTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionInformationTypes", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetTransactionInformationTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionInformationTypes indicates an expected call of GetTransactionInformationTypes.
func (mr *MockConfigurationServiceServerMockRecorder) GetTransactionInformationTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionInformationTypes", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetTransactionInformationTypes), arg0, arg1)
}

// GetVendorByID mocks base method.
func (m *MockConfigurationServiceServer) GetVendorByID(arg0 context.Context, arg1 *configuration.GetVendorByIDRequest) (*configuration.GetVendorByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetVendorByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorByID indicates an expected call of GetVendorByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetVendorByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetVendorByID), arg0, arg1)
}

// GetVendorByName mocks base method.
func (m *MockConfigurationServiceServer) GetVendorByName(arg0 context.Context, arg1 *configuration.GetVendorByNameRequest) (*configuration.GetVendorByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorByName", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetVendorByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorByName indicates an expected call of GetVendorByName.
func (mr *MockConfigurationServiceServerMockRecorder) GetVendorByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorByName", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetVendorByName), arg0, arg1)
}

// GetVendorHandleByHandle mocks base method.
func (m *MockConfigurationServiceServer) GetVendorHandleByHandle(arg0 context.Context, arg1 *configuration.GetVendorHandleByHandleRequest) (*configuration.GetVendorHandleByHandleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorHandleByHandle", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetVendorHandleByHandleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorHandleByHandle indicates an expected call of GetVendorHandleByHandle.
func (mr *MockConfigurationServiceServerMockRecorder) GetVendorHandleByHandle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorHandleByHandle", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetVendorHandleByHandle), arg0, arg1)
}

// GetVendorHandleByID mocks base method.
func (m *MockConfigurationServiceServer) GetVendorHandleByID(arg0 context.Context, arg1 *configuration.GetVendorHandleByIDRequest) (*configuration.GetVendorHandleByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorHandleByID", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetVendorHandleByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorHandleByID indicates an expected call of GetVendorHandleByID.
func (mr *MockConfigurationServiceServerMockRecorder) GetVendorHandleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorHandleByID", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetVendorHandleByID), arg0, arg1)
}

// GetVendors mocks base method.
func (m *MockConfigurationServiceServer) GetVendors(arg0 context.Context, arg1 *emptypb.Empty) (*configuration.GetVendorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendors", arg0, arg1)
	ret0, _ := ret[0].(*configuration.GetVendorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendors indicates an expected call of GetVendors.
func (mr *MockConfigurationServiceServerMockRecorder) GetVendors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendors", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetVendors), arg0, arg1)
}

// UpdateProvider mocks base method.
func (m *MockConfigurationServiceServer) UpdateProvider(arg0 context.Context, arg1 *configuration.UpdateProviderRequest) (*configuration.UpdateProviderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvider", arg0, arg1)
	ret0, _ := ret[0].(*configuration.UpdateProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvider indicates an expected call of UpdateProvider.
func (mr *MockConfigurationServiceServerMockRecorder) UpdateProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvider", reflect.TypeOf((*MockConfigurationServiceServer)(nil).UpdateProvider), arg0, arg1)
}

// UpdateVendor mocks base method.
func (m *MockConfigurationServiceServer) UpdateVendor(arg0 context.Context, arg1 *configuration.UpdateVendorRequest) (*configuration.UpdateVendorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVendor", arg0, arg1)
	ret0, _ := ret[0].(*configuration.UpdateVendorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVendor indicates an expected call of UpdateVendor.
func (mr *MockConfigurationServiceServerMockRecorder) UpdateVendor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVendor", reflect.TypeOf((*MockConfigurationServiceServer)(nil).UpdateVendor), arg0, arg1)
}

// mustEmbedUnimplementedConfigurationServiceServer mocks base method.
func (m *MockConfigurationServiceServer) mustEmbedUnimplementedConfigurationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigurationServiceServer")
}

// mustEmbedUnimplementedConfigurationServiceServer indicates an expected call of mustEmbedUnimplementedConfigurationServiceServer.
func (mr *MockConfigurationServiceServerMockRecorder) mustEmbedUnimplementedConfigurationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigurationServiceServer", reflect.TypeOf((*MockConfigurationServiceServer)(nil).mustEmbedUnimplementedConfigurationServiceServer))
}

// MockUnsafeConfigurationServiceServer is a mock of UnsafeConfigurationServiceServer interface.
type MockUnsafeConfigurationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeConfigurationServiceServerMockRecorder
}

// MockUnsafeConfigurationServiceServerMockRecorder is the mock recorder for MockUnsafeConfigurationServiceServer.
type MockUnsafeConfigurationServiceServerMockRecorder struct {
	mock *MockUnsafeConfigurationServiceServer
}

// NewMockUnsafeConfigurationServiceServer creates a new mock instance.
func NewMockUnsafeConfigurationServiceServer(ctrl *gomock.Controller) *MockUnsafeConfigurationServiceServer {
	mock := &MockUnsafeConfigurationServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeConfigurationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeConfigurationServiceServer) EXPECT() *MockUnsafeConfigurationServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedConfigurationServiceServer mocks base method.
func (m *MockUnsafeConfigurationServiceServer) mustEmbedUnimplementedConfigurationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigurationServiceServer")
}

// mustEmbedUnimplementedConfigurationServiceServer indicates an expected call of mustEmbedUnimplementedConfigurationServiceServer.
func (mr *MockUnsafeConfigurationServiceServerMockRecorder) mustEmbedUnimplementedConfigurationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigurationServiceServer", reflect.TypeOf((*MockUnsafeConfigurationServiceServer)(nil).mustEmbedUnimplementedConfigurationServiceServer))
}
