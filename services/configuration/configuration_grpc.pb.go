// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/configuration/configuration.proto

package configuration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigurationServiceClient is the client API for ConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationServiceClient interface {
	GetCountryByID(ctx context.Context, in *GetCountryByIDRequest, opts ...grpc.CallOption) (*GetCountryByIDResponse, error)
	GetCountryByISOCode(ctx context.Context, in *GetCountryByISOCodeRequest, opts ...grpc.CallOption) (*GetCountryByISOCodeResponse, error)
	GetCurrencyByID(ctx context.Context, in *GetCurrencyByIDRequest, opts ...grpc.CallOption) (*GetCurrencyByIDResponse, error)
	GetCurrencyByISOCode(ctx context.Context, in *GetCurrencyByISOCodeRequest, opts ...grpc.CallOption) (*GetCurrencyByISOCodeResponse, error)
	GetCurrenciesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrenciesResponse, error)
	GetCountriesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCountriesListResponse, error)
	GetNAICSCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNaicsCategoriesResponse, error)
	GetBusinessTypesByCountry(ctx context.Context, in *GetBusinessTypesByCountryRequest, opts ...grpc.CallOption) (*GetBusinessTypesByCountryResponse, error)
	GetBusinessRolesByCountryAndBusinessType(ctx context.Context, in *GetBusinessRolesByCountryAndBusinessTypeRequest, opts ...grpc.CallOption) (*GetBusinessRolesByCountryAndBusinessTypeResponse, error)
	GetBusinessRoleByID(ctx context.Context, in *GetBusinessRoleByIDRequest, opts ...grpc.CallOption) (*GetBusinessRoleByIDResponse, error)
	GetVendors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVendorsResponse, error)
	GetVendorByID(ctx context.Context, in *GetVendorByIDRequest, opts ...grpc.CallOption) (*GetVendorByIDResponse, error)
	GetVendorByName(ctx context.Context, in *GetVendorByNameRequest, opts ...grpc.CallOption) (*GetVendorByNameResponse, error)
	GetVendorHandleByID(ctx context.Context, in *GetVendorHandleByIDRequest, opts ...grpc.CallOption) (*GetVendorHandleByIDResponse, error)
	GetVendorHandleByHandle(ctx context.Context, in *GetVendorHandleByHandleRequest, opts ...grpc.CallOption) (*GetVendorHandleByHandleResponse, error)
	CreateVendor(ctx context.Context, in *CreateVendorRequest, opts ...grpc.CallOption) (*CreateVendorResponse, error)
	CreateVendorHandle(ctx context.Context, in *CreateVendorHandleRequest, opts ...grpc.CallOption) (*CreateVendorHandleResponse, error)
	UpdateVendor(ctx context.Context, in *UpdateVendorRequest, opts ...grpc.CallOption) (*UpdateVendorResponse, error)
	DeleteVendor(ctx context.Context, in *DeleteVendorRequest, opts ...grpc.CallOption) (*DeleteVendorResponse, error)
	GetDocumentTypes(ctx context.Context, in *GetDocumentTypesRequest, opts ...grpc.CallOption) (*GetDocumentTypesResponse, error)
	GetDocumentTypeByID(ctx context.Context, in *GetDocumentTypeByIDRequest, opts ...grpc.CallOption) (*GetDocumentTypeByIDResponse, error)
	GetDocumentTypeByName(ctx context.Context, in *GetDocumentTypeByNameRequest, opts ...grpc.CallOption) (*GetDocumentTypeByNameResponse, error)
	GetLanguages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLanguagesResponse, error)
	GetLanguageByID(ctx context.Context, in *GetLanguageByIDRequest, opts ...grpc.CallOption) (*GetLanguageByIDResponse, error)
	GetProviderByID(ctx context.Context, in *GetProviderByIDRequest, opts ...grpc.CallOption) (*GetProviderByIDResponse, error)
	CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*CreateProviderResponse, error)
	UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*UpdateProviderResponse, error)
	DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error)
	GetProviderHandleByID(ctx context.Context, in *GetProviderHandleByIDRequest, opts ...grpc.CallOption) (*GetProviderHandleByIDResponse, error)
	GetIdentityTypes(ctx context.Context, in *GetIdentityTypesRequest, opts ...grpc.CallOption) (*GetIdentityTypesResponse, error)
	GetIdentityTypeByID(ctx context.Context, in *GetIdentityTypeByIDRequest, opts ...grpc.CallOption) (*GetIdentityTypeByIDResponse, error)
	GetIdentityTypeByName(ctx context.Context, in *GetIdentityTypeByNameRequest, opts ...grpc.CallOption) (*GetIdentityTypeByNameResponse, error)
	GetTransactionDocumentTypes(ctx context.Context, in *GetTransactionDocumentTypesRequest, opts ...grpc.CallOption) (*GetTransactionDocumentTypesResponse, error)
	GetTransactionInformationTypes(ctx context.Context, in *GetTransactionInformationTypesRequest, opts ...grpc.CallOption) (*GetTransactionInformationTypesResponse, error)
	GetTransactionInformationOptionsByType(ctx context.Context, in *GetTransactionInformationOptionsByTypeRequest, opts ...grpc.CallOption) (*GetTransactionInformationOptionsByTypeResponse, error)
}

type configurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationServiceClient(cc grpc.ClientConnInterface) ConfigurationServiceClient {
	return &configurationServiceClient{cc}
}

func (c *configurationServiceClient) GetCountryByID(ctx context.Context, in *GetCountryByIDRequest, opts ...grpc.CallOption) (*GetCountryByIDResponse, error) {
	out := new(GetCountryByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetCountryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetCountryByISOCode(ctx context.Context, in *GetCountryByISOCodeRequest, opts ...grpc.CallOption) (*GetCountryByISOCodeResponse, error) {
	out := new(GetCountryByISOCodeResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetCountryByISOCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetCurrencyByID(ctx context.Context, in *GetCurrencyByIDRequest, opts ...grpc.CallOption) (*GetCurrencyByIDResponse, error) {
	out := new(GetCurrencyByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetCurrencyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetCurrencyByISOCode(ctx context.Context, in *GetCurrencyByISOCodeRequest, opts ...grpc.CallOption) (*GetCurrencyByISOCodeResponse, error) {
	out := new(GetCurrencyByISOCodeResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetCurrencyByISOCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetCurrenciesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrenciesResponse, error) {
	out := new(GetCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetCurrenciesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetCountriesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCountriesListResponse, error) {
	out := new(GetCountriesListResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetCountriesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetNAICSCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNaicsCategoriesResponse, error) {
	out := new(GetNaicsCategoriesResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetNAICSCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetBusinessTypesByCountry(ctx context.Context, in *GetBusinessTypesByCountryRequest, opts ...grpc.CallOption) (*GetBusinessTypesByCountryResponse, error) {
	out := new(GetBusinessTypesByCountryResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetBusinessTypesByCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetBusinessRolesByCountryAndBusinessType(ctx context.Context, in *GetBusinessRolesByCountryAndBusinessTypeRequest, opts ...grpc.CallOption) (*GetBusinessRolesByCountryAndBusinessTypeResponse, error) {
	out := new(GetBusinessRolesByCountryAndBusinessTypeResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetBusinessRolesByCountryAndBusinessType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetBusinessRoleByID(ctx context.Context, in *GetBusinessRoleByIDRequest, opts ...grpc.CallOption) (*GetBusinessRoleByIDResponse, error) {
	out := new(GetBusinessRoleByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetBusinessRoleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetVendors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVendorsResponse, error) {
	out := new(GetVendorsResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetVendors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetVendorByID(ctx context.Context, in *GetVendorByIDRequest, opts ...grpc.CallOption) (*GetVendorByIDResponse, error) {
	out := new(GetVendorByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetVendorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetVendorByName(ctx context.Context, in *GetVendorByNameRequest, opts ...grpc.CallOption) (*GetVendorByNameResponse, error) {
	out := new(GetVendorByNameResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetVendorByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetVendorHandleByID(ctx context.Context, in *GetVendorHandleByIDRequest, opts ...grpc.CallOption) (*GetVendorHandleByIDResponse, error) {
	out := new(GetVendorHandleByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetVendorHandleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetVendorHandleByHandle(ctx context.Context, in *GetVendorHandleByHandleRequest, opts ...grpc.CallOption) (*GetVendorHandleByHandleResponse, error) {
	out := new(GetVendorHandleByHandleResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetVendorHandleByHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) CreateVendor(ctx context.Context, in *CreateVendorRequest, opts ...grpc.CallOption) (*CreateVendorResponse, error) {
	out := new(CreateVendorResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/CreateVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) CreateVendorHandle(ctx context.Context, in *CreateVendorHandleRequest, opts ...grpc.CallOption) (*CreateVendorHandleResponse, error) {
	out := new(CreateVendorHandleResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/CreateVendorHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) UpdateVendor(ctx context.Context, in *UpdateVendorRequest, opts ...grpc.CallOption) (*UpdateVendorResponse, error) {
	out := new(UpdateVendorResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/UpdateVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) DeleteVendor(ctx context.Context, in *DeleteVendorRequest, opts ...grpc.CallOption) (*DeleteVendorResponse, error) {
	out := new(DeleteVendorResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/DeleteVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetDocumentTypes(ctx context.Context, in *GetDocumentTypesRequest, opts ...grpc.CallOption) (*GetDocumentTypesResponse, error) {
	out := new(GetDocumentTypesResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetDocumentTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetDocumentTypeByID(ctx context.Context, in *GetDocumentTypeByIDRequest, opts ...grpc.CallOption) (*GetDocumentTypeByIDResponse, error) {
	out := new(GetDocumentTypeByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetDocumentTypeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetDocumentTypeByName(ctx context.Context, in *GetDocumentTypeByNameRequest, opts ...grpc.CallOption) (*GetDocumentTypeByNameResponse, error) {
	out := new(GetDocumentTypeByNameResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetDocumentTypeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetLanguages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLanguagesResponse, error) {
	out := new(GetLanguagesResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetLanguageByID(ctx context.Context, in *GetLanguageByIDRequest, opts ...grpc.CallOption) (*GetLanguageByIDResponse, error) {
	out := new(GetLanguageByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetLanguageByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetProviderByID(ctx context.Context, in *GetProviderByIDRequest, opts ...grpc.CallOption) (*GetProviderByIDResponse, error) {
	out := new(GetProviderByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetProviderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*CreateProviderResponse, error) {
	out := new(CreateProviderResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/CreateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*UpdateProviderResponse, error) {
	out := new(UpdateProviderResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/UpdateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error) {
	out := new(DeleteProviderResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/DeleteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetProviderHandleByID(ctx context.Context, in *GetProviderHandleByIDRequest, opts ...grpc.CallOption) (*GetProviderHandleByIDResponse, error) {
	out := new(GetProviderHandleByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetProviderHandleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetIdentityTypes(ctx context.Context, in *GetIdentityTypesRequest, opts ...grpc.CallOption) (*GetIdentityTypesResponse, error) {
	out := new(GetIdentityTypesResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetIdentityTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetIdentityTypeByID(ctx context.Context, in *GetIdentityTypeByIDRequest, opts ...grpc.CallOption) (*GetIdentityTypeByIDResponse, error) {
	out := new(GetIdentityTypeByIDResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetIdentityTypeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetIdentityTypeByName(ctx context.Context, in *GetIdentityTypeByNameRequest, opts ...grpc.CallOption) (*GetIdentityTypeByNameResponse, error) {
	out := new(GetIdentityTypeByNameResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetIdentityTypeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetTransactionDocumentTypes(ctx context.Context, in *GetTransactionDocumentTypesRequest, opts ...grpc.CallOption) (*GetTransactionDocumentTypesResponse, error) {
	out := new(GetTransactionDocumentTypesResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetTransactionDocumentTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetTransactionInformationTypes(ctx context.Context, in *GetTransactionInformationTypesRequest, opts ...grpc.CallOption) (*GetTransactionInformationTypesResponse, error) {
	out := new(GetTransactionInformationTypesResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetTransactionInformationTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetTransactionInformationOptionsByType(ctx context.Context, in *GetTransactionInformationOptionsByTypeRequest, opts ...grpc.CallOption) (*GetTransactionInformationOptionsByTypeResponse, error) {
	out := new(GetTransactionInformationOptionsByTypeResponse)
	err := c.cc.Invoke(ctx, "/configuration.ConfigurationService/GetTransactionInformationOptionsByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServiceServer is the server API for ConfigurationService service.
// All implementations must embed UnimplementedConfigurationServiceServer
// for forward compatibility
type ConfigurationServiceServer interface {
	GetCountryByID(context.Context, *GetCountryByIDRequest) (*GetCountryByIDResponse, error)
	GetCountryByISOCode(context.Context, *GetCountryByISOCodeRequest) (*GetCountryByISOCodeResponse, error)
	GetCurrencyByID(context.Context, *GetCurrencyByIDRequest) (*GetCurrencyByIDResponse, error)
	GetCurrencyByISOCode(context.Context, *GetCurrencyByISOCodeRequest) (*GetCurrencyByISOCodeResponse, error)
	GetCurrenciesList(context.Context, *emptypb.Empty) (*GetCurrenciesResponse, error)
	GetCountriesList(context.Context, *emptypb.Empty) (*GetCountriesListResponse, error)
	GetNAICSCategories(context.Context, *emptypb.Empty) (*GetNaicsCategoriesResponse, error)
	GetBusinessTypesByCountry(context.Context, *GetBusinessTypesByCountryRequest) (*GetBusinessTypesByCountryResponse, error)
	GetBusinessRolesByCountryAndBusinessType(context.Context, *GetBusinessRolesByCountryAndBusinessTypeRequest) (*GetBusinessRolesByCountryAndBusinessTypeResponse, error)
	GetBusinessRoleByID(context.Context, *GetBusinessRoleByIDRequest) (*GetBusinessRoleByIDResponse, error)
	GetVendors(context.Context, *emptypb.Empty) (*GetVendorsResponse, error)
	GetVendorByID(context.Context, *GetVendorByIDRequest) (*GetVendorByIDResponse, error)
	GetVendorByName(context.Context, *GetVendorByNameRequest) (*GetVendorByNameResponse, error)
	GetVendorHandleByID(context.Context, *GetVendorHandleByIDRequest) (*GetVendorHandleByIDResponse, error)
	GetVendorHandleByHandle(context.Context, *GetVendorHandleByHandleRequest) (*GetVendorHandleByHandleResponse, error)
	CreateVendor(context.Context, *CreateVendorRequest) (*CreateVendorResponse, error)
	CreateVendorHandle(context.Context, *CreateVendorHandleRequest) (*CreateVendorHandleResponse, error)
	UpdateVendor(context.Context, *UpdateVendorRequest) (*UpdateVendorResponse, error)
	DeleteVendor(context.Context, *DeleteVendorRequest) (*DeleteVendorResponse, error)
	GetDocumentTypes(context.Context, *GetDocumentTypesRequest) (*GetDocumentTypesResponse, error)
	GetDocumentTypeByID(context.Context, *GetDocumentTypeByIDRequest) (*GetDocumentTypeByIDResponse, error)
	GetDocumentTypeByName(context.Context, *GetDocumentTypeByNameRequest) (*GetDocumentTypeByNameResponse, error)
	GetLanguages(context.Context, *emptypb.Empty) (*GetLanguagesResponse, error)
	GetLanguageByID(context.Context, *GetLanguageByIDRequest) (*GetLanguageByIDResponse, error)
	GetProviderByID(context.Context, *GetProviderByIDRequest) (*GetProviderByIDResponse, error)
	CreateProvider(context.Context, *CreateProviderRequest) (*CreateProviderResponse, error)
	UpdateProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error)
	DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error)
	GetProviderHandleByID(context.Context, *GetProviderHandleByIDRequest) (*GetProviderHandleByIDResponse, error)
	GetIdentityTypes(context.Context, *GetIdentityTypesRequest) (*GetIdentityTypesResponse, error)
	GetIdentityTypeByID(context.Context, *GetIdentityTypeByIDRequest) (*GetIdentityTypeByIDResponse, error)
	GetIdentityTypeByName(context.Context, *GetIdentityTypeByNameRequest) (*GetIdentityTypeByNameResponse, error)
	GetTransactionDocumentTypes(context.Context, *GetTransactionDocumentTypesRequest) (*GetTransactionDocumentTypesResponse, error)
	GetTransactionInformationTypes(context.Context, *GetTransactionInformationTypesRequest) (*GetTransactionInformationTypesResponse, error)
	GetTransactionInformationOptionsByType(context.Context, *GetTransactionInformationOptionsByTypeRequest) (*GetTransactionInformationOptionsByTypeResponse, error)
	mustEmbedUnimplementedConfigurationServiceServer()
}

// UnimplementedConfigurationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigurationServiceServer struct {
}

func (UnimplementedConfigurationServiceServer) GetCountryByID(context.Context, *GetCountryByIDRequest) (*GetCountryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryByID not implemented")
}
func (UnimplementedConfigurationServiceServer) GetCountryByISOCode(context.Context, *GetCountryByISOCodeRequest) (*GetCountryByISOCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryByISOCode not implemented")
}
func (UnimplementedConfigurationServiceServer) GetCurrencyByID(context.Context, *GetCurrencyByIDRequest) (*GetCurrencyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyByID not implemented")
}
func (UnimplementedConfigurationServiceServer) GetCurrencyByISOCode(context.Context, *GetCurrencyByISOCodeRequest) (*GetCurrencyByISOCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyByISOCode not implemented")
}
func (UnimplementedConfigurationServiceServer) GetCurrenciesList(context.Context, *emptypb.Empty) (*GetCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrenciesList not implemented")
}
func (UnimplementedConfigurationServiceServer) GetCountriesList(context.Context, *emptypb.Empty) (*GetCountriesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountriesList not implemented")
}
func (UnimplementedConfigurationServiceServer) GetNAICSCategories(context.Context, *emptypb.Empty) (*GetNaicsCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNAICSCategories not implemented")
}
func (UnimplementedConfigurationServiceServer) GetBusinessTypesByCountry(context.Context, *GetBusinessTypesByCountryRequest) (*GetBusinessTypesByCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessTypesByCountry not implemented")
}
func (UnimplementedConfigurationServiceServer) GetBusinessRolesByCountryAndBusinessType(context.Context, *GetBusinessRolesByCountryAndBusinessTypeRequest) (*GetBusinessRolesByCountryAndBusinessTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessRolesByCountryAndBusinessType not implemented")
}
func (UnimplementedConfigurationServiceServer) GetBusinessRoleByID(context.Context, *GetBusinessRoleByIDRequest) (*GetBusinessRoleByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessRoleByID not implemented")
}
func (UnimplementedConfigurationServiceServer) GetVendors(context.Context, *emptypb.Empty) (*GetVendorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendors not implemented")
}
func (UnimplementedConfigurationServiceServer) GetVendorByID(context.Context, *GetVendorByIDRequest) (*GetVendorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorByID not implemented")
}
func (UnimplementedConfigurationServiceServer) GetVendorByName(context.Context, *GetVendorByNameRequest) (*GetVendorByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorByName not implemented")
}
func (UnimplementedConfigurationServiceServer) GetVendorHandleByID(context.Context, *GetVendorHandleByIDRequest) (*GetVendorHandleByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorHandleByID not implemented")
}
func (UnimplementedConfigurationServiceServer) GetVendorHandleByHandle(context.Context, *GetVendorHandleByHandleRequest) (*GetVendorHandleByHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorHandleByHandle not implemented")
}
func (UnimplementedConfigurationServiceServer) CreateVendor(context.Context, *CreateVendorRequest) (*CreateVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVendor not implemented")
}
func (UnimplementedConfigurationServiceServer) CreateVendorHandle(context.Context, *CreateVendorHandleRequest) (*CreateVendorHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVendorHandle not implemented")
}
func (UnimplementedConfigurationServiceServer) UpdateVendor(context.Context, *UpdateVendorRequest) (*UpdateVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVendor not implemented")
}
func (UnimplementedConfigurationServiceServer) DeleteVendor(context.Context, *DeleteVendorRequest) (*DeleteVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVendor not implemented")
}
func (UnimplementedConfigurationServiceServer) GetDocumentTypes(context.Context, *GetDocumentTypesRequest) (*GetDocumentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentTypes not implemented")
}
func (UnimplementedConfigurationServiceServer) GetDocumentTypeByID(context.Context, *GetDocumentTypeByIDRequest) (*GetDocumentTypeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentTypeByID not implemented")
}
func (UnimplementedConfigurationServiceServer) GetDocumentTypeByName(context.Context, *GetDocumentTypeByNameRequest) (*GetDocumentTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentTypeByName not implemented")
}
func (UnimplementedConfigurationServiceServer) GetLanguages(context.Context, *emptypb.Empty) (*GetLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguages not implemented")
}
func (UnimplementedConfigurationServiceServer) GetLanguageByID(context.Context, *GetLanguageByIDRequest) (*GetLanguageByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageByID not implemented")
}
func (UnimplementedConfigurationServiceServer) GetProviderByID(context.Context, *GetProviderByIDRequest) (*GetProviderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderByID not implemented")
}
func (UnimplementedConfigurationServiceServer) CreateProvider(context.Context, *CreateProviderRequest) (*CreateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedConfigurationServiceServer) UpdateProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProvider not implemented")
}
func (UnimplementedConfigurationServiceServer) DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedConfigurationServiceServer) GetProviderHandleByID(context.Context, *GetProviderHandleByIDRequest) (*GetProviderHandleByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderHandleByID not implemented")
}
func (UnimplementedConfigurationServiceServer) GetIdentityTypes(context.Context, *GetIdentityTypesRequest) (*GetIdentityTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityTypes not implemented")
}
func (UnimplementedConfigurationServiceServer) GetIdentityTypeByID(context.Context, *GetIdentityTypeByIDRequest) (*GetIdentityTypeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityTypeByID not implemented")
}
func (UnimplementedConfigurationServiceServer) GetIdentityTypeByName(context.Context, *GetIdentityTypeByNameRequest) (*GetIdentityTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityTypeByName not implemented")
}
func (UnimplementedConfigurationServiceServer) GetTransactionDocumentTypes(context.Context, *GetTransactionDocumentTypesRequest) (*GetTransactionDocumentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionDocumentTypes not implemented")
}
func (UnimplementedConfigurationServiceServer) GetTransactionInformationTypes(context.Context, *GetTransactionInformationTypesRequest) (*GetTransactionInformationTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInformationTypes not implemented")
}
func (UnimplementedConfigurationServiceServer) GetTransactionInformationOptionsByType(context.Context, *GetTransactionInformationOptionsByTypeRequest) (*GetTransactionInformationOptionsByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInformationOptionsByType not implemented")
}
func (UnimplementedConfigurationServiceServer) mustEmbedUnimplementedConfigurationServiceServer() {}

// UnsafeConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServiceServer will
// result in compilation errors.
type UnsafeConfigurationServiceServer interface {
	mustEmbedUnimplementedConfigurationServiceServer()
}

func RegisterConfigurationServiceServer(s grpc.ServiceRegistrar, srv ConfigurationServiceServer) {
	s.RegisterService(&ConfigurationService_ServiceDesc, srv)
}

func _ConfigurationService_GetCountryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetCountryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetCountryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetCountryByID(ctx, req.(*GetCountryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetCountryByISOCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryByISOCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetCountryByISOCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetCountryByISOCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetCountryByISOCode(ctx, req.(*GetCountryByISOCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetCurrencyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetCurrencyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetCurrencyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetCurrencyByID(ctx, req.(*GetCurrencyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetCurrencyByISOCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyByISOCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetCurrencyByISOCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetCurrencyByISOCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetCurrencyByISOCode(ctx, req.(*GetCurrencyByISOCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetCurrenciesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetCurrenciesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetCurrenciesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetCurrenciesList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetCountriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetCountriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetCountriesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetCountriesList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetNAICSCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetNAICSCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetNAICSCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetNAICSCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetBusinessTypesByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessTypesByCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetBusinessTypesByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetBusinessTypesByCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetBusinessTypesByCountry(ctx, req.(*GetBusinessTypesByCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetBusinessRolesByCountryAndBusinessType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessRolesByCountryAndBusinessTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetBusinessRolesByCountryAndBusinessType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetBusinessRolesByCountryAndBusinessType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetBusinessRolesByCountryAndBusinessType(ctx, req.(*GetBusinessRolesByCountryAndBusinessTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetBusinessRoleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessRoleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetBusinessRoleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetBusinessRoleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetBusinessRoleByID(ctx, req.(*GetBusinessRoleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetVendors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetVendors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetVendors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetVendors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetVendorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetVendorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetVendorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetVendorByID(ctx, req.(*GetVendorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetVendorByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetVendorByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetVendorByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetVendorByName(ctx, req.(*GetVendorByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetVendorHandleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorHandleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetVendorHandleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetVendorHandleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetVendorHandleByID(ctx, req.(*GetVendorHandleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetVendorHandleByHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorHandleByHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetVendorHandleByHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetVendorHandleByHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetVendorHandleByHandle(ctx, req.(*GetVendorHandleByHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_CreateVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).CreateVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/CreateVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).CreateVendor(ctx, req.(*CreateVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_CreateVendorHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVendorHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).CreateVendorHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/CreateVendorHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).CreateVendorHandle(ctx, req.(*CreateVendorHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_UpdateVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).UpdateVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/UpdateVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).UpdateVendor(ctx, req.(*UpdateVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_DeleteVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).DeleteVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/DeleteVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).DeleteVendor(ctx, req.(*DeleteVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetDocumentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetDocumentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetDocumentTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetDocumentTypes(ctx, req.(*GetDocumentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetDocumentTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentTypeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetDocumentTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetDocumentTypeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetDocumentTypeByID(ctx, req.(*GetDocumentTypeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetDocumentTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetDocumentTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetDocumentTypeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetDocumentTypeByName(ctx, req.(*GetDocumentTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetLanguages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetLanguageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetLanguageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetLanguageByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetLanguageByID(ctx, req.(*GetLanguageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetProviderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetProviderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetProviderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetProviderByID(ctx, req.(*GetProviderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/CreateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).CreateProvider(ctx, req.(*CreateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_UpdateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).UpdateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/UpdateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).UpdateProvider(ctx, req.(*UpdateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/DeleteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).DeleteProvider(ctx, req.(*DeleteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetProviderHandleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderHandleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetProviderHandleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetProviderHandleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetProviderHandleByID(ctx, req.(*GetProviderHandleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetIdentityTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetIdentityTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetIdentityTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetIdentityTypes(ctx, req.(*GetIdentityTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetIdentityTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityTypeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetIdentityTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetIdentityTypeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetIdentityTypeByID(ctx, req.(*GetIdentityTypeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetIdentityTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetIdentityTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetIdentityTypeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetIdentityTypeByName(ctx, req.(*GetIdentityTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetTransactionDocumentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionDocumentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetTransactionDocumentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetTransactionDocumentTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetTransactionDocumentTypes(ctx, req.(*GetTransactionDocumentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetTransactionInformationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionInformationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetTransactionInformationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetTransactionInformationTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetTransactionInformationTypes(ctx, req.(*GetTransactionInformationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetTransactionInformationOptionsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionInformationOptionsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetTransactionInformationOptionsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.ConfigurationService/GetTransactionInformationOptionsByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetTransactionInformationOptionsByType(ctx, req.(*GetTransactionInformationOptionsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigurationService_ServiceDesc is the grpc.ServiceDesc for ConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configuration.ConfigurationService",
	HandlerType: (*ConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCountryByID",
			Handler:    _ConfigurationService_GetCountryByID_Handler,
		},
		{
			MethodName: "GetCountryByISOCode",
			Handler:    _ConfigurationService_GetCountryByISOCode_Handler,
		},
		{
			MethodName: "GetCurrencyByID",
			Handler:    _ConfigurationService_GetCurrencyByID_Handler,
		},
		{
			MethodName: "GetCurrencyByISOCode",
			Handler:    _ConfigurationService_GetCurrencyByISOCode_Handler,
		},
		{
			MethodName: "GetCurrenciesList",
			Handler:    _ConfigurationService_GetCurrenciesList_Handler,
		},
		{
			MethodName: "GetCountriesList",
			Handler:    _ConfigurationService_GetCountriesList_Handler,
		},
		{
			MethodName: "GetNAICSCategories",
			Handler:    _ConfigurationService_GetNAICSCategories_Handler,
		},
		{
			MethodName: "GetBusinessTypesByCountry",
			Handler:    _ConfigurationService_GetBusinessTypesByCountry_Handler,
		},
		{
			MethodName: "GetBusinessRolesByCountryAndBusinessType",
			Handler:    _ConfigurationService_GetBusinessRolesByCountryAndBusinessType_Handler,
		},
		{
			MethodName: "GetBusinessRoleByID",
			Handler:    _ConfigurationService_GetBusinessRoleByID_Handler,
		},
		{
			MethodName: "GetVendors",
			Handler:    _ConfigurationService_GetVendors_Handler,
		},
		{
			MethodName: "GetVendorByID",
			Handler:    _ConfigurationService_GetVendorByID_Handler,
		},
		{
			MethodName: "GetVendorByName",
			Handler:    _ConfigurationService_GetVendorByName_Handler,
		},
		{
			MethodName: "GetVendorHandleByID",
			Handler:    _ConfigurationService_GetVendorHandleByID_Handler,
		},
		{
			MethodName: "GetVendorHandleByHandle",
			Handler:    _ConfigurationService_GetVendorHandleByHandle_Handler,
		},
		{
			MethodName: "CreateVendor",
			Handler:    _ConfigurationService_CreateVendor_Handler,
		},
		{
			MethodName: "CreateVendorHandle",
			Handler:    _ConfigurationService_CreateVendorHandle_Handler,
		},
		{
			MethodName: "UpdateVendor",
			Handler:    _ConfigurationService_UpdateVendor_Handler,
		},
		{
			MethodName: "DeleteVendor",
			Handler:    _ConfigurationService_DeleteVendor_Handler,
		},
		{
			MethodName: "GetDocumentTypes",
			Handler:    _ConfigurationService_GetDocumentTypes_Handler,
		},
		{
			MethodName: "GetDocumentTypeByID",
			Handler:    _ConfigurationService_GetDocumentTypeByID_Handler,
		},
		{
			MethodName: "GetDocumentTypeByName",
			Handler:    _ConfigurationService_GetDocumentTypeByName_Handler,
		},
		{
			MethodName: "GetLanguages",
			Handler:    _ConfigurationService_GetLanguages_Handler,
		},
		{
			MethodName: "GetLanguageByID",
			Handler:    _ConfigurationService_GetLanguageByID_Handler,
		},
		{
			MethodName: "GetProviderByID",
			Handler:    _ConfigurationService_GetProviderByID_Handler,
		},
		{
			MethodName: "CreateProvider",
			Handler:    _ConfigurationService_CreateProvider_Handler,
		},
		{
			MethodName: "UpdateProvider",
			Handler:    _ConfigurationService_UpdateProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _ConfigurationService_DeleteProvider_Handler,
		},
		{
			MethodName: "GetProviderHandleByID",
			Handler:    _ConfigurationService_GetProviderHandleByID_Handler,
		},
		{
			MethodName: "GetIdentityTypes",
			Handler:    _ConfigurationService_GetIdentityTypes_Handler,
		},
		{
			MethodName: "GetIdentityTypeByID",
			Handler:    _ConfigurationService_GetIdentityTypeByID_Handler,
		},
		{
			MethodName: "GetIdentityTypeByName",
			Handler:    _ConfigurationService_GetIdentityTypeByName_Handler,
		},
		{
			MethodName: "GetTransactionDocumentTypes",
			Handler:    _ConfigurationService_GetTransactionDocumentTypes_Handler,
		},
		{
			MethodName: "GetTransactionInformationTypes",
			Handler:    _ConfigurationService_GetTransactionInformationTypes_Handler,
		},
		{
			MethodName: "GetTransactionInformationOptionsByType",
			Handler:    _ConfigurationService_GetTransactionInformationOptionsByType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/configuration/configuration.proto",
}
