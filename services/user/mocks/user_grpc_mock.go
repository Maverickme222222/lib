// Code generated by MockGen. DO NOT EDIT.
// Source: ../user_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/kappapay/backend/lib/golang/src/kappa/services/user"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// CheckPinExists mocks base method.
func (m *MockUserServiceClient) CheckPinExists(ctx context.Context, in *user.CheckPinRequest, opts ...grpc.CallOption) (*user.CheckPinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckPinExists", varargs...)
	ret0, _ := ret[0].(*user.CheckPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPinExists indicates an expected call of CheckPinExists.
func (mr *MockUserServiceClientMockRecorder) CheckPinExists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPinExists", reflect.TypeOf((*MockUserServiceClient)(nil).CheckPinExists), varargs...)
}

// CreateUser mocks base method.
func (m *MockUserServiceClient) CreateUser(ctx context.Context, in *user.CreateUserRequest, opts ...grpc.CallOption) (*user.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*user.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUser), varargs...)
}

// CreateUserPin mocks base method.
func (m *MockUserServiceClient) CreateUserPin(ctx context.Context, in *user.CreatePinRequest, opts ...grpc.CallOption) (*user.CreatePinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserPin", varargs...)
	ret0, _ := ret[0].(*user.CreatePinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPin indicates an expected call of CreateUserPin.
func (mr *MockUserServiceClientMockRecorder) CreateUserPin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPin", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUserPin), varargs...)
}

// DeleteUser mocks base method.
func (m *MockUserServiceClient) DeleteUser(ctx context.Context, in *user.DeleteUserRequest, opts ...grpc.CallOption) (*user.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*user.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceClientMockRecorder) DeleteUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteUser), varargs...)
}

// DeleteUserByEmail mocks base method.
func (m *MockUserServiceClient) DeleteUserByEmail(ctx context.Context, in *user.DeleteUserByEmailRequest, opts ...grpc.CallOption) (*user.DeleteUserByEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserByEmail", varargs...)
	ret0, _ := ret[0].(*user.DeleteUserByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserByEmail indicates an expected call of DeleteUserByEmail.
func (mr *MockUserServiceClientMockRecorder) DeleteUserByEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByEmail", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteUserByEmail), varargs...)
}

// GetUser mocks base method.
func (m *MockUserServiceClient) GetUser(ctx context.Context, in *user.GetUserRequest, opts ...grpc.CallOption) (*user.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*user.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceClient)(nil).GetUser), varargs...)
}

// GetUserByStytchID mocks base method.
func (m *MockUserServiceClient) GetUserByStytchID(ctx context.Context, in *user.GetUserRequest, opts ...grpc.CallOption) (*user.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByStytchID", varargs...)
	ret0, _ := ret[0].(*user.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByStytchID indicates an expected call of GetUserByStytchID.
func (mr *MockUserServiceClientMockRecorder) GetUserByStytchID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByStytchID", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByStytchID), varargs...)
}

// GetUsers mocks base method.
func (m *MockUserServiceClient) GetUsers(ctx context.Context, in *user.GetUsersRequest, opts ...grpc.CallOption) (*user.GetUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*user.GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServiceClientMockRecorder) GetUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserServiceClient)(nil).GetUsers), varargs...)
}

// GetUsersByGroup mocks base method.
func (m *MockUserServiceClient) GetUsersByGroup(ctx context.Context, in *user.GetUsersByGroupRequest, opts ...grpc.CallOption) (*user.GetUsersByGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersByGroup", varargs...)
	ret0, _ := ret[0].(*user.GetUsersByGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByGroup indicates an expected call of GetUsersByGroup.
func (mr *MockUserServiceClientMockRecorder) GetUsersByGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByGroup", reflect.TypeOf((*MockUserServiceClient)(nil).GetUsersByGroup), varargs...)
}

// UpdateUser mocks base method.
func (m *MockUserServiceClient) UpdateUser(ctx context.Context, in *user.UpdateUserRequest, opts ...grpc.CallOption) (*user.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*user.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceClientMockRecorder) UpdateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUser), varargs...)
}

// UpdateUserLanguage mocks base method.
func (m *MockUserServiceClient) UpdateUserLanguage(ctx context.Context, in *user.UpdateUserLanguageRequest, opts ...grpc.CallOption) (*user.UpdateUserLanguageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserLanguage", varargs...)
	ret0, _ := ret[0].(*user.UpdateUserLanguageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserLanguage indicates an expected call of UpdateUserLanguage.
func (mr *MockUserServiceClientMockRecorder) UpdateUserLanguage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLanguage", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUserLanguage), varargs...)
}

// UpdateUserPin mocks base method.
func (m *MockUserServiceClient) UpdateUserPin(ctx context.Context, in *user.UpdatePinRequest, opts ...grpc.CallOption) (*user.UpdatePinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPin", varargs...)
	ret0, _ := ret[0].(*user.UpdatePinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPin indicates an expected call of UpdateUserPin.
func (mr *MockUserServiceClientMockRecorder) UpdateUserPin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPin", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUserPin), varargs...)
}

// VerifyUserPin mocks base method.
func (m *MockUserServiceClient) VerifyUserPin(ctx context.Context, in *user.VerifyPinRequest, opts ...grpc.CallOption) (*user.VerifyPinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyUserPin", varargs...)
	ret0, _ := ret[0].(*user.VerifyPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserPin indicates an expected call of VerifyUserPin.
func (mr *MockUserServiceClientMockRecorder) VerifyUserPin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserPin", reflect.TypeOf((*MockUserServiceClient)(nil).VerifyUserPin), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// CheckPinExists mocks base method.
func (m *MockUserServiceServer) CheckPinExists(arg0 context.Context, arg1 *user.CheckPinRequest) (*user.CheckPinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPinExists", arg0, arg1)
	ret0, _ := ret[0].(*user.CheckPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPinExists indicates an expected call of CheckPinExists.
func (mr *MockUserServiceServerMockRecorder) CheckPinExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPinExists", reflect.TypeOf((*MockUserServiceServer)(nil).CheckPinExists), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockUserServiceServer) CreateUser(arg0 context.Context, arg1 *user.CreateUserRequest) (*user.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*user.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUser), arg0, arg1)
}

// CreateUserPin mocks base method.
func (m *MockUserServiceServer) CreateUserPin(arg0 context.Context, arg1 *user.CreatePinRequest) (*user.CreatePinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPin", arg0, arg1)
	ret0, _ := ret[0].(*user.CreatePinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPin indicates an expected call of CreateUserPin.
func (mr *MockUserServiceServerMockRecorder) CreateUserPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPin", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUserPin), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUserServiceServer) DeleteUser(arg0 context.Context, arg1 *user.DeleteUserRequest) (*user.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*user.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceServerMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceServer)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserByEmail mocks base method.
func (m *MockUserServiceServer) DeleteUserByEmail(arg0 context.Context, arg1 *user.DeleteUserByEmailRequest) (*user.DeleteUserByEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.DeleteUserByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserByEmail indicates an expected call of DeleteUserByEmail.
func (mr *MockUserServiceServerMockRecorder) DeleteUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByEmail", reflect.TypeOf((*MockUserServiceServer)(nil).DeleteUserByEmail), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserServiceServer) GetUser(arg0 context.Context, arg1 *user.GetUserRequest) (*user.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*user.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceServer)(nil).GetUser), arg0, arg1)
}

// GetUserByStytchID mocks base method.
func (m *MockUserServiceServer) GetUserByStytchID(arg0 context.Context, arg1 *user.GetUserRequest) (*user.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByStytchID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByStytchID indicates an expected call of GetUserByStytchID.
func (mr *MockUserServiceServerMockRecorder) GetUserByStytchID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByStytchID", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByStytchID), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockUserServiceServer) GetUsers(arg0 context.Context, arg1 *user.GetUsersRequest) (*user.GetUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*user.GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServiceServerMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserServiceServer)(nil).GetUsers), arg0, arg1)
}

// GetUsersByGroup mocks base method.
func (m *MockUserServiceServer) GetUsersByGroup(arg0 context.Context, arg1 *user.GetUsersByGroupRequest) (*user.GetUsersByGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByGroup", arg0, arg1)
	ret0, _ := ret[0].(*user.GetUsersByGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByGroup indicates an expected call of GetUsersByGroup.
func (mr *MockUserServiceServerMockRecorder) GetUsersByGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByGroup", reflect.TypeOf((*MockUserServiceServer)(nil).GetUsersByGroup), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserServiceServer) UpdateUser(arg0 context.Context, arg1 *user.UpdateUserRequest) (*user.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceServerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserLanguage mocks base method.
func (m *MockUserServiceServer) UpdateUserLanguage(arg0 context.Context, arg1 *user.UpdateUserLanguageRequest) (*user.UpdateUserLanguageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLanguage", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateUserLanguageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserLanguage indicates an expected call of UpdateUserLanguage.
func (mr *MockUserServiceServerMockRecorder) UpdateUserLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLanguage", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateUserLanguage), arg0, arg1)
}

// UpdateUserPin mocks base method.
func (m *MockUserServiceServer) UpdateUserPin(arg0 context.Context, arg1 *user.UpdatePinRequest) (*user.UpdatePinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPin", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdatePinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPin indicates an expected call of UpdateUserPin.
func (mr *MockUserServiceServerMockRecorder) UpdateUserPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPin", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateUserPin), arg0, arg1)
}

// VerifyUserPin mocks base method.
func (m *MockUserServiceServer) VerifyUserPin(arg0 context.Context, arg1 *user.VerifyPinRequest) (*user.VerifyPinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserPin", arg0, arg1)
	ret0, _ := ret[0].(*user.VerifyPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserPin indicates an expected call of VerifyUserPin.
func (mr *MockUserServiceServerMockRecorder) VerifyUserPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserPin", reflect.TypeOf((*MockUserServiceServer)(nil).VerifyUserPin), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}
