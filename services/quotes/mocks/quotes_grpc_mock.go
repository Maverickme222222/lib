// Code generated by MockGen. DO NOT EDIT.
// Source: ../quotes_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	quotes "github.com/kappapay/backend/lib/golang/src/kappa/services/quotes"
	grpc "google.golang.org/grpc"
)

// MockQuoteServiceClient is a mock of QuoteServiceClient interface.
type MockQuoteServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteServiceClientMockRecorder
}

// MockQuoteServiceClientMockRecorder is the mock recorder for MockQuoteServiceClient.
type MockQuoteServiceClientMockRecorder struct {
	mock *MockQuoteServiceClient
}

// NewMockQuoteServiceClient creates a new mock instance.
func NewMockQuoteServiceClient(ctrl *gomock.Controller) *MockQuoteServiceClient {
	mock := &MockQuoteServiceClient{ctrl: ctrl}
	mock.recorder = &MockQuoteServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteServiceClient) EXPECT() *MockQuoteServiceClientMockRecorder {
	return m.recorder
}

// AcceptExecutionQuote mocks base method.
func (m *MockQuoteServiceClient) AcceptExecutionQuote(ctx context.Context, in *quotes.AcceptExecutionQuoteRequest, opts ...grpc.CallOption) (*quotes.AcceptExecutionQuoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptExecutionQuote", varargs...)
	ret0, _ := ret[0].(*quotes.AcceptExecutionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptExecutionQuote indicates an expected call of AcceptExecutionQuote.
func (mr *MockQuoteServiceClientMockRecorder) AcceptExecutionQuote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptExecutionQuote", reflect.TypeOf((*MockQuoteServiceClient)(nil).AcceptExecutionQuote), varargs...)
}

// AcceptTransactionQuote mocks base method.
func (m *MockQuoteServiceClient) AcceptTransactionQuote(ctx context.Context, in *quotes.AcceptTransactionQuoteRequest, opts ...grpc.CallOption) (*quotes.AcceptTransactionQuoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptTransactionQuote", varargs...)
	ret0, _ := ret[0].(*quotes.AcceptTransactionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTransactionQuote indicates an expected call of AcceptTransactionQuote.
func (mr *MockQuoteServiceClientMockRecorder) AcceptTransactionQuote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTransactionQuote", reflect.TypeOf((*MockQuoteServiceClient)(nil).AcceptTransactionQuote), varargs...)
}

// CreateExecutionQuote mocks base method.
func (m *MockQuoteServiceClient) CreateExecutionQuote(ctx context.Context, in *quotes.CreateExecutionQuoteRequest, opts ...grpc.CallOption) (*quotes.CreateExecutionQuoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExecutionQuote", varargs...)
	ret0, _ := ret[0].(*quotes.CreateExecutionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExecutionQuote indicates an expected call of CreateExecutionQuote.
func (mr *MockQuoteServiceClientMockRecorder) CreateExecutionQuote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExecutionQuote", reflect.TypeOf((*MockQuoteServiceClient)(nil).CreateExecutionQuote), varargs...)
}

// CreateTransactionQuote mocks base method.
func (m *MockQuoteServiceClient) CreateTransactionQuote(ctx context.Context, in *quotes.CreateTransactionQuoteRequest, opts ...grpc.CallOption) (*quotes.CreateTransactionQuoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransactionQuote", varargs...)
	ret0, _ := ret[0].(*quotes.CreateTransactionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionQuote indicates an expected call of CreateTransactionQuote.
func (mr *MockQuoteServiceClientMockRecorder) CreateTransactionQuote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionQuote", reflect.TypeOf((*MockQuoteServiceClient)(nil).CreateTransactionQuote), varargs...)
}

// GetExecutionQuoteByID mocks base method.
func (m *MockQuoteServiceClient) GetExecutionQuoteByID(ctx context.Context, in *quotes.GetExecutionQuoteByIDRequest, opts ...grpc.CallOption) (*quotes.GetExecutionQuoteByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionQuoteByID", varargs...)
	ret0, _ := ret[0].(*quotes.GetExecutionQuoteByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionQuoteByID indicates an expected call of GetExecutionQuoteByID.
func (mr *MockQuoteServiceClientMockRecorder) GetExecutionQuoteByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionQuoteByID", reflect.TypeOf((*MockQuoteServiceClient)(nil).GetExecutionQuoteByID), varargs...)
}

// GetLatestAcceptedExecutionQuoteByTransactionID mocks base method.
func (m *MockQuoteServiceClient) GetLatestAcceptedExecutionQuoteByTransactionID(ctx context.Context, in *quotes.GetLatestAcceptedExecutionQuoteByTransactionIDRequest, opts ...grpc.CallOption) (*quotes.GetLatestAcceptedExecutionQuoteByTransactionIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestAcceptedExecutionQuoteByTransactionID", varargs...)
	ret0, _ := ret[0].(*quotes.GetLatestAcceptedExecutionQuoteByTransactionIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAcceptedExecutionQuoteByTransactionID indicates an expected call of GetLatestAcceptedExecutionQuoteByTransactionID.
func (mr *MockQuoteServiceClientMockRecorder) GetLatestAcceptedExecutionQuoteByTransactionID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAcceptedExecutionQuoteByTransactionID", reflect.TypeOf((*MockQuoteServiceClient)(nil).GetLatestAcceptedExecutionQuoteByTransactionID), varargs...)
}

// GetTransactionQuoteByID mocks base method.
func (m *MockQuoteServiceClient) GetTransactionQuoteByID(ctx context.Context, in *quotes.GetTransactionQuoteByIDRequest, opts ...grpc.CallOption) (*quotes.GetTransactionQuoteByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionQuoteByID", varargs...)
	ret0, _ := ret[0].(*quotes.GetTransactionQuoteByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionQuoteByID indicates an expected call of GetTransactionQuoteByID.
func (mr *MockQuoteServiceClientMockRecorder) GetTransactionQuoteByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionQuoteByID", reflect.TypeOf((*MockQuoteServiceClient)(nil).GetTransactionQuoteByID), varargs...)
}

// RejectTransactionQuote mocks base method.
func (m *MockQuoteServiceClient) RejectTransactionQuote(ctx context.Context, in *quotes.RejectTransactionQuoteRequest, opts ...grpc.CallOption) (*quotes.RejectTransactionQuoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectTransactionQuote", varargs...)
	ret0, _ := ret[0].(*quotes.RejectTransactionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectTransactionQuote indicates an expected call of RejectTransactionQuote.
func (mr *MockQuoteServiceClientMockRecorder) RejectTransactionQuote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectTransactionQuote", reflect.TypeOf((*MockQuoteServiceClient)(nil).RejectTransactionQuote), varargs...)
}

// MockQuoteServiceServer is a mock of QuoteServiceServer interface.
type MockQuoteServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteServiceServerMockRecorder
}

// MockQuoteServiceServerMockRecorder is the mock recorder for MockQuoteServiceServer.
type MockQuoteServiceServerMockRecorder struct {
	mock *MockQuoteServiceServer
}

// NewMockQuoteServiceServer creates a new mock instance.
func NewMockQuoteServiceServer(ctrl *gomock.Controller) *MockQuoteServiceServer {
	mock := &MockQuoteServiceServer{ctrl: ctrl}
	mock.recorder = &MockQuoteServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteServiceServer) EXPECT() *MockQuoteServiceServerMockRecorder {
	return m.recorder
}

// AcceptExecutionQuote mocks base method.
func (m *MockQuoteServiceServer) AcceptExecutionQuote(arg0 context.Context, arg1 *quotes.AcceptExecutionQuoteRequest) (*quotes.AcceptExecutionQuoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptExecutionQuote", arg0, arg1)
	ret0, _ := ret[0].(*quotes.AcceptExecutionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptExecutionQuote indicates an expected call of AcceptExecutionQuote.
func (mr *MockQuoteServiceServerMockRecorder) AcceptExecutionQuote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptExecutionQuote", reflect.TypeOf((*MockQuoteServiceServer)(nil).AcceptExecutionQuote), arg0, arg1)
}

// AcceptTransactionQuote mocks base method.
func (m *MockQuoteServiceServer) AcceptTransactionQuote(arg0 context.Context, arg1 *quotes.AcceptTransactionQuoteRequest) (*quotes.AcceptTransactionQuoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptTransactionQuote", arg0, arg1)
	ret0, _ := ret[0].(*quotes.AcceptTransactionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTransactionQuote indicates an expected call of AcceptTransactionQuote.
func (mr *MockQuoteServiceServerMockRecorder) AcceptTransactionQuote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTransactionQuote", reflect.TypeOf((*MockQuoteServiceServer)(nil).AcceptTransactionQuote), arg0, arg1)
}

// CreateExecutionQuote mocks base method.
func (m *MockQuoteServiceServer) CreateExecutionQuote(arg0 context.Context, arg1 *quotes.CreateExecutionQuoteRequest) (*quotes.CreateExecutionQuoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExecutionQuote", arg0, arg1)
	ret0, _ := ret[0].(*quotes.CreateExecutionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExecutionQuote indicates an expected call of CreateExecutionQuote.
func (mr *MockQuoteServiceServerMockRecorder) CreateExecutionQuote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExecutionQuote", reflect.TypeOf((*MockQuoteServiceServer)(nil).CreateExecutionQuote), arg0, arg1)
}

// CreateTransactionQuote mocks base method.
func (m *MockQuoteServiceServer) CreateTransactionQuote(arg0 context.Context, arg1 *quotes.CreateTransactionQuoteRequest) (*quotes.CreateTransactionQuoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionQuote", arg0, arg1)
	ret0, _ := ret[0].(*quotes.CreateTransactionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionQuote indicates an expected call of CreateTransactionQuote.
func (mr *MockQuoteServiceServerMockRecorder) CreateTransactionQuote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionQuote", reflect.TypeOf((*MockQuoteServiceServer)(nil).CreateTransactionQuote), arg0, arg1)
}

// GetExecutionQuoteByID mocks base method.
func (m *MockQuoteServiceServer) GetExecutionQuoteByID(arg0 context.Context, arg1 *quotes.GetExecutionQuoteByIDRequest) (*quotes.GetExecutionQuoteByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionQuoteByID", arg0, arg1)
	ret0, _ := ret[0].(*quotes.GetExecutionQuoteByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionQuoteByID indicates an expected call of GetExecutionQuoteByID.
func (mr *MockQuoteServiceServerMockRecorder) GetExecutionQuoteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionQuoteByID", reflect.TypeOf((*MockQuoteServiceServer)(nil).GetExecutionQuoteByID), arg0, arg1)
}

// GetLatestAcceptedExecutionQuoteByTransactionID mocks base method.
func (m *MockQuoteServiceServer) GetLatestAcceptedExecutionQuoteByTransactionID(arg0 context.Context, arg1 *quotes.GetLatestAcceptedExecutionQuoteByTransactionIDRequest) (*quotes.GetLatestAcceptedExecutionQuoteByTransactionIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAcceptedExecutionQuoteByTransactionID", arg0, arg1)
	ret0, _ := ret[0].(*quotes.GetLatestAcceptedExecutionQuoteByTransactionIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAcceptedExecutionQuoteByTransactionID indicates an expected call of GetLatestAcceptedExecutionQuoteByTransactionID.
func (mr *MockQuoteServiceServerMockRecorder) GetLatestAcceptedExecutionQuoteByTransactionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAcceptedExecutionQuoteByTransactionID", reflect.TypeOf((*MockQuoteServiceServer)(nil).GetLatestAcceptedExecutionQuoteByTransactionID), arg0, arg1)
}

// GetTransactionQuoteByID mocks base method.
func (m *MockQuoteServiceServer) GetTransactionQuoteByID(arg0 context.Context, arg1 *quotes.GetTransactionQuoteByIDRequest) (*quotes.GetTransactionQuoteByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionQuoteByID", arg0, arg1)
	ret0, _ := ret[0].(*quotes.GetTransactionQuoteByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionQuoteByID indicates an expected call of GetTransactionQuoteByID.
func (mr *MockQuoteServiceServerMockRecorder) GetTransactionQuoteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionQuoteByID", reflect.TypeOf((*MockQuoteServiceServer)(nil).GetTransactionQuoteByID), arg0, arg1)
}

// RejectTransactionQuote mocks base method.
func (m *MockQuoteServiceServer) RejectTransactionQuote(arg0 context.Context, arg1 *quotes.RejectTransactionQuoteRequest) (*quotes.RejectTransactionQuoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectTransactionQuote", arg0, arg1)
	ret0, _ := ret[0].(*quotes.RejectTransactionQuoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectTransactionQuote indicates an expected call of RejectTransactionQuote.
func (mr *MockQuoteServiceServerMockRecorder) RejectTransactionQuote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectTransactionQuote", reflect.TypeOf((*MockQuoteServiceServer)(nil).RejectTransactionQuote), arg0, arg1)
}

// mustEmbedUnimplementedQuoteServiceServer mocks base method.
func (m *MockQuoteServiceServer) mustEmbedUnimplementedQuoteServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedQuoteServiceServer")
}

// mustEmbedUnimplementedQuoteServiceServer indicates an expected call of mustEmbedUnimplementedQuoteServiceServer.
func (mr *MockQuoteServiceServerMockRecorder) mustEmbedUnimplementedQuoteServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedQuoteServiceServer", reflect.TypeOf((*MockQuoteServiceServer)(nil).mustEmbedUnimplementedQuoteServiceServer))
}

// MockUnsafeQuoteServiceServer is a mock of UnsafeQuoteServiceServer interface.
type MockUnsafeQuoteServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeQuoteServiceServerMockRecorder
}

// MockUnsafeQuoteServiceServerMockRecorder is the mock recorder for MockUnsafeQuoteServiceServer.
type MockUnsafeQuoteServiceServerMockRecorder struct {
	mock *MockUnsafeQuoteServiceServer
}

// NewMockUnsafeQuoteServiceServer creates a new mock instance.
func NewMockUnsafeQuoteServiceServer(ctrl *gomock.Controller) *MockUnsafeQuoteServiceServer {
	mock := &MockUnsafeQuoteServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeQuoteServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeQuoteServiceServer) EXPECT() *MockUnsafeQuoteServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedQuoteServiceServer mocks base method.
func (m *MockUnsafeQuoteServiceServer) mustEmbedUnimplementedQuoteServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedQuoteServiceServer")
}

// mustEmbedUnimplementedQuoteServiceServer indicates an expected call of mustEmbedUnimplementedQuoteServiceServer.
func (mr *MockUnsafeQuoteServiceServerMockRecorder) mustEmbedUnimplementedQuoteServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedQuoteServiceServer", reflect.TypeOf((*MockUnsafeQuoteServiceServer)(nil).mustEmbedUnimplementedQuoteServiceServer))
}
