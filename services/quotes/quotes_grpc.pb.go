// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/quotes/quotes.proto

package quotes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuoteServiceClient is the client API for QuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteServiceClient interface {
	AcceptTransactionQuote(ctx context.Context, in *AcceptTransactionQuoteRequest, opts ...grpc.CallOption) (*AcceptTransactionQuoteResponse, error)
	RejectTransactionQuote(ctx context.Context, in *RejectTransactionQuoteRequest, opts ...grpc.CallOption) (*RejectTransactionQuoteResponse, error)
	GetTransactionQuoteByID(ctx context.Context, in *GetTransactionQuoteByIDRequest, opts ...grpc.CallOption) (*GetTransactionQuoteByIDResponse, error)
	CreateTransactionQuote(ctx context.Context, in *CreateTransactionQuoteRequest, opts ...grpc.CallOption) (*CreateTransactionQuoteResponse, error)
	AcceptExecutionQuote(ctx context.Context, in *AcceptExecutionQuoteRequest, opts ...grpc.CallOption) (*AcceptExecutionQuoteResponse, error)
	GetExecutionQuoteByID(ctx context.Context, in *GetExecutionQuoteByIDRequest, opts ...grpc.CallOption) (*GetExecutionQuoteByIDResponse, error)
	CreateExecutionQuote(ctx context.Context, in *CreateExecutionQuoteRequest, opts ...grpc.CallOption) (*CreateExecutionQuoteResponse, error)
	GetLatestAcceptedExecutionQuoteByTransactionID(ctx context.Context, in *GetLatestAcceptedExecutionQuoteByTransactionIDRequest, opts ...grpc.CallOption) (*GetLatestAcceptedExecutionQuoteByTransactionIDResponse, error)
}

type quoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteServiceClient(cc grpc.ClientConnInterface) QuoteServiceClient {
	return &quoteServiceClient{cc}
}

func (c *quoteServiceClient) AcceptTransactionQuote(ctx context.Context, in *AcceptTransactionQuoteRequest, opts ...grpc.CallOption) (*AcceptTransactionQuoteResponse, error) {
	out := new(AcceptTransactionQuoteResponse)
	err := c.cc.Invoke(ctx, "/quotes.QuoteService/AcceptTransactionQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) RejectTransactionQuote(ctx context.Context, in *RejectTransactionQuoteRequest, opts ...grpc.CallOption) (*RejectTransactionQuoteResponse, error) {
	out := new(RejectTransactionQuoteResponse)
	err := c.cc.Invoke(ctx, "/quotes.QuoteService/RejectTransactionQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) GetTransactionQuoteByID(ctx context.Context, in *GetTransactionQuoteByIDRequest, opts ...grpc.CallOption) (*GetTransactionQuoteByIDResponse, error) {
	out := new(GetTransactionQuoteByIDResponse)
	err := c.cc.Invoke(ctx, "/quotes.QuoteService/GetTransactionQuoteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) CreateTransactionQuote(ctx context.Context, in *CreateTransactionQuoteRequest, opts ...grpc.CallOption) (*CreateTransactionQuoteResponse, error) {
	out := new(CreateTransactionQuoteResponse)
	err := c.cc.Invoke(ctx, "/quotes.QuoteService/CreateTransactionQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) AcceptExecutionQuote(ctx context.Context, in *AcceptExecutionQuoteRequest, opts ...grpc.CallOption) (*AcceptExecutionQuoteResponse, error) {
	out := new(AcceptExecutionQuoteResponse)
	err := c.cc.Invoke(ctx, "/quotes.QuoteService/AcceptExecutionQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) GetExecutionQuoteByID(ctx context.Context, in *GetExecutionQuoteByIDRequest, opts ...grpc.CallOption) (*GetExecutionQuoteByIDResponse, error) {
	out := new(GetExecutionQuoteByIDResponse)
	err := c.cc.Invoke(ctx, "/quotes.QuoteService/GetExecutionQuoteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) CreateExecutionQuote(ctx context.Context, in *CreateExecutionQuoteRequest, opts ...grpc.CallOption) (*CreateExecutionQuoteResponse, error) {
	out := new(CreateExecutionQuoteResponse)
	err := c.cc.Invoke(ctx, "/quotes.QuoteService/CreateExecutionQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) GetLatestAcceptedExecutionQuoteByTransactionID(ctx context.Context, in *GetLatestAcceptedExecutionQuoteByTransactionIDRequest, opts ...grpc.CallOption) (*GetLatestAcceptedExecutionQuoteByTransactionIDResponse, error) {
	out := new(GetLatestAcceptedExecutionQuoteByTransactionIDResponse)
	err := c.cc.Invoke(ctx, "/quotes.QuoteService/GetLatestAcceptedExecutionQuoteByTransactionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteServiceServer is the server API for QuoteService service.
// All implementations must embed UnimplementedQuoteServiceServer
// for forward compatibility
type QuoteServiceServer interface {
	AcceptTransactionQuote(context.Context, *AcceptTransactionQuoteRequest) (*AcceptTransactionQuoteResponse, error)
	RejectTransactionQuote(context.Context, *RejectTransactionQuoteRequest) (*RejectTransactionQuoteResponse, error)
	GetTransactionQuoteByID(context.Context, *GetTransactionQuoteByIDRequest) (*GetTransactionQuoteByIDResponse, error)
	CreateTransactionQuote(context.Context, *CreateTransactionQuoteRequest) (*CreateTransactionQuoteResponse, error)
	AcceptExecutionQuote(context.Context, *AcceptExecutionQuoteRequest) (*AcceptExecutionQuoteResponse, error)
	GetExecutionQuoteByID(context.Context, *GetExecutionQuoteByIDRequest) (*GetExecutionQuoteByIDResponse, error)
	CreateExecutionQuote(context.Context, *CreateExecutionQuoteRequest) (*CreateExecutionQuoteResponse, error)
	GetLatestAcceptedExecutionQuoteByTransactionID(context.Context, *GetLatestAcceptedExecutionQuoteByTransactionIDRequest) (*GetLatestAcceptedExecutionQuoteByTransactionIDResponse, error)
	mustEmbedUnimplementedQuoteServiceServer()
}

// UnimplementedQuoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteServiceServer struct {
}

func (UnimplementedQuoteServiceServer) AcceptTransactionQuote(context.Context, *AcceptTransactionQuoteRequest) (*AcceptTransactionQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTransactionQuote not implemented")
}
func (UnimplementedQuoteServiceServer) RejectTransactionQuote(context.Context, *RejectTransactionQuoteRequest) (*RejectTransactionQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTransactionQuote not implemented")
}
func (UnimplementedQuoteServiceServer) GetTransactionQuoteByID(context.Context, *GetTransactionQuoteByIDRequest) (*GetTransactionQuoteByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionQuoteByID not implemented")
}
func (UnimplementedQuoteServiceServer) CreateTransactionQuote(context.Context, *CreateTransactionQuoteRequest) (*CreateTransactionQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionQuote not implemented")
}
func (UnimplementedQuoteServiceServer) AcceptExecutionQuote(context.Context, *AcceptExecutionQuoteRequest) (*AcceptExecutionQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptExecutionQuote not implemented")
}
func (UnimplementedQuoteServiceServer) GetExecutionQuoteByID(context.Context, *GetExecutionQuoteByIDRequest) (*GetExecutionQuoteByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionQuoteByID not implemented")
}
func (UnimplementedQuoteServiceServer) CreateExecutionQuote(context.Context, *CreateExecutionQuoteRequest) (*CreateExecutionQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExecutionQuote not implemented")
}
func (UnimplementedQuoteServiceServer) GetLatestAcceptedExecutionQuoteByTransactionID(context.Context, *GetLatestAcceptedExecutionQuoteByTransactionIDRequest) (*GetLatestAcceptedExecutionQuoteByTransactionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAcceptedExecutionQuoteByTransactionID not implemented")
}
func (UnimplementedQuoteServiceServer) mustEmbedUnimplementedQuoteServiceServer() {}

// UnsafeQuoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServiceServer will
// result in compilation errors.
type UnsafeQuoteServiceServer interface {
	mustEmbedUnimplementedQuoteServiceServer()
}

func RegisterQuoteServiceServer(s grpc.ServiceRegistrar, srv QuoteServiceServer) {
	s.RegisterService(&QuoteService_ServiceDesc, srv)
}

func _QuoteService_AcceptTransactionQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTransactionQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).AcceptTransactionQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.QuoteService/AcceptTransactionQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).AcceptTransactionQuote(ctx, req.(*AcceptTransactionQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_RejectTransactionQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTransactionQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).RejectTransactionQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.QuoteService/RejectTransactionQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).RejectTransactionQuote(ctx, req.(*RejectTransactionQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_GetTransactionQuoteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionQuoteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).GetTransactionQuoteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.QuoteService/GetTransactionQuoteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).GetTransactionQuoteByID(ctx, req.(*GetTransactionQuoteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_CreateTransactionQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).CreateTransactionQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.QuoteService/CreateTransactionQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).CreateTransactionQuote(ctx, req.(*CreateTransactionQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_AcceptExecutionQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptExecutionQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).AcceptExecutionQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.QuoteService/AcceptExecutionQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).AcceptExecutionQuote(ctx, req.(*AcceptExecutionQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_GetExecutionQuoteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionQuoteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).GetExecutionQuoteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.QuoteService/GetExecutionQuoteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).GetExecutionQuoteByID(ctx, req.(*GetExecutionQuoteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_CreateExecutionQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExecutionQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).CreateExecutionQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.QuoteService/CreateExecutionQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).CreateExecutionQuote(ctx, req.(*CreateExecutionQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_GetLatestAcceptedExecutionQuoteByTransactionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestAcceptedExecutionQuoteByTransactionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).GetLatestAcceptedExecutionQuoteByTransactionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.QuoteService/GetLatestAcceptedExecutionQuoteByTransactionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).GetLatestAcceptedExecutionQuoteByTransactionID(ctx, req.(*GetLatestAcceptedExecutionQuoteByTransactionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuoteService_ServiceDesc is the grpc.ServiceDesc for QuoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quotes.QuoteService",
	HandlerType: (*QuoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptTransactionQuote",
			Handler:    _QuoteService_AcceptTransactionQuote_Handler,
		},
		{
			MethodName: "RejectTransactionQuote",
			Handler:    _QuoteService_RejectTransactionQuote_Handler,
		},
		{
			MethodName: "GetTransactionQuoteByID",
			Handler:    _QuoteService_GetTransactionQuoteByID_Handler,
		},
		{
			MethodName: "CreateTransactionQuote",
			Handler:    _QuoteService_CreateTransactionQuote_Handler,
		},
		{
			MethodName: "AcceptExecutionQuote",
			Handler:    _QuoteService_AcceptExecutionQuote_Handler,
		},
		{
			MethodName: "GetExecutionQuoteByID",
			Handler:    _QuoteService_GetExecutionQuoteByID_Handler,
		},
		{
			MethodName: "CreateExecutionQuote",
			Handler:    _QuoteService_CreateExecutionQuote_Handler,
		},
		{
			MethodName: "GetLatestAcceptedExecutionQuoteByTransactionID",
			Handler:    _QuoteService_GetLatestAcceptedExecutionQuoteByTransactionID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/quotes/quotes.proto",
}
