// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/sources/sources.proto

package sources

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourcesServiceClient is the client API for SourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourcesServiceClient interface {
	GetSourceByID(ctx context.Context, in *GetSourceByIDRequest, opts ...grpc.CallOption) (*GetSourceByIDResponse, error)
	// Note here "SourceID" referes to the ID of the underlying source. E.g., the ID of the wallet or the linked account.
	GetSourceByEntityIDAndSourceID(ctx context.Context, in *GetSourceByEntityIDAndSourceIDRequest, opts ...grpc.CallOption) (*GetSourceByEntityIDAndSourceIDResponse, error)
	CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*CreateSourceResponse, error)
	UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*UpdateSourceResponse, error)
	DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*DeleteSourceResponse, error)
	GetDepositSourcesByEntityID(ctx context.Context, in *GetDepositSourcesByEntityIDRequest, opts ...grpc.CallOption) (*GetDepositSourcesByEntityIDResponse, error)
	GetTransferSourcesByEntityID(ctx context.Context, in *GetTransferSourcesByEntityIDRequest, opts ...grpc.CallOption) (*GetTransferSourcesByEntityIDResponse, error)
	GetWithdrawalSourcesByEntityID(ctx context.Context, in *GetWithdrawalSourcesByEntityIDRequest, opts ...grpc.CallOption) (*GetWithdrawalSourcesByEntityIDResponse, error)
	GetWithdrawalSourcesByDomicileAndCurrency(ctx context.Context, in *GetWithdrawalSourcesByDomicileAndCurrencyRequest, opts ...grpc.CallOption) (*GetWithdrawalSourcesByDomicileAndCurrencyResponse, error)
	SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*SetStatusResponse, error)
}

type sourcesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourcesServiceClient(cc grpc.ClientConnInterface) SourcesServiceClient {
	return &sourcesServiceClient{cc}
}

func (c *sourcesServiceClient) GetSourceByID(ctx context.Context, in *GetSourceByIDRequest, opts ...grpc.CallOption) (*GetSourceByIDResponse, error) {
	out := new(GetSourceByIDResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/GetSourceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesServiceClient) GetSourceByEntityIDAndSourceID(ctx context.Context, in *GetSourceByEntityIDAndSourceIDRequest, opts ...grpc.CallOption) (*GetSourceByEntityIDAndSourceIDResponse, error) {
	out := new(GetSourceByEntityIDAndSourceIDResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/GetSourceByEntityIDAndSourceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesServiceClient) CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*CreateSourceResponse, error) {
	out := new(CreateSourceResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/CreateSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesServiceClient) UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*UpdateSourceResponse, error) {
	out := new(UpdateSourceResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/UpdateSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesServiceClient) DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*DeleteSourceResponse, error) {
	out := new(DeleteSourceResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/DeleteSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesServiceClient) GetDepositSourcesByEntityID(ctx context.Context, in *GetDepositSourcesByEntityIDRequest, opts ...grpc.CallOption) (*GetDepositSourcesByEntityIDResponse, error) {
	out := new(GetDepositSourcesByEntityIDResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/GetDepositSourcesByEntityID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesServiceClient) GetTransferSourcesByEntityID(ctx context.Context, in *GetTransferSourcesByEntityIDRequest, opts ...grpc.CallOption) (*GetTransferSourcesByEntityIDResponse, error) {
	out := new(GetTransferSourcesByEntityIDResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/GetTransferSourcesByEntityID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesServiceClient) GetWithdrawalSourcesByEntityID(ctx context.Context, in *GetWithdrawalSourcesByEntityIDRequest, opts ...grpc.CallOption) (*GetWithdrawalSourcesByEntityIDResponse, error) {
	out := new(GetWithdrawalSourcesByEntityIDResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/GetWithdrawalSourcesByEntityID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesServiceClient) GetWithdrawalSourcesByDomicileAndCurrency(ctx context.Context, in *GetWithdrawalSourcesByDomicileAndCurrencyRequest, opts ...grpc.CallOption) (*GetWithdrawalSourcesByDomicileAndCurrencyResponse, error) {
	out := new(GetWithdrawalSourcesByDomicileAndCurrencyResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/GetWithdrawalSourcesByDomicileAndCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesServiceClient) SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*SetStatusResponse, error) {
	out := new(SetStatusResponse)
	err := c.cc.Invoke(ctx, "/sources.SourcesService/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourcesServiceServer is the server API for SourcesService service.
// All implementations must embed UnimplementedSourcesServiceServer
// for forward compatibility
type SourcesServiceServer interface {
	GetSourceByID(context.Context, *GetSourceByIDRequest) (*GetSourceByIDResponse, error)
	// Note here "SourceID" referes to the ID of the underlying source. E.g., the ID of the wallet or the linked account.
	GetSourceByEntityIDAndSourceID(context.Context, *GetSourceByEntityIDAndSourceIDRequest) (*GetSourceByEntityIDAndSourceIDResponse, error)
	CreateSource(context.Context, *CreateSourceRequest) (*CreateSourceResponse, error)
	UpdateSource(context.Context, *UpdateSourceRequest) (*UpdateSourceResponse, error)
	DeleteSource(context.Context, *DeleteSourceRequest) (*DeleteSourceResponse, error)
	GetDepositSourcesByEntityID(context.Context, *GetDepositSourcesByEntityIDRequest) (*GetDepositSourcesByEntityIDResponse, error)
	GetTransferSourcesByEntityID(context.Context, *GetTransferSourcesByEntityIDRequest) (*GetTransferSourcesByEntityIDResponse, error)
	GetWithdrawalSourcesByEntityID(context.Context, *GetWithdrawalSourcesByEntityIDRequest) (*GetWithdrawalSourcesByEntityIDResponse, error)
	GetWithdrawalSourcesByDomicileAndCurrency(context.Context, *GetWithdrawalSourcesByDomicileAndCurrencyRequest) (*GetWithdrawalSourcesByDomicileAndCurrencyResponse, error)
	SetStatus(context.Context, *SetStatusRequest) (*SetStatusResponse, error)
	mustEmbedUnimplementedSourcesServiceServer()
}

// UnimplementedSourcesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSourcesServiceServer struct {
}

func (UnimplementedSourcesServiceServer) GetSourceByID(context.Context, *GetSourceByIDRequest) (*GetSourceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceByID not implemented")
}
func (UnimplementedSourcesServiceServer) GetSourceByEntityIDAndSourceID(context.Context, *GetSourceByEntityIDAndSourceIDRequest) (*GetSourceByEntityIDAndSourceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceByEntityIDAndSourceID not implemented")
}
func (UnimplementedSourcesServiceServer) CreateSource(context.Context, *CreateSourceRequest) (*CreateSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSource not implemented")
}
func (UnimplementedSourcesServiceServer) UpdateSource(context.Context, *UpdateSourceRequest) (*UpdateSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSource not implemented")
}
func (UnimplementedSourcesServiceServer) DeleteSource(context.Context, *DeleteSourceRequest) (*DeleteSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSource not implemented")
}
func (UnimplementedSourcesServiceServer) GetDepositSourcesByEntityID(context.Context, *GetDepositSourcesByEntityIDRequest) (*GetDepositSourcesByEntityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositSourcesByEntityID not implemented")
}
func (UnimplementedSourcesServiceServer) GetTransferSourcesByEntityID(context.Context, *GetTransferSourcesByEntityIDRequest) (*GetTransferSourcesByEntityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferSourcesByEntityID not implemented")
}
func (UnimplementedSourcesServiceServer) GetWithdrawalSourcesByEntityID(context.Context, *GetWithdrawalSourcesByEntityIDRequest) (*GetWithdrawalSourcesByEntityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalSourcesByEntityID not implemented")
}
func (UnimplementedSourcesServiceServer) GetWithdrawalSourcesByDomicileAndCurrency(context.Context, *GetWithdrawalSourcesByDomicileAndCurrencyRequest) (*GetWithdrawalSourcesByDomicileAndCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalSourcesByDomicileAndCurrency not implemented")
}
func (UnimplementedSourcesServiceServer) SetStatus(context.Context, *SetStatusRequest) (*SetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedSourcesServiceServer) mustEmbedUnimplementedSourcesServiceServer() {}

// UnsafeSourcesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourcesServiceServer will
// result in compilation errors.
type UnsafeSourcesServiceServer interface {
	mustEmbedUnimplementedSourcesServiceServer()
}

func RegisterSourcesServiceServer(s grpc.ServiceRegistrar, srv SourcesServiceServer) {
	s.RegisterService(&SourcesService_ServiceDesc, srv)
}

func _SourcesService_GetSourceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).GetSourceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/GetSourceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).GetSourceByID(ctx, req.(*GetSourceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcesService_GetSourceByEntityIDAndSourceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceByEntityIDAndSourceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).GetSourceByEntityIDAndSourceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/GetSourceByEntityIDAndSourceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).GetSourceByEntityIDAndSourceID(ctx, req.(*GetSourceByEntityIDAndSourceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcesService_CreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).CreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/CreateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).CreateSource(ctx, req.(*CreateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcesService_UpdateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).UpdateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/UpdateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).UpdateSource(ctx, req.(*UpdateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcesService_DeleteSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).DeleteSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/DeleteSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).DeleteSource(ctx, req.(*DeleteSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcesService_GetDepositSourcesByEntityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositSourcesByEntityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).GetDepositSourcesByEntityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/GetDepositSourcesByEntityID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).GetDepositSourcesByEntityID(ctx, req.(*GetDepositSourcesByEntityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcesService_GetTransferSourcesByEntityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferSourcesByEntityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).GetTransferSourcesByEntityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/GetTransferSourcesByEntityID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).GetTransferSourcesByEntityID(ctx, req.(*GetTransferSourcesByEntityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcesService_GetWithdrawalSourcesByEntityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalSourcesByEntityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).GetWithdrawalSourcesByEntityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/GetWithdrawalSourcesByEntityID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).GetWithdrawalSourcesByEntityID(ctx, req.(*GetWithdrawalSourcesByEntityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcesService_GetWithdrawalSourcesByDomicileAndCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalSourcesByDomicileAndCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).GetWithdrawalSourcesByDomicileAndCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/GetWithdrawalSourcesByDomicileAndCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).GetWithdrawalSourcesByDomicileAndCurrency(ctx, req.(*GetWithdrawalSourcesByDomicileAndCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcesService_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServiceServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sources.SourcesService/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServiceServer).SetStatus(ctx, req.(*SetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SourcesService_ServiceDesc is the grpc.ServiceDesc for SourcesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourcesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sources.SourcesService",
	HandlerType: (*SourcesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSourceByID",
			Handler:    _SourcesService_GetSourceByID_Handler,
		},
		{
			MethodName: "GetSourceByEntityIDAndSourceID",
			Handler:    _SourcesService_GetSourceByEntityIDAndSourceID_Handler,
		},
		{
			MethodName: "CreateSource",
			Handler:    _SourcesService_CreateSource_Handler,
		},
		{
			MethodName: "UpdateSource",
			Handler:    _SourcesService_UpdateSource_Handler,
		},
		{
			MethodName: "DeleteSource",
			Handler:    _SourcesService_DeleteSource_Handler,
		},
		{
			MethodName: "GetDepositSourcesByEntityID",
			Handler:    _SourcesService_GetDepositSourcesByEntityID_Handler,
		},
		{
			MethodName: "GetTransferSourcesByEntityID",
			Handler:    _SourcesService_GetTransferSourcesByEntityID_Handler,
		},
		{
			MethodName: "GetWithdrawalSourcesByEntityID",
			Handler:    _SourcesService_GetWithdrawalSourcesByEntityID_Handler,
		},
		{
			MethodName: "GetWithdrawalSourcesByDomicileAndCurrency",
			Handler:    _SourcesService_GetWithdrawalSourcesByDomicileAndCurrency_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _SourcesService_SetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/sources/sources.proto",
}
