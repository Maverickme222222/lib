// Code generated by MockGen. DO NOT EDIT.
// Source: ../sources_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sources "github.com/kappapay/backend/lib/golang/src/kappa/services/sources"
	grpc "google.golang.org/grpc"
)

// MockSourcesServiceClient is a mock of SourcesServiceClient interface.
type MockSourcesServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSourcesServiceClientMockRecorder
}

// MockSourcesServiceClientMockRecorder is the mock recorder for MockSourcesServiceClient.
type MockSourcesServiceClientMockRecorder struct {
	mock *MockSourcesServiceClient
}

// NewMockSourcesServiceClient creates a new mock instance.
func NewMockSourcesServiceClient(ctrl *gomock.Controller) *MockSourcesServiceClient {
	mock := &MockSourcesServiceClient{ctrl: ctrl}
	mock.recorder = &MockSourcesServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourcesServiceClient) EXPECT() *MockSourcesServiceClientMockRecorder {
	return m.recorder
}

// CreateSource mocks base method.
func (m *MockSourcesServiceClient) CreateSource(ctx context.Context, in *sources.CreateSourceRequest, opts ...grpc.CallOption) (*sources.CreateSourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSource", varargs...)
	ret0, _ := ret[0].(*sources.CreateSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSource indicates an expected call of CreateSource.
func (mr *MockSourcesServiceClientMockRecorder) CreateSource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSource", reflect.TypeOf((*MockSourcesServiceClient)(nil).CreateSource), varargs...)
}

// DeleteSource mocks base method.
func (m *MockSourcesServiceClient) DeleteSource(ctx context.Context, in *sources.DeleteSourceRequest, opts ...grpc.CallOption) (*sources.DeleteSourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSource", varargs...)
	ret0, _ := ret[0].(*sources.DeleteSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSource indicates an expected call of DeleteSource.
func (mr *MockSourcesServiceClientMockRecorder) DeleteSource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSource", reflect.TypeOf((*MockSourcesServiceClient)(nil).DeleteSource), varargs...)
}

// GetDepositSourcesByEntityID mocks base method.
func (m *MockSourcesServiceClient) GetDepositSourcesByEntityID(ctx context.Context, in *sources.GetDepositSourcesByEntityIDRequest, opts ...grpc.CallOption) (*sources.GetDepositSourcesByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDepositSourcesByEntityID", varargs...)
	ret0, _ := ret[0].(*sources.GetDepositSourcesByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositSourcesByEntityID indicates an expected call of GetDepositSourcesByEntityID.
func (mr *MockSourcesServiceClientMockRecorder) GetDepositSourcesByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositSourcesByEntityID", reflect.TypeOf((*MockSourcesServiceClient)(nil).GetDepositSourcesByEntityID), varargs...)
}

// GetSourceByEntityIDAndSourceID mocks base method.
func (m *MockSourcesServiceClient) GetSourceByEntityIDAndSourceID(ctx context.Context, in *sources.GetSourceByEntityIDAndSourceIDRequest, opts ...grpc.CallOption) (*sources.GetSourceByEntityIDAndSourceIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSourceByEntityIDAndSourceID", varargs...)
	ret0, _ := ret[0].(*sources.GetSourceByEntityIDAndSourceIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceByEntityIDAndSourceID indicates an expected call of GetSourceByEntityIDAndSourceID.
func (mr *MockSourcesServiceClientMockRecorder) GetSourceByEntityIDAndSourceID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceByEntityIDAndSourceID", reflect.TypeOf((*MockSourcesServiceClient)(nil).GetSourceByEntityIDAndSourceID), varargs...)
}

// GetSourceByID mocks base method.
func (m *MockSourcesServiceClient) GetSourceByID(ctx context.Context, in *sources.GetSourceByIDRequest, opts ...grpc.CallOption) (*sources.GetSourceByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSourceByID", varargs...)
	ret0, _ := ret[0].(*sources.GetSourceByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceByID indicates an expected call of GetSourceByID.
func (mr *MockSourcesServiceClientMockRecorder) GetSourceByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceByID", reflect.TypeOf((*MockSourcesServiceClient)(nil).GetSourceByID), varargs...)
}

// GetTransferSourcesByEntityID mocks base method.
func (m *MockSourcesServiceClient) GetTransferSourcesByEntityID(ctx context.Context, in *sources.GetTransferSourcesByEntityIDRequest, opts ...grpc.CallOption) (*sources.GetTransferSourcesByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransferSourcesByEntityID", varargs...)
	ret0, _ := ret[0].(*sources.GetTransferSourcesByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferSourcesByEntityID indicates an expected call of GetTransferSourcesByEntityID.
func (mr *MockSourcesServiceClientMockRecorder) GetTransferSourcesByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferSourcesByEntityID", reflect.TypeOf((*MockSourcesServiceClient)(nil).GetTransferSourcesByEntityID), varargs...)
}

// GetWithdrawalSourcesByDomicileAndCurrency mocks base method.
func (m *MockSourcesServiceClient) GetWithdrawalSourcesByDomicileAndCurrency(ctx context.Context, in *sources.GetWithdrawalSourcesByDomicileAndCurrencyRequest, opts ...grpc.CallOption) (*sources.GetWithdrawalSourcesByDomicileAndCurrencyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithdrawalSourcesByDomicileAndCurrency", varargs...)
	ret0, _ := ret[0].(*sources.GetWithdrawalSourcesByDomicileAndCurrencyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalSourcesByDomicileAndCurrency indicates an expected call of GetWithdrawalSourcesByDomicileAndCurrency.
func (mr *MockSourcesServiceClientMockRecorder) GetWithdrawalSourcesByDomicileAndCurrency(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalSourcesByDomicileAndCurrency", reflect.TypeOf((*MockSourcesServiceClient)(nil).GetWithdrawalSourcesByDomicileAndCurrency), varargs...)
}

// GetWithdrawalSourcesByEntityID mocks base method.
func (m *MockSourcesServiceClient) GetWithdrawalSourcesByEntityID(ctx context.Context, in *sources.GetWithdrawalSourcesByEntityIDRequest, opts ...grpc.CallOption) (*sources.GetWithdrawalSourcesByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithdrawalSourcesByEntityID", varargs...)
	ret0, _ := ret[0].(*sources.GetWithdrawalSourcesByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalSourcesByEntityID indicates an expected call of GetWithdrawalSourcesByEntityID.
func (mr *MockSourcesServiceClientMockRecorder) GetWithdrawalSourcesByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalSourcesByEntityID", reflect.TypeOf((*MockSourcesServiceClient)(nil).GetWithdrawalSourcesByEntityID), varargs...)
}

// SetStatus mocks base method.
func (m *MockSourcesServiceClient) SetStatus(ctx context.Context, in *sources.SetStatusRequest, opts ...grpc.CallOption) (*sources.SetStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetStatus", varargs...)
	ret0, _ := ret[0].(*sources.SetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockSourcesServiceClientMockRecorder) SetStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockSourcesServiceClient)(nil).SetStatus), varargs...)
}

// UpdateSource mocks base method.
func (m *MockSourcesServiceClient) UpdateSource(ctx context.Context, in *sources.UpdateSourceRequest, opts ...grpc.CallOption) (*sources.UpdateSourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSource", varargs...)
	ret0, _ := ret[0].(*sources.UpdateSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSource indicates an expected call of UpdateSource.
func (mr *MockSourcesServiceClientMockRecorder) UpdateSource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSource", reflect.TypeOf((*MockSourcesServiceClient)(nil).UpdateSource), varargs...)
}

// MockSourcesServiceServer is a mock of SourcesServiceServer interface.
type MockSourcesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSourcesServiceServerMockRecorder
}

// MockSourcesServiceServerMockRecorder is the mock recorder for MockSourcesServiceServer.
type MockSourcesServiceServerMockRecorder struct {
	mock *MockSourcesServiceServer
}

// NewMockSourcesServiceServer creates a new mock instance.
func NewMockSourcesServiceServer(ctrl *gomock.Controller) *MockSourcesServiceServer {
	mock := &MockSourcesServiceServer{ctrl: ctrl}
	mock.recorder = &MockSourcesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourcesServiceServer) EXPECT() *MockSourcesServiceServerMockRecorder {
	return m.recorder
}

// CreateSource mocks base method.
func (m *MockSourcesServiceServer) CreateSource(arg0 context.Context, arg1 *sources.CreateSourceRequest) (*sources.CreateSourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSource", arg0, arg1)
	ret0, _ := ret[0].(*sources.CreateSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSource indicates an expected call of CreateSource.
func (mr *MockSourcesServiceServerMockRecorder) CreateSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSource", reflect.TypeOf((*MockSourcesServiceServer)(nil).CreateSource), arg0, arg1)
}

// DeleteSource mocks base method.
func (m *MockSourcesServiceServer) DeleteSource(arg0 context.Context, arg1 *sources.DeleteSourceRequest) (*sources.DeleteSourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSource", arg0, arg1)
	ret0, _ := ret[0].(*sources.DeleteSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSource indicates an expected call of DeleteSource.
func (mr *MockSourcesServiceServerMockRecorder) DeleteSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSource", reflect.TypeOf((*MockSourcesServiceServer)(nil).DeleteSource), arg0, arg1)
}

// GetDepositSourcesByEntityID mocks base method.
func (m *MockSourcesServiceServer) GetDepositSourcesByEntityID(arg0 context.Context, arg1 *sources.GetDepositSourcesByEntityIDRequest) (*sources.GetDepositSourcesByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositSourcesByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*sources.GetDepositSourcesByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositSourcesByEntityID indicates an expected call of GetDepositSourcesByEntityID.
func (mr *MockSourcesServiceServerMockRecorder) GetDepositSourcesByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositSourcesByEntityID", reflect.TypeOf((*MockSourcesServiceServer)(nil).GetDepositSourcesByEntityID), arg0, arg1)
}

// GetSourceByEntityIDAndSourceID mocks base method.
func (m *MockSourcesServiceServer) GetSourceByEntityIDAndSourceID(arg0 context.Context, arg1 *sources.GetSourceByEntityIDAndSourceIDRequest) (*sources.GetSourceByEntityIDAndSourceIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceByEntityIDAndSourceID", arg0, arg1)
	ret0, _ := ret[0].(*sources.GetSourceByEntityIDAndSourceIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceByEntityIDAndSourceID indicates an expected call of GetSourceByEntityIDAndSourceID.
func (mr *MockSourcesServiceServerMockRecorder) GetSourceByEntityIDAndSourceID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceByEntityIDAndSourceID", reflect.TypeOf((*MockSourcesServiceServer)(nil).GetSourceByEntityIDAndSourceID), arg0, arg1)
}

// GetSourceByID mocks base method.
func (m *MockSourcesServiceServer) GetSourceByID(arg0 context.Context, arg1 *sources.GetSourceByIDRequest) (*sources.GetSourceByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceByID", arg0, arg1)
	ret0, _ := ret[0].(*sources.GetSourceByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceByID indicates an expected call of GetSourceByID.
func (mr *MockSourcesServiceServerMockRecorder) GetSourceByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceByID", reflect.TypeOf((*MockSourcesServiceServer)(nil).GetSourceByID), arg0, arg1)
}

// GetTransferSourcesByEntityID mocks base method.
func (m *MockSourcesServiceServer) GetTransferSourcesByEntityID(arg0 context.Context, arg1 *sources.GetTransferSourcesByEntityIDRequest) (*sources.GetTransferSourcesByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferSourcesByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*sources.GetTransferSourcesByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferSourcesByEntityID indicates an expected call of GetTransferSourcesByEntityID.
func (mr *MockSourcesServiceServerMockRecorder) GetTransferSourcesByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferSourcesByEntityID", reflect.TypeOf((*MockSourcesServiceServer)(nil).GetTransferSourcesByEntityID), arg0, arg1)
}

// GetWithdrawalSourcesByDomicileAndCurrency mocks base method.
func (m *MockSourcesServiceServer) GetWithdrawalSourcesByDomicileAndCurrency(arg0 context.Context, arg1 *sources.GetWithdrawalSourcesByDomicileAndCurrencyRequest) (*sources.GetWithdrawalSourcesByDomicileAndCurrencyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalSourcesByDomicileAndCurrency", arg0, arg1)
	ret0, _ := ret[0].(*sources.GetWithdrawalSourcesByDomicileAndCurrencyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalSourcesByDomicileAndCurrency indicates an expected call of GetWithdrawalSourcesByDomicileAndCurrency.
func (mr *MockSourcesServiceServerMockRecorder) GetWithdrawalSourcesByDomicileAndCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalSourcesByDomicileAndCurrency", reflect.TypeOf((*MockSourcesServiceServer)(nil).GetWithdrawalSourcesByDomicileAndCurrency), arg0, arg1)
}

// GetWithdrawalSourcesByEntityID mocks base method.
func (m *MockSourcesServiceServer) GetWithdrawalSourcesByEntityID(arg0 context.Context, arg1 *sources.GetWithdrawalSourcesByEntityIDRequest) (*sources.GetWithdrawalSourcesByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalSourcesByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*sources.GetWithdrawalSourcesByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalSourcesByEntityID indicates an expected call of GetWithdrawalSourcesByEntityID.
func (mr *MockSourcesServiceServerMockRecorder) GetWithdrawalSourcesByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalSourcesByEntityID", reflect.TypeOf((*MockSourcesServiceServer)(nil).GetWithdrawalSourcesByEntityID), arg0, arg1)
}

// SetStatus mocks base method.
func (m *MockSourcesServiceServer) SetStatus(arg0 context.Context, arg1 *sources.SetStatusRequest) (*sources.SetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(*sources.SetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockSourcesServiceServerMockRecorder) SetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockSourcesServiceServer)(nil).SetStatus), arg0, arg1)
}

// UpdateSource mocks base method.
func (m *MockSourcesServiceServer) UpdateSource(arg0 context.Context, arg1 *sources.UpdateSourceRequest) (*sources.UpdateSourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSource", arg0, arg1)
	ret0, _ := ret[0].(*sources.UpdateSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSource indicates an expected call of UpdateSource.
func (mr *MockSourcesServiceServerMockRecorder) UpdateSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSource", reflect.TypeOf((*MockSourcesServiceServer)(nil).UpdateSource), arg0, arg1)
}

// mustEmbedUnimplementedSourcesServiceServer mocks base method.
func (m *MockSourcesServiceServer) mustEmbedUnimplementedSourcesServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSourcesServiceServer")
}

// mustEmbedUnimplementedSourcesServiceServer indicates an expected call of mustEmbedUnimplementedSourcesServiceServer.
func (mr *MockSourcesServiceServerMockRecorder) mustEmbedUnimplementedSourcesServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSourcesServiceServer", reflect.TypeOf((*MockSourcesServiceServer)(nil).mustEmbedUnimplementedSourcesServiceServer))
}

// MockUnsafeSourcesServiceServer is a mock of UnsafeSourcesServiceServer interface.
type MockUnsafeSourcesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSourcesServiceServerMockRecorder
}

// MockUnsafeSourcesServiceServerMockRecorder is the mock recorder for MockUnsafeSourcesServiceServer.
type MockUnsafeSourcesServiceServerMockRecorder struct {
	mock *MockUnsafeSourcesServiceServer
}

// NewMockUnsafeSourcesServiceServer creates a new mock instance.
func NewMockUnsafeSourcesServiceServer(ctrl *gomock.Controller) *MockUnsafeSourcesServiceServer {
	mock := &MockUnsafeSourcesServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSourcesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSourcesServiceServer) EXPECT() *MockUnsafeSourcesServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSourcesServiceServer mocks base method.
func (m *MockUnsafeSourcesServiceServer) mustEmbedUnimplementedSourcesServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSourcesServiceServer")
}

// mustEmbedUnimplementedSourcesServiceServer indicates an expected call of mustEmbedUnimplementedSourcesServiceServer.
func (mr *MockUnsafeSourcesServiceServerMockRecorder) mustEmbedUnimplementedSourcesServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSourcesServiceServer", reflect.TypeOf((*MockUnsafeSourcesServiceServer)(nil).mustEmbedUnimplementedSourcesServiceServer))
}
