// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/exchange_rates/exchange_rates.proto

package exchange_rates

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangeRatesServiceClient is the client API for ExchangeRatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeRatesServiceClient interface {
	// Get the most recent exchange rate from a given dataset
	GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error)
	// Get an exchange rate dataset by source and name
	GetDataSetBySourceAndName(ctx context.Context, in *GetDataSetBySourceAndNameRequest, opts ...grpc.CallOption) (*GetDataSetBySourceAndNameResponse, error)
	// Get blended exchange rates for quoting
	GetBlendedExchangeRate(ctx context.Context, in *GetBlendedExchangeRateRequest, opts ...grpc.CallOption) (*GetBlendedExchangeRateResponse, error)
}

type exchangeRatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeRatesServiceClient(cc grpc.ClientConnInterface) ExchangeRatesServiceClient {
	return &exchangeRatesServiceClient{cc}
}

func (c *exchangeRatesServiceClient) GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error) {
	out := new(GetExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/exchange_rates.ExchangeRatesService/GetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRatesServiceClient) GetDataSetBySourceAndName(ctx context.Context, in *GetDataSetBySourceAndNameRequest, opts ...grpc.CallOption) (*GetDataSetBySourceAndNameResponse, error) {
	out := new(GetDataSetBySourceAndNameResponse)
	err := c.cc.Invoke(ctx, "/exchange_rates.ExchangeRatesService/GetDataSetBySourceAndName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRatesServiceClient) GetBlendedExchangeRate(ctx context.Context, in *GetBlendedExchangeRateRequest, opts ...grpc.CallOption) (*GetBlendedExchangeRateResponse, error) {
	out := new(GetBlendedExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/exchange_rates.ExchangeRatesService/GetBlendedExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeRatesServiceServer is the server API for ExchangeRatesService service.
// All implementations must embed UnimplementedExchangeRatesServiceServer
// for forward compatibility
type ExchangeRatesServiceServer interface {
	// Get the most recent exchange rate from a given dataset
	GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error)
	// Get an exchange rate dataset by source and name
	GetDataSetBySourceAndName(context.Context, *GetDataSetBySourceAndNameRequest) (*GetDataSetBySourceAndNameResponse, error)
	// Get blended exchange rates for quoting
	GetBlendedExchangeRate(context.Context, *GetBlendedExchangeRateRequest) (*GetBlendedExchangeRateResponse, error)
	mustEmbedUnimplementedExchangeRatesServiceServer()
}

// UnimplementedExchangeRatesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeRatesServiceServer struct {
}

func (UnimplementedExchangeRatesServiceServer) GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (UnimplementedExchangeRatesServiceServer) GetDataSetBySourceAndName(context.Context, *GetDataSetBySourceAndNameRequest) (*GetDataSetBySourceAndNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSetBySourceAndName not implemented")
}
func (UnimplementedExchangeRatesServiceServer) GetBlendedExchangeRate(context.Context, *GetBlendedExchangeRateRequest) (*GetBlendedExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlendedExchangeRate not implemented")
}
func (UnimplementedExchangeRatesServiceServer) mustEmbedUnimplementedExchangeRatesServiceServer() {}

// UnsafeExchangeRatesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeRatesServiceServer will
// result in compilation errors.
type UnsafeExchangeRatesServiceServer interface {
	mustEmbedUnimplementedExchangeRatesServiceServer()
}

func RegisterExchangeRatesServiceServer(s grpc.ServiceRegistrar, srv ExchangeRatesServiceServer) {
	s.RegisterService(&ExchangeRatesService_ServiceDesc, srv)
}

func _ExchangeRatesService_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRatesServiceServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange_rates.ExchangeRatesService/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRatesServiceServer).GetExchangeRate(ctx, req.(*GetExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRatesService_GetDataSetBySourceAndName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataSetBySourceAndNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRatesServiceServer).GetDataSetBySourceAndName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange_rates.ExchangeRatesService/GetDataSetBySourceAndName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRatesServiceServer).GetDataSetBySourceAndName(ctx, req.(*GetDataSetBySourceAndNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRatesService_GetBlendedExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlendedExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRatesServiceServer).GetBlendedExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange_rates.ExchangeRatesService/GetBlendedExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRatesServiceServer).GetBlendedExchangeRate(ctx, req.(*GetBlendedExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeRatesService_ServiceDesc is the grpc.ServiceDesc for ExchangeRatesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeRatesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange_rates.ExchangeRatesService",
	HandlerType: (*ExchangeRatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExchangeRate",
			Handler:    _ExchangeRatesService_GetExchangeRate_Handler,
		},
		{
			MethodName: "GetDataSetBySourceAndName",
			Handler:    _ExchangeRatesService_GetDataSetBySourceAndName_Handler,
		},
		{
			MethodName: "GetBlendedExchangeRate",
			Handler:    _ExchangeRatesService_GetBlendedExchangeRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/exchange_rates/exchange_rates.proto",
}
