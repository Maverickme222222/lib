// Code generated by MockGen. DO NOT EDIT.
// Source: ../payment_gateway_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payment_gateway "github.com/kappapay/backend/lib/golang/src/kappa/services/payment_gateway"
	grpc "google.golang.org/grpc"
)

// MockPaymentGatewayServiceClient is a mock of PaymentGatewayServiceClient interface.
type MockPaymentGatewayServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentGatewayServiceClientMockRecorder
}

// MockPaymentGatewayServiceClientMockRecorder is the mock recorder for MockPaymentGatewayServiceClient.
type MockPaymentGatewayServiceClientMockRecorder struct {
	mock *MockPaymentGatewayServiceClient
}

// NewMockPaymentGatewayServiceClient creates a new mock instance.
func NewMockPaymentGatewayServiceClient(ctrl *gomock.Controller) *MockPaymentGatewayServiceClient {
	mock := &MockPaymentGatewayServiceClient{ctrl: ctrl}
	mock.recorder = &MockPaymentGatewayServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentGatewayServiceClient) EXPECT() *MockPaymentGatewayServiceClientMockRecorder {
	return m.recorder
}

// GetBankAccountForPaymentGateway mocks base method.
func (m *MockPaymentGatewayServiceClient) GetBankAccountForPaymentGateway(ctx context.Context, in *payment_gateway.GetBankAccountForPaymentGatewayRequest, opts ...grpc.CallOption) (*payment_gateway.GetBankAccountForPaymentGatewayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBankAccountForPaymentGateway", varargs...)
	ret0, _ := ret[0].(*payment_gateway.GetBankAccountForPaymentGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountForPaymentGateway indicates an expected call of GetBankAccountForPaymentGateway.
func (mr *MockPaymentGatewayServiceClientMockRecorder) GetBankAccountForPaymentGateway(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountForPaymentGateway", reflect.TypeOf((*MockPaymentGatewayServiceClient)(nil).GetBankAccountForPaymentGateway), varargs...)
}

// GetPaymentGatewayByID mocks base method.
func (m *MockPaymentGatewayServiceClient) GetPaymentGatewayByID(ctx context.Context, in *payment_gateway.GetPaymentGatewayByIDRequest, opts ...grpc.CallOption) (*payment_gateway.GetPaymentGatewayByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPaymentGatewayByID", varargs...)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayByID indicates an expected call of GetPaymentGatewayByID.
func (mr *MockPaymentGatewayServiceClientMockRecorder) GetPaymentGatewayByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayByID", reflect.TypeOf((*MockPaymentGatewayServiceClient)(nil).GetPaymentGatewayByID), varargs...)
}

// GetPaymentGatewayByName mocks base method.
func (m *MockPaymentGatewayServiceClient) GetPaymentGatewayByName(ctx context.Context, in *payment_gateway.GetPaymentGatewayByNameRequest, opts ...grpc.CallOption) (*payment_gateway.GetPaymentGatewayByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPaymentGatewayByName", varargs...)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayByName indicates an expected call of GetPaymentGatewayByName.
func (mr *MockPaymentGatewayServiceClientMockRecorder) GetPaymentGatewayByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayByName", reflect.TypeOf((*MockPaymentGatewayServiceClient)(nil).GetPaymentGatewayByName), varargs...)
}

// GetPaymentGatewayFeeSchedule mocks base method.
func (m *MockPaymentGatewayServiceClient) GetPaymentGatewayFeeSchedule(ctx context.Context, in *payment_gateway.GetPaymentGatewayFeeScheduleRequest, opts ...grpc.CallOption) (*payment_gateway.GetPaymentGatewayFeeScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPaymentGatewayFeeSchedule", varargs...)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayFeeScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayFeeSchedule indicates an expected call of GetPaymentGatewayFeeSchedule.
func (mr *MockPaymentGatewayServiceClientMockRecorder) GetPaymentGatewayFeeSchedule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayFeeSchedule", reflect.TypeOf((*MockPaymentGatewayServiceClient)(nil).GetPaymentGatewayFeeSchedule), varargs...)
}

// GetPaymentGatewayForDestination mocks base method.
func (m *MockPaymentGatewayServiceClient) GetPaymentGatewayForDestination(ctx context.Context, in *payment_gateway.GetPaymentGatewayForDestinationRequest, opts ...grpc.CallOption) (*payment_gateway.GetPaymentGatewayForDestinationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPaymentGatewayForDestination", varargs...)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayForDestinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayForDestination indicates an expected call of GetPaymentGatewayForDestination.
func (mr *MockPaymentGatewayServiceClientMockRecorder) GetPaymentGatewayForDestination(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayForDestination", reflect.TypeOf((*MockPaymentGatewayServiceClient)(nil).GetPaymentGatewayForDestination), varargs...)
}

// GetPaymentGatewayForSource mocks base method.
func (m *MockPaymentGatewayServiceClient) GetPaymentGatewayForSource(ctx context.Context, in *payment_gateway.GetPaymentGatewayForSourceRequest, opts ...grpc.CallOption) (*payment_gateway.GetPaymentGatewayForSourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPaymentGatewayForSource", varargs...)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayForSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayForSource indicates an expected call of GetPaymentGatewayForSource.
func (mr *MockPaymentGatewayServiceClientMockRecorder) GetPaymentGatewayForSource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayForSource", reflect.TypeOf((*MockPaymentGatewayServiceClient)(nil).GetPaymentGatewayForSource), varargs...)
}

// GetPaymentGatewayProcessingSchedule mocks base method.
func (m *MockPaymentGatewayServiceClient) GetPaymentGatewayProcessingSchedule(ctx context.Context, in *payment_gateway.GetPaymentGatewayProcessingScheduleRequest, opts ...grpc.CallOption) (*payment_gateway.GetPaymentGatewayProcessingScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPaymentGatewayProcessingSchedule", varargs...)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayProcessingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayProcessingSchedule indicates an expected call of GetPaymentGatewayProcessingSchedule.
func (mr *MockPaymentGatewayServiceClientMockRecorder) GetPaymentGatewayProcessingSchedule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayProcessingSchedule", reflect.TypeOf((*MockPaymentGatewayServiceClient)(nil).GetPaymentGatewayProcessingSchedule), varargs...)
}

// MockPaymentGatewayServiceServer is a mock of PaymentGatewayServiceServer interface.
type MockPaymentGatewayServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentGatewayServiceServerMockRecorder
}

// MockPaymentGatewayServiceServerMockRecorder is the mock recorder for MockPaymentGatewayServiceServer.
type MockPaymentGatewayServiceServerMockRecorder struct {
	mock *MockPaymentGatewayServiceServer
}

// NewMockPaymentGatewayServiceServer creates a new mock instance.
func NewMockPaymentGatewayServiceServer(ctrl *gomock.Controller) *MockPaymentGatewayServiceServer {
	mock := &MockPaymentGatewayServiceServer{ctrl: ctrl}
	mock.recorder = &MockPaymentGatewayServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentGatewayServiceServer) EXPECT() *MockPaymentGatewayServiceServerMockRecorder {
	return m.recorder
}

// GetBankAccountForPaymentGateway mocks base method.
func (m *MockPaymentGatewayServiceServer) GetBankAccountForPaymentGateway(arg0 context.Context, arg1 *payment_gateway.GetBankAccountForPaymentGatewayRequest) (*payment_gateway.GetBankAccountForPaymentGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccountForPaymentGateway", arg0, arg1)
	ret0, _ := ret[0].(*payment_gateway.GetBankAccountForPaymentGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountForPaymentGateway indicates an expected call of GetBankAccountForPaymentGateway.
func (mr *MockPaymentGatewayServiceServerMockRecorder) GetBankAccountForPaymentGateway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountForPaymentGateway", reflect.TypeOf((*MockPaymentGatewayServiceServer)(nil).GetBankAccountForPaymentGateway), arg0, arg1)
}

// GetPaymentGatewayByID mocks base method.
func (m *MockPaymentGatewayServiceServer) GetPaymentGatewayByID(arg0 context.Context, arg1 *payment_gateway.GetPaymentGatewayByIDRequest) (*payment_gateway.GetPaymentGatewayByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentGatewayByID", arg0, arg1)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayByID indicates an expected call of GetPaymentGatewayByID.
func (mr *MockPaymentGatewayServiceServerMockRecorder) GetPaymentGatewayByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayByID", reflect.TypeOf((*MockPaymentGatewayServiceServer)(nil).GetPaymentGatewayByID), arg0, arg1)
}

// GetPaymentGatewayByName mocks base method.
func (m *MockPaymentGatewayServiceServer) GetPaymentGatewayByName(arg0 context.Context, arg1 *payment_gateway.GetPaymentGatewayByNameRequest) (*payment_gateway.GetPaymentGatewayByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentGatewayByName", arg0, arg1)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayByName indicates an expected call of GetPaymentGatewayByName.
func (mr *MockPaymentGatewayServiceServerMockRecorder) GetPaymentGatewayByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayByName", reflect.TypeOf((*MockPaymentGatewayServiceServer)(nil).GetPaymentGatewayByName), arg0, arg1)
}

// GetPaymentGatewayFeeSchedule mocks base method.
func (m *MockPaymentGatewayServiceServer) GetPaymentGatewayFeeSchedule(arg0 context.Context, arg1 *payment_gateway.GetPaymentGatewayFeeScheduleRequest) (*payment_gateway.GetPaymentGatewayFeeScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentGatewayFeeSchedule", arg0, arg1)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayFeeScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayFeeSchedule indicates an expected call of GetPaymentGatewayFeeSchedule.
func (mr *MockPaymentGatewayServiceServerMockRecorder) GetPaymentGatewayFeeSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayFeeSchedule", reflect.TypeOf((*MockPaymentGatewayServiceServer)(nil).GetPaymentGatewayFeeSchedule), arg0, arg1)
}

// GetPaymentGatewayForDestination mocks base method.
func (m *MockPaymentGatewayServiceServer) GetPaymentGatewayForDestination(arg0 context.Context, arg1 *payment_gateway.GetPaymentGatewayForDestinationRequest) (*payment_gateway.GetPaymentGatewayForDestinationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentGatewayForDestination", arg0, arg1)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayForDestinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayForDestination indicates an expected call of GetPaymentGatewayForDestination.
func (mr *MockPaymentGatewayServiceServerMockRecorder) GetPaymentGatewayForDestination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayForDestination", reflect.TypeOf((*MockPaymentGatewayServiceServer)(nil).GetPaymentGatewayForDestination), arg0, arg1)
}

// GetPaymentGatewayForSource mocks base method.
func (m *MockPaymentGatewayServiceServer) GetPaymentGatewayForSource(arg0 context.Context, arg1 *payment_gateway.GetPaymentGatewayForSourceRequest) (*payment_gateway.GetPaymentGatewayForSourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentGatewayForSource", arg0, arg1)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayForSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayForSource indicates an expected call of GetPaymentGatewayForSource.
func (mr *MockPaymentGatewayServiceServerMockRecorder) GetPaymentGatewayForSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayForSource", reflect.TypeOf((*MockPaymentGatewayServiceServer)(nil).GetPaymentGatewayForSource), arg0, arg1)
}

// GetPaymentGatewayProcessingSchedule mocks base method.
func (m *MockPaymentGatewayServiceServer) GetPaymentGatewayProcessingSchedule(arg0 context.Context, arg1 *payment_gateway.GetPaymentGatewayProcessingScheduleRequest) (*payment_gateway.GetPaymentGatewayProcessingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentGatewayProcessingSchedule", arg0, arg1)
	ret0, _ := ret[0].(*payment_gateway.GetPaymentGatewayProcessingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentGatewayProcessingSchedule indicates an expected call of GetPaymentGatewayProcessingSchedule.
func (mr *MockPaymentGatewayServiceServerMockRecorder) GetPaymentGatewayProcessingSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentGatewayProcessingSchedule", reflect.TypeOf((*MockPaymentGatewayServiceServer)(nil).GetPaymentGatewayProcessingSchedule), arg0, arg1)
}

// mustEmbedUnimplementedPaymentGatewayServiceServer mocks base method.
func (m *MockPaymentGatewayServiceServer) mustEmbedUnimplementedPaymentGatewayServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentGatewayServiceServer")
}

// mustEmbedUnimplementedPaymentGatewayServiceServer indicates an expected call of mustEmbedUnimplementedPaymentGatewayServiceServer.
func (mr *MockPaymentGatewayServiceServerMockRecorder) mustEmbedUnimplementedPaymentGatewayServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentGatewayServiceServer", reflect.TypeOf((*MockPaymentGatewayServiceServer)(nil).mustEmbedUnimplementedPaymentGatewayServiceServer))
}

// MockUnsafePaymentGatewayServiceServer is a mock of UnsafePaymentGatewayServiceServer interface.
type MockUnsafePaymentGatewayServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePaymentGatewayServiceServerMockRecorder
}

// MockUnsafePaymentGatewayServiceServerMockRecorder is the mock recorder for MockUnsafePaymentGatewayServiceServer.
type MockUnsafePaymentGatewayServiceServerMockRecorder struct {
	mock *MockUnsafePaymentGatewayServiceServer
}

// NewMockUnsafePaymentGatewayServiceServer creates a new mock instance.
func NewMockUnsafePaymentGatewayServiceServer(ctrl *gomock.Controller) *MockUnsafePaymentGatewayServiceServer {
	mock := &MockUnsafePaymentGatewayServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePaymentGatewayServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePaymentGatewayServiceServer) EXPECT() *MockUnsafePaymentGatewayServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPaymentGatewayServiceServer mocks base method.
func (m *MockUnsafePaymentGatewayServiceServer) mustEmbedUnimplementedPaymentGatewayServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentGatewayServiceServer")
}

// mustEmbedUnimplementedPaymentGatewayServiceServer indicates an expected call of mustEmbedUnimplementedPaymentGatewayServiceServer.
func (mr *MockUnsafePaymentGatewayServiceServerMockRecorder) mustEmbedUnimplementedPaymentGatewayServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentGatewayServiceServer", reflect.TypeOf((*MockUnsafePaymentGatewayServiceServer)(nil).mustEmbedUnimplementedPaymentGatewayServiceServer))
}
