// Code generated by MockGen. DO NOT EDIT.
// Source: ../bank_accounts_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bank_accounts "github.com/kappapay/backend/lib/golang/src/kappa/services/bank_accounts"
	grpc "google.golang.org/grpc"
)

// MockBankAccountsServiceClient is a mock of BankAccountsServiceClient interface.
type MockBankAccountsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountsServiceClientMockRecorder
}

// MockBankAccountsServiceClientMockRecorder is the mock recorder for MockBankAccountsServiceClient.
type MockBankAccountsServiceClientMockRecorder struct {
	mock *MockBankAccountsServiceClient
}

// NewMockBankAccountsServiceClient creates a new mock instance.
func NewMockBankAccountsServiceClient(ctrl *gomock.Controller) *MockBankAccountsServiceClient {
	mock := &MockBankAccountsServiceClient{ctrl: ctrl}
	mock.recorder = &MockBankAccountsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccountsServiceClient) EXPECT() *MockBankAccountsServiceClientMockRecorder {
	return m.recorder
}

// CreateBankAccount mocks base method.
func (m *MockBankAccountsServiceClient) CreateBankAccount(ctx context.Context, in *bank_accounts.CreateBankAccountRequest, opts ...grpc.CallOption) (*bank_accounts.CreateBankAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBankAccount", varargs...)
	ret0, _ := ret[0].(*bank_accounts.CreateBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankAccount indicates an expected call of CreateBankAccount.
func (mr *MockBankAccountsServiceClientMockRecorder) CreateBankAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankAccount", reflect.TypeOf((*MockBankAccountsServiceClient)(nil).CreateBankAccount), varargs...)
}

// DeleteBankAccount mocks base method.
func (m *MockBankAccountsServiceClient) DeleteBankAccount(ctx context.Context, in *bank_accounts.DeleteBankAccountRequest, opts ...grpc.CallOption) (*bank_accounts.DeleteBankAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBankAccount", varargs...)
	ret0, _ := ret[0].(*bank_accounts.DeleteBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBankAccount indicates an expected call of DeleteBankAccount.
func (mr *MockBankAccountsServiceClientMockRecorder) DeleteBankAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankAccount", reflect.TypeOf((*MockBankAccountsServiceClient)(nil).DeleteBankAccount), varargs...)
}

// GetBankAccountByEntityIdAndName mocks base method.
func (m *MockBankAccountsServiceClient) GetBankAccountByEntityIdAndName(ctx context.Context, in *bank_accounts.GetBankAccountByEntityIdAndNameRequest, opts ...grpc.CallOption) (*bank_accounts.GetBankAccountByEntityIdAndNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBankAccountByEntityIdAndName", varargs...)
	ret0, _ := ret[0].(*bank_accounts.GetBankAccountByEntityIdAndNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountByEntityIdAndName indicates an expected call of GetBankAccountByEntityIdAndName.
func (mr *MockBankAccountsServiceClientMockRecorder) GetBankAccountByEntityIdAndName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountByEntityIdAndName", reflect.TypeOf((*MockBankAccountsServiceClient)(nil).GetBankAccountByEntityIdAndName), varargs...)
}

// GetBankAccountById mocks base method.
func (m *MockBankAccountsServiceClient) GetBankAccountById(ctx context.Context, in *bank_accounts.GetBankAccountByIdRequest, opts ...grpc.CallOption) (*bank_accounts.GetBankAccountByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBankAccountById", varargs...)
	ret0, _ := ret[0].(*bank_accounts.GetBankAccountByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountById indicates an expected call of GetBankAccountById.
func (mr *MockBankAccountsServiceClientMockRecorder) GetBankAccountById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountById", reflect.TypeOf((*MockBankAccountsServiceClient)(nil).GetBankAccountById), varargs...)
}

// UpdateBankAccount mocks base method.
func (m *MockBankAccountsServiceClient) UpdateBankAccount(ctx context.Context, in *bank_accounts.UpdateBankAccountRequest, opts ...grpc.CallOption) (*bank_accounts.UpdateBankAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBankAccount", varargs...)
	ret0, _ := ret[0].(*bank_accounts.UpdateBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBankAccount indicates an expected call of UpdateBankAccount.
func (mr *MockBankAccountsServiceClientMockRecorder) UpdateBankAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankAccount", reflect.TypeOf((*MockBankAccountsServiceClient)(nil).UpdateBankAccount), varargs...)
}

// MockBankAccountsServiceServer is a mock of BankAccountsServiceServer interface.
type MockBankAccountsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountsServiceServerMockRecorder
}

// MockBankAccountsServiceServerMockRecorder is the mock recorder for MockBankAccountsServiceServer.
type MockBankAccountsServiceServerMockRecorder struct {
	mock *MockBankAccountsServiceServer
}

// NewMockBankAccountsServiceServer creates a new mock instance.
func NewMockBankAccountsServiceServer(ctrl *gomock.Controller) *MockBankAccountsServiceServer {
	mock := &MockBankAccountsServiceServer{ctrl: ctrl}
	mock.recorder = &MockBankAccountsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccountsServiceServer) EXPECT() *MockBankAccountsServiceServerMockRecorder {
	return m.recorder
}

// CreateBankAccount mocks base method.
func (m *MockBankAccountsServiceServer) CreateBankAccount(arg0 context.Context, arg1 *bank_accounts.CreateBankAccountRequest) (*bank_accounts.CreateBankAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBankAccount", arg0, arg1)
	ret0, _ := ret[0].(*bank_accounts.CreateBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankAccount indicates an expected call of CreateBankAccount.
func (mr *MockBankAccountsServiceServerMockRecorder) CreateBankAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankAccount", reflect.TypeOf((*MockBankAccountsServiceServer)(nil).CreateBankAccount), arg0, arg1)
}

// DeleteBankAccount mocks base method.
func (m *MockBankAccountsServiceServer) DeleteBankAccount(arg0 context.Context, arg1 *bank_accounts.DeleteBankAccountRequest) (*bank_accounts.DeleteBankAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBankAccount", arg0, arg1)
	ret0, _ := ret[0].(*bank_accounts.DeleteBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBankAccount indicates an expected call of DeleteBankAccount.
func (mr *MockBankAccountsServiceServerMockRecorder) DeleteBankAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankAccount", reflect.TypeOf((*MockBankAccountsServiceServer)(nil).DeleteBankAccount), arg0, arg1)
}

// GetBankAccountByEntityIdAndName mocks base method.
func (m *MockBankAccountsServiceServer) GetBankAccountByEntityIdAndName(arg0 context.Context, arg1 *bank_accounts.GetBankAccountByEntityIdAndNameRequest) (*bank_accounts.GetBankAccountByEntityIdAndNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccountByEntityIdAndName", arg0, arg1)
	ret0, _ := ret[0].(*bank_accounts.GetBankAccountByEntityIdAndNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountByEntityIdAndName indicates an expected call of GetBankAccountByEntityIdAndName.
func (mr *MockBankAccountsServiceServerMockRecorder) GetBankAccountByEntityIdAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountByEntityIdAndName", reflect.TypeOf((*MockBankAccountsServiceServer)(nil).GetBankAccountByEntityIdAndName), arg0, arg1)
}

// GetBankAccountById mocks base method.
func (m *MockBankAccountsServiceServer) GetBankAccountById(arg0 context.Context, arg1 *bank_accounts.GetBankAccountByIdRequest) (*bank_accounts.GetBankAccountByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccountById", arg0, arg1)
	ret0, _ := ret[0].(*bank_accounts.GetBankAccountByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountById indicates an expected call of GetBankAccountById.
func (mr *MockBankAccountsServiceServerMockRecorder) GetBankAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountById", reflect.TypeOf((*MockBankAccountsServiceServer)(nil).GetBankAccountById), arg0, arg1)
}

// UpdateBankAccount mocks base method.
func (m *MockBankAccountsServiceServer) UpdateBankAccount(arg0 context.Context, arg1 *bank_accounts.UpdateBankAccountRequest) (*bank_accounts.UpdateBankAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBankAccount", arg0, arg1)
	ret0, _ := ret[0].(*bank_accounts.UpdateBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBankAccount indicates an expected call of UpdateBankAccount.
func (mr *MockBankAccountsServiceServerMockRecorder) UpdateBankAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankAccount", reflect.TypeOf((*MockBankAccountsServiceServer)(nil).UpdateBankAccount), arg0, arg1)
}

// mustEmbedUnimplementedBankAccountsServiceServer mocks base method.
func (m *MockBankAccountsServiceServer) mustEmbedUnimplementedBankAccountsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBankAccountsServiceServer")
}

// mustEmbedUnimplementedBankAccountsServiceServer indicates an expected call of mustEmbedUnimplementedBankAccountsServiceServer.
func (mr *MockBankAccountsServiceServerMockRecorder) mustEmbedUnimplementedBankAccountsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBankAccountsServiceServer", reflect.TypeOf((*MockBankAccountsServiceServer)(nil).mustEmbedUnimplementedBankAccountsServiceServer))
}

// MockUnsafeBankAccountsServiceServer is a mock of UnsafeBankAccountsServiceServer interface.
type MockUnsafeBankAccountsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBankAccountsServiceServerMockRecorder
}

// MockUnsafeBankAccountsServiceServerMockRecorder is the mock recorder for MockUnsafeBankAccountsServiceServer.
type MockUnsafeBankAccountsServiceServerMockRecorder struct {
	mock *MockUnsafeBankAccountsServiceServer
}

// NewMockUnsafeBankAccountsServiceServer creates a new mock instance.
func NewMockUnsafeBankAccountsServiceServer(ctrl *gomock.Controller) *MockUnsafeBankAccountsServiceServer {
	mock := &MockUnsafeBankAccountsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBankAccountsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBankAccountsServiceServer) EXPECT() *MockUnsafeBankAccountsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBankAccountsServiceServer mocks base method.
func (m *MockUnsafeBankAccountsServiceServer) mustEmbedUnimplementedBankAccountsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBankAccountsServiceServer")
}

// mustEmbedUnimplementedBankAccountsServiceServer indicates an expected call of mustEmbedUnimplementedBankAccountsServiceServer.
func (mr *MockUnsafeBankAccountsServiceServerMockRecorder) mustEmbedUnimplementedBankAccountsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBankAccountsServiceServer", reflect.TypeOf((*MockUnsafeBankAccountsServiceServer)(nil).mustEmbedUnimplementedBankAccountsServiceServer))
}
