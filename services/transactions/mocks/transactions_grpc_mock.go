// Code generated by MockGen. DO NOT EDIT.
// Source: ../transactions_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transactions "github.com/kappapay/backend/lib/golang/src/kappa/services/transactions"
	grpc "google.golang.org/grpc"
)

// MockTransactionsServiceClient is a mock of TransactionsServiceClient interface.
type MockTransactionsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsServiceClientMockRecorder
}

// MockTransactionsServiceClientMockRecorder is the mock recorder for MockTransactionsServiceClient.
type MockTransactionsServiceClientMockRecorder struct {
	mock *MockTransactionsServiceClient
}

// NewMockTransactionsServiceClient creates a new mock instance.
func NewMockTransactionsServiceClient(ctrl *gomock.Controller) *MockTransactionsServiceClient {
	mock := &MockTransactionsServiceClient{ctrl: ctrl}
	mock.recorder = &MockTransactionsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsServiceClient) EXPECT() *MockTransactionsServiceClientMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionsServiceClient) CreateTransaction(ctx context.Context, in *transactions.CreateTransactionRequest, opts ...grpc.CallOption) (*transactions.CreateTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransaction", varargs...)
	ret0, _ := ret[0].(*transactions.CreateTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionsServiceClientMockRecorder) CreateTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionsServiceClient)(nil).CreateTransaction), varargs...)
}

// GetTransactionByID mocks base method.
func (m *MockTransactionsServiceClient) GetTransactionByID(ctx context.Context, in *transactions.GetTransactionByIDRequest, opts ...grpc.CallOption) (*transactions.GetTransactionByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionByID", varargs...)
	ret0, _ := ret[0].(*transactions.GetTransactionByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionsServiceClientMockRecorder) GetTransactionByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionsServiceClient)(nil).GetTransactionByID), varargs...)
}

// GetTransactionsByDestinationIDsTypeAndStatuses mocks base method.
func (m *MockTransactionsServiceClient) GetTransactionsByDestinationIDsTypeAndStatuses(ctx context.Context, in *transactions.GetTransactionsByDestinationIDsTypeAndStatusesRequest, opts ...grpc.CallOption) (*transactions.GetTransactionsByDestinationIDsTypeAndStatusesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionsByDestinationIDsTypeAndStatuses", varargs...)
	ret0, _ := ret[0].(*transactions.GetTransactionsByDestinationIDsTypeAndStatusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByDestinationIDsTypeAndStatuses indicates an expected call of GetTransactionsByDestinationIDsTypeAndStatuses.
func (mr *MockTransactionsServiceClientMockRecorder) GetTransactionsByDestinationIDsTypeAndStatuses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByDestinationIDsTypeAndStatuses", reflect.TypeOf((*MockTransactionsServiceClient)(nil).GetTransactionsByDestinationIDsTypeAndStatuses), varargs...)
}

// GetTransactionsByEntityID mocks base method.
func (m *MockTransactionsServiceClient) GetTransactionsByEntityID(ctx context.Context, in *transactions.GetTransactionsByEntityIDRequest, opts ...grpc.CallOption) (*transactions.GetTransactionsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionsByEntityID", varargs...)
	ret0, _ := ret[0].(*transactions.GetTransactionsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByEntityID indicates an expected call of GetTransactionsByEntityID.
func (mr *MockTransactionsServiceClientMockRecorder) GetTransactionsByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByEntityID", reflect.TypeOf((*MockTransactionsServiceClient)(nil).GetTransactionsByEntityID), varargs...)
}

// GetTransactionsBySourceIDAndStatuses mocks base method.
func (m *MockTransactionsServiceClient) GetTransactionsBySourceIDAndStatuses(ctx context.Context, in *transactions.GetTransactionsBySourceIDAndStatusesRequest, opts ...grpc.CallOption) (*transactions.GetTransactionsBySourceIDAndStatusesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionsBySourceIDAndStatuses", varargs...)
	ret0, _ := ret[0].(*transactions.GetTransactionsBySourceIDAndStatusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsBySourceIDAndStatuses indicates an expected call of GetTransactionsBySourceIDAndStatuses.
func (mr *MockTransactionsServiceClientMockRecorder) GetTransactionsBySourceIDAndStatuses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsBySourceIDAndStatuses", reflect.TypeOf((*MockTransactionsServiceClient)(nil).GetTransactionsBySourceIDAndStatuses), varargs...)
}

// GetTransactionsBySourceIDs mocks base method.
func (m *MockTransactionsServiceClient) GetTransactionsBySourceIDs(ctx context.Context, in *transactions.GetTransactionsBySourceIDsRequest, opts ...grpc.CallOption) (*transactions.GetTransactionsBySourceIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionsBySourceIDs", varargs...)
	ret0, _ := ret[0].(*transactions.GetTransactionsBySourceIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsBySourceIDs indicates an expected call of GetTransactionsBySourceIDs.
func (mr *MockTransactionsServiceClientMockRecorder) GetTransactionsBySourceIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsBySourceIDs", reflect.TypeOf((*MockTransactionsServiceClient)(nil).GetTransactionsBySourceIDs), varargs...)
}

// GetTransactionsBySourceIDsAndStatuses mocks base method.
func (m *MockTransactionsServiceClient) GetTransactionsBySourceIDsAndStatuses(ctx context.Context, in *transactions.GetTransactionsBySourceIDsAndStatusesRequest, opts ...grpc.CallOption) (*transactions.GetTransactionsBySourceIDsAndStatusesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionsBySourceIDsAndStatuses", varargs...)
	ret0, _ := ret[0].(*transactions.GetTransactionsBySourceIDsAndStatusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsBySourceIDsAndStatuses indicates an expected call of GetTransactionsBySourceIDsAndStatuses.
func (mr *MockTransactionsServiceClientMockRecorder) GetTransactionsBySourceIDsAndStatuses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsBySourceIDsAndStatuses", reflect.TypeOf((*MockTransactionsServiceClient)(nil).GetTransactionsBySourceIDsAndStatuses), varargs...)
}

// UpdateTransaction mocks base method.
func (m *MockTransactionsServiceClient) UpdateTransaction(ctx context.Context, in *transactions.UpdateTransactionRequest, opts ...grpc.CallOption) (*transactions.UpdateTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransaction", varargs...)
	ret0, _ := ret[0].(*transactions.UpdateTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionsServiceClientMockRecorder) UpdateTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactionsServiceClient)(nil).UpdateTransaction), varargs...)
}

// MockTransactionsServiceServer is a mock of TransactionsServiceServer interface.
type MockTransactionsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsServiceServerMockRecorder
}

// MockTransactionsServiceServerMockRecorder is the mock recorder for MockTransactionsServiceServer.
type MockTransactionsServiceServerMockRecorder struct {
	mock *MockTransactionsServiceServer
}

// NewMockTransactionsServiceServer creates a new mock instance.
func NewMockTransactionsServiceServer(ctrl *gomock.Controller) *MockTransactionsServiceServer {
	mock := &MockTransactionsServiceServer{ctrl: ctrl}
	mock.recorder = &MockTransactionsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsServiceServer) EXPECT() *MockTransactionsServiceServerMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionsServiceServer) CreateTransaction(arg0 context.Context, arg1 *transactions.CreateTransactionRequest) (*transactions.CreateTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*transactions.CreateTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionsServiceServerMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionsServiceServer)(nil).CreateTransaction), arg0, arg1)
}

// GetTransactionByID mocks base method.
func (m *MockTransactionsServiceServer) GetTransactionByID(arg0 context.Context, arg1 *transactions.GetTransactionByIDRequest) (*transactions.GetTransactionByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", arg0, arg1)
	ret0, _ := ret[0].(*transactions.GetTransactionByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionsServiceServerMockRecorder) GetTransactionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionsServiceServer)(nil).GetTransactionByID), arg0, arg1)
}

// GetTransactionsByDestinationIDsTypeAndStatuses mocks base method.
func (m *MockTransactionsServiceServer) GetTransactionsByDestinationIDsTypeAndStatuses(arg0 context.Context, arg1 *transactions.GetTransactionsByDestinationIDsTypeAndStatusesRequest) (*transactions.GetTransactionsByDestinationIDsTypeAndStatusesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByDestinationIDsTypeAndStatuses", arg0, arg1)
	ret0, _ := ret[0].(*transactions.GetTransactionsByDestinationIDsTypeAndStatusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByDestinationIDsTypeAndStatuses indicates an expected call of GetTransactionsByDestinationIDsTypeAndStatuses.
func (mr *MockTransactionsServiceServerMockRecorder) GetTransactionsByDestinationIDsTypeAndStatuses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByDestinationIDsTypeAndStatuses", reflect.TypeOf((*MockTransactionsServiceServer)(nil).GetTransactionsByDestinationIDsTypeAndStatuses), arg0, arg1)
}

// GetTransactionsByEntityID mocks base method.
func (m *MockTransactionsServiceServer) GetTransactionsByEntityID(arg0 context.Context, arg1 *transactions.GetTransactionsByEntityIDRequest) (*transactions.GetTransactionsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*transactions.GetTransactionsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByEntityID indicates an expected call of GetTransactionsByEntityID.
func (mr *MockTransactionsServiceServerMockRecorder) GetTransactionsByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByEntityID", reflect.TypeOf((*MockTransactionsServiceServer)(nil).GetTransactionsByEntityID), arg0, arg1)
}

// GetTransactionsBySourceIDAndStatuses mocks base method.
func (m *MockTransactionsServiceServer) GetTransactionsBySourceIDAndStatuses(arg0 context.Context, arg1 *transactions.GetTransactionsBySourceIDAndStatusesRequest) (*transactions.GetTransactionsBySourceIDAndStatusesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsBySourceIDAndStatuses", arg0, arg1)
	ret0, _ := ret[0].(*transactions.GetTransactionsBySourceIDAndStatusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsBySourceIDAndStatuses indicates an expected call of GetTransactionsBySourceIDAndStatuses.
func (mr *MockTransactionsServiceServerMockRecorder) GetTransactionsBySourceIDAndStatuses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsBySourceIDAndStatuses", reflect.TypeOf((*MockTransactionsServiceServer)(nil).GetTransactionsBySourceIDAndStatuses), arg0, arg1)
}

// GetTransactionsBySourceIDs mocks base method.
func (m *MockTransactionsServiceServer) GetTransactionsBySourceIDs(arg0 context.Context, arg1 *transactions.GetTransactionsBySourceIDsRequest) (*transactions.GetTransactionsBySourceIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsBySourceIDs", arg0, arg1)
	ret0, _ := ret[0].(*transactions.GetTransactionsBySourceIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsBySourceIDs indicates an expected call of GetTransactionsBySourceIDs.
func (mr *MockTransactionsServiceServerMockRecorder) GetTransactionsBySourceIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsBySourceIDs", reflect.TypeOf((*MockTransactionsServiceServer)(nil).GetTransactionsBySourceIDs), arg0, arg1)
}

// GetTransactionsBySourceIDsAndStatuses mocks base method.
func (m *MockTransactionsServiceServer) GetTransactionsBySourceIDsAndStatuses(arg0 context.Context, arg1 *transactions.GetTransactionsBySourceIDsAndStatusesRequest) (*transactions.GetTransactionsBySourceIDsAndStatusesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsBySourceIDsAndStatuses", arg0, arg1)
	ret0, _ := ret[0].(*transactions.GetTransactionsBySourceIDsAndStatusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsBySourceIDsAndStatuses indicates an expected call of GetTransactionsBySourceIDsAndStatuses.
func (mr *MockTransactionsServiceServerMockRecorder) GetTransactionsBySourceIDsAndStatuses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsBySourceIDsAndStatuses", reflect.TypeOf((*MockTransactionsServiceServer)(nil).GetTransactionsBySourceIDsAndStatuses), arg0, arg1)
}

// UpdateTransaction mocks base method.
func (m *MockTransactionsServiceServer) UpdateTransaction(arg0 context.Context, arg1 *transactions.UpdateTransactionRequest) (*transactions.UpdateTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*transactions.UpdateTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionsServiceServerMockRecorder) UpdateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactionsServiceServer)(nil).UpdateTransaction), arg0, arg1)
}

// mustEmbedUnimplementedTransactionsServiceServer mocks base method.
func (m *MockTransactionsServiceServer) mustEmbedUnimplementedTransactionsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTransactionsServiceServer")
}

// mustEmbedUnimplementedTransactionsServiceServer indicates an expected call of mustEmbedUnimplementedTransactionsServiceServer.
func (mr *MockTransactionsServiceServerMockRecorder) mustEmbedUnimplementedTransactionsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTransactionsServiceServer", reflect.TypeOf((*MockTransactionsServiceServer)(nil).mustEmbedUnimplementedTransactionsServiceServer))
}

// MockUnsafeTransactionsServiceServer is a mock of UnsafeTransactionsServiceServer interface.
type MockUnsafeTransactionsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTransactionsServiceServerMockRecorder
}

// MockUnsafeTransactionsServiceServerMockRecorder is the mock recorder for MockUnsafeTransactionsServiceServer.
type MockUnsafeTransactionsServiceServerMockRecorder struct {
	mock *MockUnsafeTransactionsServiceServer
}

// NewMockUnsafeTransactionsServiceServer creates a new mock instance.
func NewMockUnsafeTransactionsServiceServer(ctrl *gomock.Controller) *MockUnsafeTransactionsServiceServer {
	mock := &MockUnsafeTransactionsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTransactionsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTransactionsServiceServer) EXPECT() *MockUnsafeTransactionsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTransactionsServiceServer mocks base method.
func (m *MockUnsafeTransactionsServiceServer) mustEmbedUnimplementedTransactionsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTransactionsServiceServer")
}

// mustEmbedUnimplementedTransactionsServiceServer indicates an expected call of mustEmbedUnimplementedTransactionsServiceServer.
func (mr *MockUnsafeTransactionsServiceServerMockRecorder) mustEmbedUnimplementedTransactionsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTransactionsServiceServer", reflect.TypeOf((*MockUnsafeTransactionsServiceServer)(nil).mustEmbedUnimplementedTransactionsServiceServer))
}
