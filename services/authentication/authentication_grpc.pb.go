// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/authentication/authentication.proto

package authentication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	ValidateSessionToken(ctx context.Context, in *ValidateSessionTokenRequest, opts ...grpc.CallOption) (*ValidateSessionTokenResponse, error)
	SendOTPSms(ctx context.Context, in *SendOTPSmsRequest, opts ...grpc.CallOption) (*SendOTPSmsResponse, error)
	VerifyOTPSms(ctx context.Context, in *VerifyOTPSmsRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error)
	AuthenticateOTPSms(ctx context.Context, in *AuthenticateOTPSmsRequest, opts ...grpc.CallOption) (*AuthenticateOTPResponse, error)
	SendOTPEmail(ctx context.Context, in *SendOTPEmailRequest, opts ...grpc.CallOption) (*SendOTPEmailResponse, error)
	VerifyOTPEmail(ctx context.Context, in *VerifyOTPEmailRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error)
	AuthenticateOTPEmail(ctx context.Context, in *AuthenticateOTPEmailRequest, opts ...grpc.CallOption) (*AuthenticateOTPResponse, error)
	ValidateEntityToken(ctx context.Context, in *ValidateEntityTokenRequest, opts ...grpc.CallOption) (*ValidateEntityTokenResponse, error)
	GetEntityToken(ctx context.Context, in *GetEntityTokenRequest, opts ...grpc.CallOption) (*GetEntityTokenResponse, error)
	GetBusinessMemberLinkToken(ctx context.Context, in *GetBusinessMemberLinkTokenRequest, opts ...grpc.CallOption) (*GetBusinessMemberLinkTokenResponse, error)
	AuthenticateBusinessMemberLinkToken(ctx context.Context, in *AuthenticateBusinessMemberLinkTokenRequest, opts ...grpc.CallOption) (*AuthenticateBusinessMemberLinkTokenResponse, error)
	InvalidateBusinessMemberLinkToken(ctx context.Context, in *InvalidateBusinessMemberLinkTokenRequest, opts ...grpc.CallOption) (*InvalidateBusinessMemberLinkTokenResponse, error)
	ValidateBusinessMemberSessionToken(ctx context.Context, in *ValidateBusinessMemberSessionTokenRequest, opts ...grpc.CallOption) (*ValidateBusinessMemberSessionTokenResponse, error)
	GetBusinessMemberLinkRecords(ctx context.Context, in *GetBusinessMemberLinkRecordsRequest, opts ...grpc.CallOption) (*GetBusinessMemberLinkRecordsResponse, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) ValidateSessionToken(ctx context.Context, in *ValidateSessionTokenRequest, opts ...grpc.CallOption) (*ValidateSessionTokenResponse, error) {
	out := new(ValidateSessionTokenResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/ValidateSessionToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SendOTPSms(ctx context.Context, in *SendOTPSmsRequest, opts ...grpc.CallOption) (*SendOTPSmsResponse, error) {
	out := new(SendOTPSmsResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/SendOTPSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) VerifyOTPSms(ctx context.Context, in *VerifyOTPSmsRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error) {
	out := new(VerifyOTPResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/VerifyOTPSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) AuthenticateOTPSms(ctx context.Context, in *AuthenticateOTPSmsRequest, opts ...grpc.CallOption) (*AuthenticateOTPResponse, error) {
	out := new(AuthenticateOTPResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/AuthenticateOTPSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SendOTPEmail(ctx context.Context, in *SendOTPEmailRequest, opts ...grpc.CallOption) (*SendOTPEmailResponse, error) {
	out := new(SendOTPEmailResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/SendOTPEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) VerifyOTPEmail(ctx context.Context, in *VerifyOTPEmailRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error) {
	out := new(VerifyOTPResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/VerifyOTPEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) AuthenticateOTPEmail(ctx context.Context, in *AuthenticateOTPEmailRequest, opts ...grpc.CallOption) (*AuthenticateOTPResponse, error) {
	out := new(AuthenticateOTPResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/AuthenticateOTPEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ValidateEntityToken(ctx context.Context, in *ValidateEntityTokenRequest, opts ...grpc.CallOption) (*ValidateEntityTokenResponse, error) {
	out := new(ValidateEntityTokenResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/ValidateEntityToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetEntityToken(ctx context.Context, in *GetEntityTokenRequest, opts ...grpc.CallOption) (*GetEntityTokenResponse, error) {
	out := new(GetEntityTokenResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/GetEntityToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetBusinessMemberLinkToken(ctx context.Context, in *GetBusinessMemberLinkTokenRequest, opts ...grpc.CallOption) (*GetBusinessMemberLinkTokenResponse, error) {
	out := new(GetBusinessMemberLinkTokenResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/GetBusinessMemberLinkToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) AuthenticateBusinessMemberLinkToken(ctx context.Context, in *AuthenticateBusinessMemberLinkTokenRequest, opts ...grpc.CallOption) (*AuthenticateBusinessMemberLinkTokenResponse, error) {
	out := new(AuthenticateBusinessMemberLinkTokenResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/AuthenticateBusinessMemberLinkToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) InvalidateBusinessMemberLinkToken(ctx context.Context, in *InvalidateBusinessMemberLinkTokenRequest, opts ...grpc.CallOption) (*InvalidateBusinessMemberLinkTokenResponse, error) {
	out := new(InvalidateBusinessMemberLinkTokenResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/InvalidateBusinessMemberLinkToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ValidateBusinessMemberSessionToken(ctx context.Context, in *ValidateBusinessMemberSessionTokenRequest, opts ...grpc.CallOption) (*ValidateBusinessMemberSessionTokenResponse, error) {
	out := new(ValidateBusinessMemberSessionTokenResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/ValidateBusinessMemberSessionToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetBusinessMemberLinkRecords(ctx context.Context, in *GetBusinessMemberLinkRecordsRequest, opts ...grpc.CallOption) (*GetBusinessMemberLinkRecordsResponse, error) {
	out := new(GetBusinessMemberLinkRecordsResponse)
	err := c.cc.Invoke(ctx, "/authentication.AuthenticationService/GetBusinessMemberLinkRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	ValidateSessionToken(context.Context, *ValidateSessionTokenRequest) (*ValidateSessionTokenResponse, error)
	SendOTPSms(context.Context, *SendOTPSmsRequest) (*SendOTPSmsResponse, error)
	VerifyOTPSms(context.Context, *VerifyOTPSmsRequest) (*VerifyOTPResponse, error)
	AuthenticateOTPSms(context.Context, *AuthenticateOTPSmsRequest) (*AuthenticateOTPResponse, error)
	SendOTPEmail(context.Context, *SendOTPEmailRequest) (*SendOTPEmailResponse, error)
	VerifyOTPEmail(context.Context, *VerifyOTPEmailRequest) (*VerifyOTPResponse, error)
	AuthenticateOTPEmail(context.Context, *AuthenticateOTPEmailRequest) (*AuthenticateOTPResponse, error)
	ValidateEntityToken(context.Context, *ValidateEntityTokenRequest) (*ValidateEntityTokenResponse, error)
	GetEntityToken(context.Context, *GetEntityTokenRequest) (*GetEntityTokenResponse, error)
	GetBusinessMemberLinkToken(context.Context, *GetBusinessMemberLinkTokenRequest) (*GetBusinessMemberLinkTokenResponse, error)
	AuthenticateBusinessMemberLinkToken(context.Context, *AuthenticateBusinessMemberLinkTokenRequest) (*AuthenticateBusinessMemberLinkTokenResponse, error)
	InvalidateBusinessMemberLinkToken(context.Context, *InvalidateBusinessMemberLinkTokenRequest) (*InvalidateBusinessMemberLinkTokenResponse, error)
	ValidateBusinessMemberSessionToken(context.Context, *ValidateBusinessMemberSessionTokenRequest) (*ValidateBusinessMemberSessionTokenResponse, error)
	GetBusinessMemberLinkRecords(context.Context, *GetBusinessMemberLinkRecordsRequest) (*GetBusinessMemberLinkRecordsResponse, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) ValidateSessionToken(context.Context, *ValidateSessionTokenRequest) (*ValidateSessionTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSessionToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) SendOTPSms(context.Context, *SendOTPSmsRequest) (*SendOTPSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOTPSms not implemented")
}
func (UnimplementedAuthenticationServiceServer) VerifyOTPSms(context.Context, *VerifyOTPSmsRequest) (*VerifyOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOTPSms not implemented")
}
func (UnimplementedAuthenticationServiceServer) AuthenticateOTPSms(context.Context, *AuthenticateOTPSmsRequest) (*AuthenticateOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateOTPSms not implemented")
}
func (UnimplementedAuthenticationServiceServer) SendOTPEmail(context.Context, *SendOTPEmailRequest) (*SendOTPEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOTPEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) VerifyOTPEmail(context.Context, *VerifyOTPEmailRequest) (*VerifyOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOTPEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) AuthenticateOTPEmail(context.Context, *AuthenticateOTPEmailRequest) (*AuthenticateOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateOTPEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) ValidateEntityToken(context.Context, *ValidateEntityTokenRequest) (*ValidateEntityTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEntityToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) GetEntityToken(context.Context, *GetEntityTokenRequest) (*GetEntityTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) GetBusinessMemberLinkToken(context.Context, *GetBusinessMemberLinkTokenRequest) (*GetBusinessMemberLinkTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessMemberLinkToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) AuthenticateBusinessMemberLinkToken(context.Context, *AuthenticateBusinessMemberLinkTokenRequest) (*AuthenticateBusinessMemberLinkTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateBusinessMemberLinkToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) InvalidateBusinessMemberLinkToken(context.Context, *InvalidateBusinessMemberLinkTokenRequest) (*InvalidateBusinessMemberLinkTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateBusinessMemberLinkToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) ValidateBusinessMemberSessionToken(context.Context, *ValidateBusinessMemberSessionTokenRequest) (*ValidateBusinessMemberSessionTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBusinessMemberSessionToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) GetBusinessMemberLinkRecords(context.Context, *GetBusinessMemberLinkRecordsRequest) (*GetBusinessMemberLinkRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessMemberLinkRecords not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_ValidateSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSessionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ValidateSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/ValidateSessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ValidateSessionToken(ctx, req.(*ValidateSessionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SendOTPSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOTPSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SendOTPSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/SendOTPSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SendOTPSms(ctx, req.(*SendOTPSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_VerifyOTPSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOTPSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).VerifyOTPSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/VerifyOTPSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).VerifyOTPSms(ctx, req.(*VerifyOTPSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_AuthenticateOTPSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateOTPSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).AuthenticateOTPSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/AuthenticateOTPSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).AuthenticateOTPSms(ctx, req.(*AuthenticateOTPSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SendOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SendOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/SendOTPEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SendOTPEmail(ctx, req.(*SendOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_VerifyOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).VerifyOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/VerifyOTPEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).VerifyOTPEmail(ctx, req.(*VerifyOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_AuthenticateOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).AuthenticateOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/AuthenticateOTPEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).AuthenticateOTPEmail(ctx, req.(*AuthenticateOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ValidateEntityToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEntityTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ValidateEntityToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/ValidateEntityToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ValidateEntityToken(ctx, req.(*ValidateEntityTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetEntityToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetEntityToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/GetEntityToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetEntityToken(ctx, req.(*GetEntityTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetBusinessMemberLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessMemberLinkTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetBusinessMemberLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/GetBusinessMemberLinkToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetBusinessMemberLinkToken(ctx, req.(*GetBusinessMemberLinkTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_AuthenticateBusinessMemberLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateBusinessMemberLinkTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).AuthenticateBusinessMemberLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/AuthenticateBusinessMemberLinkToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).AuthenticateBusinessMemberLinkToken(ctx, req.(*AuthenticateBusinessMemberLinkTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_InvalidateBusinessMemberLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateBusinessMemberLinkTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).InvalidateBusinessMemberLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/InvalidateBusinessMemberLinkToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).InvalidateBusinessMemberLinkToken(ctx, req.(*InvalidateBusinessMemberLinkTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ValidateBusinessMemberSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateBusinessMemberSessionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ValidateBusinessMemberSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/ValidateBusinessMemberSessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ValidateBusinessMemberSessionToken(ctx, req.(*ValidateBusinessMemberSessionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetBusinessMemberLinkRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessMemberLinkRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetBusinessMemberLinkRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.AuthenticationService/GetBusinessMemberLinkRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetBusinessMemberLinkRecords(ctx, req.(*GetBusinessMemberLinkRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authentication.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateSessionToken",
			Handler:    _AuthenticationService_ValidateSessionToken_Handler,
		},
		{
			MethodName: "SendOTPSms",
			Handler:    _AuthenticationService_SendOTPSms_Handler,
		},
		{
			MethodName: "VerifyOTPSms",
			Handler:    _AuthenticationService_VerifyOTPSms_Handler,
		},
		{
			MethodName: "AuthenticateOTPSms",
			Handler:    _AuthenticationService_AuthenticateOTPSms_Handler,
		},
		{
			MethodName: "SendOTPEmail",
			Handler:    _AuthenticationService_SendOTPEmail_Handler,
		},
		{
			MethodName: "VerifyOTPEmail",
			Handler:    _AuthenticationService_VerifyOTPEmail_Handler,
		},
		{
			MethodName: "AuthenticateOTPEmail",
			Handler:    _AuthenticationService_AuthenticateOTPEmail_Handler,
		},
		{
			MethodName: "ValidateEntityToken",
			Handler:    _AuthenticationService_ValidateEntityToken_Handler,
		},
		{
			MethodName: "GetEntityToken",
			Handler:    _AuthenticationService_GetEntityToken_Handler,
		},
		{
			MethodName: "GetBusinessMemberLinkToken",
			Handler:    _AuthenticationService_GetBusinessMemberLinkToken_Handler,
		},
		{
			MethodName: "AuthenticateBusinessMemberLinkToken",
			Handler:    _AuthenticationService_AuthenticateBusinessMemberLinkToken_Handler,
		},
		{
			MethodName: "InvalidateBusinessMemberLinkToken",
			Handler:    _AuthenticationService_InvalidateBusinessMemberLinkToken_Handler,
		},
		{
			MethodName: "ValidateBusinessMemberSessionToken",
			Handler:    _AuthenticationService_ValidateBusinessMemberSessionToken_Handler,
		},
		{
			MethodName: "GetBusinessMemberLinkRecords",
			Handler:    _AuthenticationService_GetBusinessMemberLinkRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/authentication/authentication.proto",
}
