// Code generated by MockGen. DO NOT EDIT.
// Source: ../authentication_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	authentication "github.com/kappapay/backend/lib/golang/src/kappa/services/authentication"
	grpc "google.golang.org/grpc"
)

// MockAuthenticationServiceClient is a mock of AuthenticationServiceClient interface.
type MockAuthenticationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServiceClientMockRecorder
}

// MockAuthenticationServiceClientMockRecorder is the mock recorder for MockAuthenticationServiceClient.
type MockAuthenticationServiceClientMockRecorder struct {
	mock *MockAuthenticationServiceClient
}

// NewMockAuthenticationServiceClient creates a new mock instance.
func NewMockAuthenticationServiceClient(ctrl *gomock.Controller) *MockAuthenticationServiceClient {
	mock := &MockAuthenticationServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationServiceClient) EXPECT() *MockAuthenticationServiceClientMockRecorder {
	return m.recorder
}

// AuthenticateBusinessMemberLinkToken mocks base method.
func (m *MockAuthenticationServiceClient) AuthenticateBusinessMemberLinkToken(ctx context.Context, in *authentication.AuthenticateBusinessMemberLinkTokenRequest, opts ...grpc.CallOption) (*authentication.AuthenticateBusinessMemberLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticateBusinessMemberLinkToken", varargs...)
	ret0, _ := ret[0].(*authentication.AuthenticateBusinessMemberLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateBusinessMemberLinkToken indicates an expected call of AuthenticateBusinessMemberLinkToken.
func (mr *MockAuthenticationServiceClientMockRecorder) AuthenticateBusinessMemberLinkToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateBusinessMemberLinkToken", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).AuthenticateBusinessMemberLinkToken), varargs...)
}

// AuthenticateOTPEmail mocks base method.
func (m *MockAuthenticationServiceClient) AuthenticateOTPEmail(ctx context.Context, in *authentication.AuthenticateOTPEmailRequest, opts ...grpc.CallOption) (*authentication.AuthenticateOTPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticateOTPEmail", varargs...)
	ret0, _ := ret[0].(*authentication.AuthenticateOTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateOTPEmail indicates an expected call of AuthenticateOTPEmail.
func (mr *MockAuthenticationServiceClientMockRecorder) AuthenticateOTPEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateOTPEmail", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).AuthenticateOTPEmail), varargs...)
}

// AuthenticateOTPSms mocks base method.
func (m *MockAuthenticationServiceClient) AuthenticateOTPSms(ctx context.Context, in *authentication.AuthenticateOTPSmsRequest, opts ...grpc.CallOption) (*authentication.AuthenticateOTPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticateOTPSms", varargs...)
	ret0, _ := ret[0].(*authentication.AuthenticateOTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateOTPSms indicates an expected call of AuthenticateOTPSms.
func (mr *MockAuthenticationServiceClientMockRecorder) AuthenticateOTPSms(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateOTPSms", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).AuthenticateOTPSms), varargs...)
}

// GetBusinessMemberLinkRecords mocks base method.
func (m *MockAuthenticationServiceClient) GetBusinessMemberLinkRecords(ctx context.Context, in *authentication.GetBusinessMemberLinkRecordsRequest, opts ...grpc.CallOption) (*authentication.GetBusinessMemberLinkRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessMemberLinkRecords", varargs...)
	ret0, _ := ret[0].(*authentication.GetBusinessMemberLinkRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMemberLinkRecords indicates an expected call of GetBusinessMemberLinkRecords.
func (mr *MockAuthenticationServiceClientMockRecorder) GetBusinessMemberLinkRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMemberLinkRecords", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).GetBusinessMemberLinkRecords), varargs...)
}

// GetBusinessMemberLinkToken mocks base method.
func (m *MockAuthenticationServiceClient) GetBusinessMemberLinkToken(ctx context.Context, in *authentication.GetBusinessMemberLinkTokenRequest, opts ...grpc.CallOption) (*authentication.GetBusinessMemberLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessMemberLinkToken", varargs...)
	ret0, _ := ret[0].(*authentication.GetBusinessMemberLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMemberLinkToken indicates an expected call of GetBusinessMemberLinkToken.
func (mr *MockAuthenticationServiceClientMockRecorder) GetBusinessMemberLinkToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMemberLinkToken", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).GetBusinessMemberLinkToken), varargs...)
}

// GetEntityToken mocks base method.
func (m *MockAuthenticationServiceClient) GetEntityToken(ctx context.Context, in *authentication.GetEntityTokenRequest, opts ...grpc.CallOption) (*authentication.GetEntityTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityToken", varargs...)
	ret0, _ := ret[0].(*authentication.GetEntityTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityToken indicates an expected call of GetEntityToken.
func (mr *MockAuthenticationServiceClientMockRecorder) GetEntityToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityToken", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).GetEntityToken), varargs...)
}

// InvalidateBusinessMemberLinkToken mocks base method.
func (m *MockAuthenticationServiceClient) InvalidateBusinessMemberLinkToken(ctx context.Context, in *authentication.InvalidateBusinessMemberLinkTokenRequest, opts ...grpc.CallOption) (*authentication.InvalidateBusinessMemberLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvalidateBusinessMemberLinkToken", varargs...)
	ret0, _ := ret[0].(*authentication.InvalidateBusinessMemberLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateBusinessMemberLinkToken indicates an expected call of InvalidateBusinessMemberLinkToken.
func (mr *MockAuthenticationServiceClientMockRecorder) InvalidateBusinessMemberLinkToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateBusinessMemberLinkToken", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).InvalidateBusinessMemberLinkToken), varargs...)
}

// SendOTPEmail mocks base method.
func (m *MockAuthenticationServiceClient) SendOTPEmail(ctx context.Context, in *authentication.SendOTPEmailRequest, opts ...grpc.CallOption) (*authentication.SendOTPEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOTPEmail", varargs...)
	ret0, _ := ret[0].(*authentication.SendOTPEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOTPEmail indicates an expected call of SendOTPEmail.
func (mr *MockAuthenticationServiceClientMockRecorder) SendOTPEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTPEmail", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).SendOTPEmail), varargs...)
}

// SendOTPSms mocks base method.
func (m *MockAuthenticationServiceClient) SendOTPSms(ctx context.Context, in *authentication.SendOTPSmsRequest, opts ...grpc.CallOption) (*authentication.SendOTPSmsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOTPSms", varargs...)
	ret0, _ := ret[0].(*authentication.SendOTPSmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOTPSms indicates an expected call of SendOTPSms.
func (mr *MockAuthenticationServiceClientMockRecorder) SendOTPSms(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTPSms", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).SendOTPSms), varargs...)
}

// ValidateBusinessMemberSessionToken mocks base method.
func (m *MockAuthenticationServiceClient) ValidateBusinessMemberSessionToken(ctx context.Context, in *authentication.ValidateBusinessMemberSessionTokenRequest, opts ...grpc.CallOption) (*authentication.ValidateBusinessMemberSessionTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateBusinessMemberSessionToken", varargs...)
	ret0, _ := ret[0].(*authentication.ValidateBusinessMemberSessionTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateBusinessMemberSessionToken indicates an expected call of ValidateBusinessMemberSessionToken.
func (mr *MockAuthenticationServiceClientMockRecorder) ValidateBusinessMemberSessionToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBusinessMemberSessionToken", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).ValidateBusinessMemberSessionToken), varargs...)
}

// ValidateEntityToken mocks base method.
func (m *MockAuthenticationServiceClient) ValidateEntityToken(ctx context.Context, in *authentication.ValidateEntityTokenRequest, opts ...grpc.CallOption) (*authentication.ValidateEntityTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateEntityToken", varargs...)
	ret0, _ := ret[0].(*authentication.ValidateEntityTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateEntityToken indicates an expected call of ValidateEntityToken.
func (mr *MockAuthenticationServiceClientMockRecorder) ValidateEntityToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEntityToken", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).ValidateEntityToken), varargs...)
}

// ValidateSessionToken mocks base method.
func (m *MockAuthenticationServiceClient) ValidateSessionToken(ctx context.Context, in *authentication.ValidateSessionTokenRequest, opts ...grpc.CallOption) (*authentication.ValidateSessionTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateSessionToken", varargs...)
	ret0, _ := ret[0].(*authentication.ValidateSessionTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSessionToken indicates an expected call of ValidateSessionToken.
func (mr *MockAuthenticationServiceClientMockRecorder) ValidateSessionToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSessionToken", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).ValidateSessionToken), varargs...)
}

// VerifyOTPEmail mocks base method.
func (m *MockAuthenticationServiceClient) VerifyOTPEmail(ctx context.Context, in *authentication.VerifyOTPEmailRequest, opts ...grpc.CallOption) (*authentication.VerifyOTPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyOTPEmail", varargs...)
	ret0, _ := ret[0].(*authentication.VerifyOTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTPEmail indicates an expected call of VerifyOTPEmail.
func (mr *MockAuthenticationServiceClientMockRecorder) VerifyOTPEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTPEmail", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).VerifyOTPEmail), varargs...)
}

// VerifyOTPSms mocks base method.
func (m *MockAuthenticationServiceClient) VerifyOTPSms(ctx context.Context, in *authentication.VerifyOTPSmsRequest, opts ...grpc.CallOption) (*authentication.VerifyOTPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyOTPSms", varargs...)
	ret0, _ := ret[0].(*authentication.VerifyOTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTPSms indicates an expected call of VerifyOTPSms.
func (mr *MockAuthenticationServiceClientMockRecorder) VerifyOTPSms(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTPSms", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).VerifyOTPSms), varargs...)
}

// MockAuthenticationServiceServer is a mock of AuthenticationServiceServer interface.
type MockAuthenticationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServiceServerMockRecorder
}

// MockAuthenticationServiceServerMockRecorder is the mock recorder for MockAuthenticationServiceServer.
type MockAuthenticationServiceServerMockRecorder struct {
	mock *MockAuthenticationServiceServer
}

// NewMockAuthenticationServiceServer creates a new mock instance.
func NewMockAuthenticationServiceServer(ctrl *gomock.Controller) *MockAuthenticationServiceServer {
	mock := &MockAuthenticationServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationServiceServer) EXPECT() *MockAuthenticationServiceServerMockRecorder {
	return m.recorder
}

// AuthenticateBusinessMemberLinkToken mocks base method.
func (m *MockAuthenticationServiceServer) AuthenticateBusinessMemberLinkToken(arg0 context.Context, arg1 *authentication.AuthenticateBusinessMemberLinkTokenRequest) (*authentication.AuthenticateBusinessMemberLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateBusinessMemberLinkToken", arg0, arg1)
	ret0, _ := ret[0].(*authentication.AuthenticateBusinessMemberLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateBusinessMemberLinkToken indicates an expected call of AuthenticateBusinessMemberLinkToken.
func (mr *MockAuthenticationServiceServerMockRecorder) AuthenticateBusinessMemberLinkToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateBusinessMemberLinkToken", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).AuthenticateBusinessMemberLinkToken), arg0, arg1)
}

// AuthenticateOTPEmail mocks base method.
func (m *MockAuthenticationServiceServer) AuthenticateOTPEmail(arg0 context.Context, arg1 *authentication.AuthenticateOTPEmailRequest) (*authentication.AuthenticateOTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateOTPEmail", arg0, arg1)
	ret0, _ := ret[0].(*authentication.AuthenticateOTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateOTPEmail indicates an expected call of AuthenticateOTPEmail.
func (mr *MockAuthenticationServiceServerMockRecorder) AuthenticateOTPEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateOTPEmail", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).AuthenticateOTPEmail), arg0, arg1)
}

// AuthenticateOTPSms mocks base method.
func (m *MockAuthenticationServiceServer) AuthenticateOTPSms(arg0 context.Context, arg1 *authentication.AuthenticateOTPSmsRequest) (*authentication.AuthenticateOTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateOTPSms", arg0, arg1)
	ret0, _ := ret[0].(*authentication.AuthenticateOTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateOTPSms indicates an expected call of AuthenticateOTPSms.
func (mr *MockAuthenticationServiceServerMockRecorder) AuthenticateOTPSms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateOTPSms", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).AuthenticateOTPSms), arg0, arg1)
}

// GetBusinessMemberLinkRecords mocks base method.
func (m *MockAuthenticationServiceServer) GetBusinessMemberLinkRecords(arg0 context.Context, arg1 *authentication.GetBusinessMemberLinkRecordsRequest) (*authentication.GetBusinessMemberLinkRecordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessMemberLinkRecords", arg0, arg1)
	ret0, _ := ret[0].(*authentication.GetBusinessMemberLinkRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMemberLinkRecords indicates an expected call of GetBusinessMemberLinkRecords.
func (mr *MockAuthenticationServiceServerMockRecorder) GetBusinessMemberLinkRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMemberLinkRecords", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).GetBusinessMemberLinkRecords), arg0, arg1)
}

// GetBusinessMemberLinkToken mocks base method.
func (m *MockAuthenticationServiceServer) GetBusinessMemberLinkToken(arg0 context.Context, arg1 *authentication.GetBusinessMemberLinkTokenRequest) (*authentication.GetBusinessMemberLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessMemberLinkToken", arg0, arg1)
	ret0, _ := ret[0].(*authentication.GetBusinessMemberLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessMemberLinkToken indicates an expected call of GetBusinessMemberLinkToken.
func (mr *MockAuthenticationServiceServerMockRecorder) GetBusinessMemberLinkToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessMemberLinkToken", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).GetBusinessMemberLinkToken), arg0, arg1)
}

// GetEntityToken mocks base method.
func (m *MockAuthenticationServiceServer) GetEntityToken(arg0 context.Context, arg1 *authentication.GetEntityTokenRequest) (*authentication.GetEntityTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityToken", arg0, arg1)
	ret0, _ := ret[0].(*authentication.GetEntityTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityToken indicates an expected call of GetEntityToken.
func (mr *MockAuthenticationServiceServerMockRecorder) GetEntityToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityToken", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).GetEntityToken), arg0, arg1)
}

// InvalidateBusinessMemberLinkToken mocks base method.
func (m *MockAuthenticationServiceServer) InvalidateBusinessMemberLinkToken(arg0 context.Context, arg1 *authentication.InvalidateBusinessMemberLinkTokenRequest) (*authentication.InvalidateBusinessMemberLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateBusinessMemberLinkToken", arg0, arg1)
	ret0, _ := ret[0].(*authentication.InvalidateBusinessMemberLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateBusinessMemberLinkToken indicates an expected call of InvalidateBusinessMemberLinkToken.
func (mr *MockAuthenticationServiceServerMockRecorder) InvalidateBusinessMemberLinkToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateBusinessMemberLinkToken", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).InvalidateBusinessMemberLinkToken), arg0, arg1)
}

// SendOTPEmail mocks base method.
func (m *MockAuthenticationServiceServer) SendOTPEmail(arg0 context.Context, arg1 *authentication.SendOTPEmailRequest) (*authentication.SendOTPEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOTPEmail", arg0, arg1)
	ret0, _ := ret[0].(*authentication.SendOTPEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOTPEmail indicates an expected call of SendOTPEmail.
func (mr *MockAuthenticationServiceServerMockRecorder) SendOTPEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTPEmail", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).SendOTPEmail), arg0, arg1)
}

// SendOTPSms mocks base method.
func (m *MockAuthenticationServiceServer) SendOTPSms(arg0 context.Context, arg1 *authentication.SendOTPSmsRequest) (*authentication.SendOTPSmsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOTPSms", arg0, arg1)
	ret0, _ := ret[0].(*authentication.SendOTPSmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOTPSms indicates an expected call of SendOTPSms.
func (mr *MockAuthenticationServiceServerMockRecorder) SendOTPSms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTPSms", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).SendOTPSms), arg0, arg1)
}

// ValidateBusinessMemberSessionToken mocks base method.
func (m *MockAuthenticationServiceServer) ValidateBusinessMemberSessionToken(arg0 context.Context, arg1 *authentication.ValidateBusinessMemberSessionTokenRequest) (*authentication.ValidateBusinessMemberSessionTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBusinessMemberSessionToken", arg0, arg1)
	ret0, _ := ret[0].(*authentication.ValidateBusinessMemberSessionTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateBusinessMemberSessionToken indicates an expected call of ValidateBusinessMemberSessionToken.
func (mr *MockAuthenticationServiceServerMockRecorder) ValidateBusinessMemberSessionToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBusinessMemberSessionToken", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).ValidateBusinessMemberSessionToken), arg0, arg1)
}

// ValidateEntityToken mocks base method.
func (m *MockAuthenticationServiceServer) ValidateEntityToken(arg0 context.Context, arg1 *authentication.ValidateEntityTokenRequest) (*authentication.ValidateEntityTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateEntityToken", arg0, arg1)
	ret0, _ := ret[0].(*authentication.ValidateEntityTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateEntityToken indicates an expected call of ValidateEntityToken.
func (mr *MockAuthenticationServiceServerMockRecorder) ValidateEntityToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEntityToken", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).ValidateEntityToken), arg0, arg1)
}

// ValidateSessionToken mocks base method.
func (m *MockAuthenticationServiceServer) ValidateSessionToken(arg0 context.Context, arg1 *authentication.ValidateSessionTokenRequest) (*authentication.ValidateSessionTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSessionToken", arg0, arg1)
	ret0, _ := ret[0].(*authentication.ValidateSessionTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSessionToken indicates an expected call of ValidateSessionToken.
func (mr *MockAuthenticationServiceServerMockRecorder) ValidateSessionToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSessionToken", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).ValidateSessionToken), arg0, arg1)
}

// VerifyOTPEmail mocks base method.
func (m *MockAuthenticationServiceServer) VerifyOTPEmail(arg0 context.Context, arg1 *authentication.VerifyOTPEmailRequest) (*authentication.VerifyOTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTPEmail", arg0, arg1)
	ret0, _ := ret[0].(*authentication.VerifyOTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTPEmail indicates an expected call of VerifyOTPEmail.
func (mr *MockAuthenticationServiceServerMockRecorder) VerifyOTPEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTPEmail", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).VerifyOTPEmail), arg0, arg1)
}

// VerifyOTPSms mocks base method.
func (m *MockAuthenticationServiceServer) VerifyOTPSms(arg0 context.Context, arg1 *authentication.VerifyOTPSmsRequest) (*authentication.VerifyOTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTPSms", arg0, arg1)
	ret0, _ := ret[0].(*authentication.VerifyOTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTPSms indicates an expected call of VerifyOTPSms.
func (mr *MockAuthenticationServiceServerMockRecorder) VerifyOTPSms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTPSms", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).VerifyOTPSms), arg0, arg1)
}

// mustEmbedUnimplementedAuthenticationServiceServer mocks base method.
func (m *MockAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthenticationServiceServer")
}

// mustEmbedUnimplementedAuthenticationServiceServer indicates an expected call of mustEmbedUnimplementedAuthenticationServiceServer.
func (mr *MockAuthenticationServiceServerMockRecorder) mustEmbedUnimplementedAuthenticationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthenticationServiceServer", reflect.TypeOf((*MockAuthenticationServiceServer)(nil).mustEmbedUnimplementedAuthenticationServiceServer))
}

// MockUnsafeAuthenticationServiceServer is a mock of UnsafeAuthenticationServiceServer interface.
type MockUnsafeAuthenticationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthenticationServiceServerMockRecorder
}

// MockUnsafeAuthenticationServiceServerMockRecorder is the mock recorder for MockUnsafeAuthenticationServiceServer.
type MockUnsafeAuthenticationServiceServerMockRecorder struct {
	mock *MockUnsafeAuthenticationServiceServer
}

// NewMockUnsafeAuthenticationServiceServer creates a new mock instance.
func NewMockUnsafeAuthenticationServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthenticationServiceServer {
	mock := &MockUnsafeAuthenticationServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthenticationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthenticationServiceServer) EXPECT() *MockUnsafeAuthenticationServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthenticationServiceServer mocks base method.
func (m *MockUnsafeAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthenticationServiceServer")
}

// mustEmbedUnimplementedAuthenticationServiceServer indicates an expected call of mustEmbedUnimplementedAuthenticationServiceServer.
func (mr *MockUnsafeAuthenticationServiceServerMockRecorder) mustEmbedUnimplementedAuthenticationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthenticationServiceServer", reflect.TypeOf((*MockUnsafeAuthenticationServiceServer)(nil).mustEmbedUnimplementedAuthenticationServiceServer))
}
