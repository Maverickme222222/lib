// Code generated by MockGen. DO NOT EDIT.
// Source: ../destinations_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	destinations "github.com/kappapay/backend/lib/golang/src/kappa/services/destinations"
	grpc "google.golang.org/grpc"
)

// MockDestinationsServiceClient is a mock of DestinationsServiceClient interface.
type MockDestinationsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationsServiceClientMockRecorder
}

// MockDestinationsServiceClientMockRecorder is the mock recorder for MockDestinationsServiceClient.
type MockDestinationsServiceClientMockRecorder struct {
	mock *MockDestinationsServiceClient
}

// NewMockDestinationsServiceClient creates a new mock instance.
func NewMockDestinationsServiceClient(ctrl *gomock.Controller) *MockDestinationsServiceClient {
	mock := &MockDestinationsServiceClient{ctrl: ctrl}
	mock.recorder = &MockDestinationsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationsServiceClient) EXPECT() *MockDestinationsServiceClientMockRecorder {
	return m.recorder
}

// CreateDestination mocks base method.
func (m *MockDestinationsServiceClient) CreateDestination(ctx context.Context, in *destinations.CreateDestinationRequest, opts ...grpc.CallOption) (*destinations.CreateDestinationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDestination", varargs...)
	ret0, _ := ret[0].(*destinations.CreateDestinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestination indicates an expected call of CreateDestination.
func (mr *MockDestinationsServiceClientMockRecorder) CreateDestination(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestination", reflect.TypeOf((*MockDestinationsServiceClient)(nil).CreateDestination), varargs...)
}

// DeleteDestination mocks base method.
func (m *MockDestinationsServiceClient) DeleteDestination(ctx context.Context, in *destinations.DeleteDestinationRequest, opts ...grpc.CallOption) (*destinations.DeleteDestinationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDestination", varargs...)
	ret0, _ := ret[0].(*destinations.DeleteDestinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDestination indicates an expected call of DeleteDestination.
func (mr *MockDestinationsServiceClientMockRecorder) DeleteDestination(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestination", reflect.TypeOf((*MockDestinationsServiceClient)(nil).DeleteDestination), varargs...)
}

// GetDepositDestinationsByEntityID mocks base method.
func (m *MockDestinationsServiceClient) GetDepositDestinationsByEntityID(ctx context.Context, in *destinations.GetDepositDestinationsByEntityIDRequest, opts ...grpc.CallOption) (*destinations.GetDepositDestinationsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDepositDestinationsByEntityID", varargs...)
	ret0, _ := ret[0].(*destinations.GetDepositDestinationsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositDestinationsByEntityID indicates an expected call of GetDepositDestinationsByEntityID.
func (mr *MockDestinationsServiceClientMockRecorder) GetDepositDestinationsByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositDestinationsByEntityID", reflect.TypeOf((*MockDestinationsServiceClient)(nil).GetDepositDestinationsByEntityID), varargs...)
}

// GetDestinationByEntityIDAndDestinationID mocks base method.
func (m *MockDestinationsServiceClient) GetDestinationByEntityIDAndDestinationID(ctx context.Context, in *destinations.GetDestinationByEntityIDAndDestinationIDRequest, opts ...grpc.CallOption) (*destinations.GetDestinationByEntityIDAndDestinationIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDestinationByEntityIDAndDestinationID", varargs...)
	ret0, _ := ret[0].(*destinations.GetDestinationByEntityIDAndDestinationIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationByEntityIDAndDestinationID indicates an expected call of GetDestinationByEntityIDAndDestinationID.
func (mr *MockDestinationsServiceClientMockRecorder) GetDestinationByEntityIDAndDestinationID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationByEntityIDAndDestinationID", reflect.TypeOf((*MockDestinationsServiceClient)(nil).GetDestinationByEntityIDAndDestinationID), varargs...)
}

// GetDestinationByID mocks base method.
func (m *MockDestinationsServiceClient) GetDestinationByID(ctx context.Context, in *destinations.GetDestinationByIDRequest, opts ...grpc.CallOption) (*destinations.GetDestinationByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDestinationByID", varargs...)
	ret0, _ := ret[0].(*destinations.GetDestinationByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationByID indicates an expected call of GetDestinationByID.
func (mr *MockDestinationsServiceClientMockRecorder) GetDestinationByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationByID", reflect.TypeOf((*MockDestinationsServiceClient)(nil).GetDestinationByID), varargs...)
}

// GetDestinationsByDomicileAndType mocks base method.
func (m *MockDestinationsServiceClient) GetDestinationsByDomicileAndType(ctx context.Context, in *destinations.GetDestinationsByDomicileAndTypeRequest, opts ...grpc.CallOption) (*destinations.GetDestinationsByDomicileAndTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDestinationsByDomicileAndType", varargs...)
	ret0, _ := ret[0].(*destinations.GetDestinationsByDomicileAndTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationsByDomicileAndType indicates an expected call of GetDestinationsByDomicileAndType.
func (mr *MockDestinationsServiceClientMockRecorder) GetDestinationsByDomicileAndType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationsByDomicileAndType", reflect.TypeOf((*MockDestinationsServiceClient)(nil).GetDestinationsByDomicileAndType), varargs...)
}

// GetTransferDestinationsByEntityID mocks base method.
func (m *MockDestinationsServiceClient) GetTransferDestinationsByEntityID(ctx context.Context, in *destinations.GetTransferDestinationsByEntityIDRequest, opts ...grpc.CallOption) (*destinations.GetTransferDestinationsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransferDestinationsByEntityID", varargs...)
	ret0, _ := ret[0].(*destinations.GetTransferDestinationsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferDestinationsByEntityID indicates an expected call of GetTransferDestinationsByEntityID.
func (mr *MockDestinationsServiceClientMockRecorder) GetTransferDestinationsByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferDestinationsByEntityID", reflect.TypeOf((*MockDestinationsServiceClient)(nil).GetTransferDestinationsByEntityID), varargs...)
}

// GetWithdrawalDestinationsByEntityID mocks base method.
func (m *MockDestinationsServiceClient) GetWithdrawalDestinationsByEntityID(ctx context.Context, in *destinations.GetWithdrawalDestinationsByEntityIDRequest, opts ...grpc.CallOption) (*destinations.GetWithdrawalDestinationsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithdrawalDestinationsByEntityID", varargs...)
	ret0, _ := ret[0].(*destinations.GetWithdrawalDestinationsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalDestinationsByEntityID indicates an expected call of GetWithdrawalDestinationsByEntityID.
func (mr *MockDestinationsServiceClientMockRecorder) GetWithdrawalDestinationsByEntityID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalDestinationsByEntityID", reflect.TypeOf((*MockDestinationsServiceClient)(nil).GetWithdrawalDestinationsByEntityID), varargs...)
}

// SetStatus mocks base method.
func (m *MockDestinationsServiceClient) SetStatus(ctx context.Context, in *destinations.SetStatusRequest, opts ...grpc.CallOption) (*destinations.SetStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetStatus", varargs...)
	ret0, _ := ret[0].(*destinations.SetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockDestinationsServiceClientMockRecorder) SetStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockDestinationsServiceClient)(nil).SetStatus), varargs...)
}

// UpdateDestination mocks base method.
func (m *MockDestinationsServiceClient) UpdateDestination(ctx context.Context, in *destinations.UpdateDestinationRequest, opts ...grpc.CallOption) (*destinations.UpdateDestinationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDestination", varargs...)
	ret0, _ := ret[0].(*destinations.UpdateDestinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDestination indicates an expected call of UpdateDestination.
func (mr *MockDestinationsServiceClientMockRecorder) UpdateDestination(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestination", reflect.TypeOf((*MockDestinationsServiceClient)(nil).UpdateDestination), varargs...)
}

// MockDestinationsServiceServer is a mock of DestinationsServiceServer interface.
type MockDestinationsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationsServiceServerMockRecorder
}

// MockDestinationsServiceServerMockRecorder is the mock recorder for MockDestinationsServiceServer.
type MockDestinationsServiceServerMockRecorder struct {
	mock *MockDestinationsServiceServer
}

// NewMockDestinationsServiceServer creates a new mock instance.
func NewMockDestinationsServiceServer(ctrl *gomock.Controller) *MockDestinationsServiceServer {
	mock := &MockDestinationsServiceServer{ctrl: ctrl}
	mock.recorder = &MockDestinationsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationsServiceServer) EXPECT() *MockDestinationsServiceServerMockRecorder {
	return m.recorder
}

// CreateDestination mocks base method.
func (m *MockDestinationsServiceServer) CreateDestination(arg0 context.Context, arg1 *destinations.CreateDestinationRequest) (*destinations.CreateDestinationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDestination", arg0, arg1)
	ret0, _ := ret[0].(*destinations.CreateDestinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestination indicates an expected call of CreateDestination.
func (mr *MockDestinationsServiceServerMockRecorder) CreateDestination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestination", reflect.TypeOf((*MockDestinationsServiceServer)(nil).CreateDestination), arg0, arg1)
}

// DeleteDestination mocks base method.
func (m *MockDestinationsServiceServer) DeleteDestination(arg0 context.Context, arg1 *destinations.DeleteDestinationRequest) (*destinations.DeleteDestinationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDestination", arg0, arg1)
	ret0, _ := ret[0].(*destinations.DeleteDestinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDestination indicates an expected call of DeleteDestination.
func (mr *MockDestinationsServiceServerMockRecorder) DeleteDestination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestination", reflect.TypeOf((*MockDestinationsServiceServer)(nil).DeleteDestination), arg0, arg1)
}

// GetDepositDestinationsByEntityID mocks base method.
func (m *MockDestinationsServiceServer) GetDepositDestinationsByEntityID(arg0 context.Context, arg1 *destinations.GetDepositDestinationsByEntityIDRequest) (*destinations.GetDepositDestinationsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositDestinationsByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*destinations.GetDepositDestinationsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositDestinationsByEntityID indicates an expected call of GetDepositDestinationsByEntityID.
func (mr *MockDestinationsServiceServerMockRecorder) GetDepositDestinationsByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositDestinationsByEntityID", reflect.TypeOf((*MockDestinationsServiceServer)(nil).GetDepositDestinationsByEntityID), arg0, arg1)
}

// GetDestinationByEntityIDAndDestinationID mocks base method.
func (m *MockDestinationsServiceServer) GetDestinationByEntityIDAndDestinationID(arg0 context.Context, arg1 *destinations.GetDestinationByEntityIDAndDestinationIDRequest) (*destinations.GetDestinationByEntityIDAndDestinationIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationByEntityIDAndDestinationID", arg0, arg1)
	ret0, _ := ret[0].(*destinations.GetDestinationByEntityIDAndDestinationIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationByEntityIDAndDestinationID indicates an expected call of GetDestinationByEntityIDAndDestinationID.
func (mr *MockDestinationsServiceServerMockRecorder) GetDestinationByEntityIDAndDestinationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationByEntityIDAndDestinationID", reflect.TypeOf((*MockDestinationsServiceServer)(nil).GetDestinationByEntityIDAndDestinationID), arg0, arg1)
}

// GetDestinationByID mocks base method.
func (m *MockDestinationsServiceServer) GetDestinationByID(arg0 context.Context, arg1 *destinations.GetDestinationByIDRequest) (*destinations.GetDestinationByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationByID", arg0, arg1)
	ret0, _ := ret[0].(*destinations.GetDestinationByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationByID indicates an expected call of GetDestinationByID.
func (mr *MockDestinationsServiceServerMockRecorder) GetDestinationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationByID", reflect.TypeOf((*MockDestinationsServiceServer)(nil).GetDestinationByID), arg0, arg1)
}

// GetDestinationsByDomicileAndType mocks base method.
func (m *MockDestinationsServiceServer) GetDestinationsByDomicileAndType(arg0 context.Context, arg1 *destinations.GetDestinationsByDomicileAndTypeRequest) (*destinations.GetDestinationsByDomicileAndTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationsByDomicileAndType", arg0, arg1)
	ret0, _ := ret[0].(*destinations.GetDestinationsByDomicileAndTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationsByDomicileAndType indicates an expected call of GetDestinationsByDomicileAndType.
func (mr *MockDestinationsServiceServerMockRecorder) GetDestinationsByDomicileAndType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationsByDomicileAndType", reflect.TypeOf((*MockDestinationsServiceServer)(nil).GetDestinationsByDomicileAndType), arg0, arg1)
}

// GetTransferDestinationsByEntityID mocks base method.
func (m *MockDestinationsServiceServer) GetTransferDestinationsByEntityID(arg0 context.Context, arg1 *destinations.GetTransferDestinationsByEntityIDRequest) (*destinations.GetTransferDestinationsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferDestinationsByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*destinations.GetTransferDestinationsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferDestinationsByEntityID indicates an expected call of GetTransferDestinationsByEntityID.
func (mr *MockDestinationsServiceServerMockRecorder) GetTransferDestinationsByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferDestinationsByEntityID", reflect.TypeOf((*MockDestinationsServiceServer)(nil).GetTransferDestinationsByEntityID), arg0, arg1)
}

// GetWithdrawalDestinationsByEntityID mocks base method.
func (m *MockDestinationsServiceServer) GetWithdrawalDestinationsByEntityID(arg0 context.Context, arg1 *destinations.GetWithdrawalDestinationsByEntityIDRequest) (*destinations.GetWithdrawalDestinationsByEntityIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalDestinationsByEntityID", arg0, arg1)
	ret0, _ := ret[0].(*destinations.GetWithdrawalDestinationsByEntityIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalDestinationsByEntityID indicates an expected call of GetWithdrawalDestinationsByEntityID.
func (mr *MockDestinationsServiceServerMockRecorder) GetWithdrawalDestinationsByEntityID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalDestinationsByEntityID", reflect.TypeOf((*MockDestinationsServiceServer)(nil).GetWithdrawalDestinationsByEntityID), arg0, arg1)
}

// SetStatus mocks base method.
func (m *MockDestinationsServiceServer) SetStatus(arg0 context.Context, arg1 *destinations.SetStatusRequest) (*destinations.SetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(*destinations.SetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockDestinationsServiceServerMockRecorder) SetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockDestinationsServiceServer)(nil).SetStatus), arg0, arg1)
}

// UpdateDestination mocks base method.
func (m *MockDestinationsServiceServer) UpdateDestination(arg0 context.Context, arg1 *destinations.UpdateDestinationRequest) (*destinations.UpdateDestinationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDestination", arg0, arg1)
	ret0, _ := ret[0].(*destinations.UpdateDestinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDestination indicates an expected call of UpdateDestination.
func (mr *MockDestinationsServiceServerMockRecorder) UpdateDestination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestination", reflect.TypeOf((*MockDestinationsServiceServer)(nil).UpdateDestination), arg0, arg1)
}

// mustEmbedUnimplementedDestinationsServiceServer mocks base method.
func (m *MockDestinationsServiceServer) mustEmbedUnimplementedDestinationsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDestinationsServiceServer")
}

// mustEmbedUnimplementedDestinationsServiceServer indicates an expected call of mustEmbedUnimplementedDestinationsServiceServer.
func (mr *MockDestinationsServiceServerMockRecorder) mustEmbedUnimplementedDestinationsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDestinationsServiceServer", reflect.TypeOf((*MockDestinationsServiceServer)(nil).mustEmbedUnimplementedDestinationsServiceServer))
}

// MockUnsafeDestinationsServiceServer is a mock of UnsafeDestinationsServiceServer interface.
type MockUnsafeDestinationsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDestinationsServiceServerMockRecorder
}

// MockUnsafeDestinationsServiceServerMockRecorder is the mock recorder for MockUnsafeDestinationsServiceServer.
type MockUnsafeDestinationsServiceServerMockRecorder struct {
	mock *MockUnsafeDestinationsServiceServer
}

// NewMockUnsafeDestinationsServiceServer creates a new mock instance.
func NewMockUnsafeDestinationsServiceServer(ctrl *gomock.Controller) *MockUnsafeDestinationsServiceServer {
	mock := &MockUnsafeDestinationsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDestinationsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDestinationsServiceServer) EXPECT() *MockUnsafeDestinationsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDestinationsServiceServer mocks base method.
func (m *MockUnsafeDestinationsServiceServer) mustEmbedUnimplementedDestinationsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDestinationsServiceServer")
}

// mustEmbedUnimplementedDestinationsServiceServer indicates an expected call of mustEmbedUnimplementedDestinationsServiceServer.
func (mr *MockUnsafeDestinationsServiceServerMockRecorder) mustEmbedUnimplementedDestinationsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDestinationsServiceServer", reflect.TypeOf((*MockUnsafeDestinationsServiceServer)(nil).mustEmbedUnimplementedDestinationsServiceServer))
}
