// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/compliance/compliance.proto

package compliance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComplianceServiceClient is the client API for ComplianceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplianceServiceClient interface {
	CreateKycResultsReadyEvent(ctx context.Context, in *CreateKycResultsReadyEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetIdentityVerificationURL(ctx context.Context, in *GetIdentityVerificationURLRequest, opts ...grpc.CallOption) (*GetIdentityVerificationURLResponse, error)
	GetIdentityVerificationByID(ctx context.Context, in *GetIdentityVerificationByIDRequest, opts ...grpc.CallOption) (*GetIdentityVerificationByIDResponse, error)
	SubmitIdentityVerification(ctx context.Context, in *SubmitIdentityVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateIdentityVerification(ctx context.Context, in *UpdateIdentityVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateIdentityVerificationAndRequestKyc(ctx context.Context, in *UpdateIdentityVerificationAndRequestKycRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSardineCaseEvent(ctx context.Context, in *UpdateSardineCaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTransactionRequirements(ctx context.Context, in *CreateTransactionRequirementsRequest, opts ...grpc.CallOption) (*CreateTransactionRequirementsResponse, error)
	UpdateDocumentationRequirement(ctx context.Context, in *UpdateDocumentationRequirementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateInformationRequirement(ctx context.Context, in *UpdateInformationRequirementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckTransaction(ctx context.Context, in *CheckTransactionRequest, opts ...grpc.CallOption) (*CheckTransactionResponse, error)
	GetTransactionRequirements(ctx context.Context, in *GetTransactionRequirementsRequest, opts ...grpc.CallOption) (*GetTransactionRequirementsResponse, error)
	GetKycResultByID(ctx context.Context, in *GetKycResultByIDRequest, opts ...grpc.CallOption) (*GetKycResultByIDResponse, error)
	GetVerificationRequirements(ctx context.Context, in *GetVerificationRequirementsRequest, opts ...grpc.CallOption) (*GetVerificationRequirementsResponse, error)
	CompleteVerificationRequirement(ctx context.Context, in *CompleteVerificationRequirementRequest, opts ...grpc.CallOption) (*CompleteVerificationRequirementResponse, error)
	UploadSilaDocument(ctx context.Context, opts ...grpc.CallOption) (ComplianceService_UploadSilaDocumentClient, error)
	GetVerificationDocumentTypes(ctx context.Context, in *GetVerificationDocumentTypesRequest, opts ...grpc.CallOption) (*GetVerificationDocumentTypesResponse, error)
}

type complianceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceServiceClient(cc grpc.ClientConnInterface) ComplianceServiceClient {
	return &complianceServiceClient{cc}
}

func (c *complianceServiceClient) CreateKycResultsReadyEvent(ctx context.Context, in *CreateKycResultsReadyEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/CreateKycResultsReadyEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetIdentityVerificationURL(ctx context.Context, in *GetIdentityVerificationURLRequest, opts ...grpc.CallOption) (*GetIdentityVerificationURLResponse, error) {
	out := new(GetIdentityVerificationURLResponse)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/GetIdentityVerificationURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetIdentityVerificationByID(ctx context.Context, in *GetIdentityVerificationByIDRequest, opts ...grpc.CallOption) (*GetIdentityVerificationByIDResponse, error) {
	out := new(GetIdentityVerificationByIDResponse)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/GetIdentityVerificationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) SubmitIdentityVerification(ctx context.Context, in *SubmitIdentityVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/SubmitIdentityVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) UpdateIdentityVerification(ctx context.Context, in *UpdateIdentityVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/UpdateIdentityVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) UpdateIdentityVerificationAndRequestKyc(ctx context.Context, in *UpdateIdentityVerificationAndRequestKycRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/UpdateIdentityVerificationAndRequestKyc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) UpdateSardineCaseEvent(ctx context.Context, in *UpdateSardineCaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/UpdateSardineCaseEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) CreateTransactionRequirements(ctx context.Context, in *CreateTransactionRequirementsRequest, opts ...grpc.CallOption) (*CreateTransactionRequirementsResponse, error) {
	out := new(CreateTransactionRequirementsResponse)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/CreateTransactionRequirements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) UpdateDocumentationRequirement(ctx context.Context, in *UpdateDocumentationRequirementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/UpdateDocumentationRequirement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) UpdateInformationRequirement(ctx context.Context, in *UpdateInformationRequirementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/UpdateInformationRequirement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) CheckTransaction(ctx context.Context, in *CheckTransactionRequest, opts ...grpc.CallOption) (*CheckTransactionResponse, error) {
	out := new(CheckTransactionResponse)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/CheckTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetTransactionRequirements(ctx context.Context, in *GetTransactionRequirementsRequest, opts ...grpc.CallOption) (*GetTransactionRequirementsResponse, error) {
	out := new(GetTransactionRequirementsResponse)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/GetTransactionRequirements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetKycResultByID(ctx context.Context, in *GetKycResultByIDRequest, opts ...grpc.CallOption) (*GetKycResultByIDResponse, error) {
	out := new(GetKycResultByIDResponse)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/GetKycResultByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetVerificationRequirements(ctx context.Context, in *GetVerificationRequirementsRequest, opts ...grpc.CallOption) (*GetVerificationRequirementsResponse, error) {
	out := new(GetVerificationRequirementsResponse)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/GetVerificationRequirements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) CompleteVerificationRequirement(ctx context.Context, in *CompleteVerificationRequirementRequest, opts ...grpc.CallOption) (*CompleteVerificationRequirementResponse, error) {
	out := new(CompleteVerificationRequirementResponse)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/CompleteVerificationRequirement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) UploadSilaDocument(ctx context.Context, opts ...grpc.CallOption) (ComplianceService_UploadSilaDocumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &ComplianceService_ServiceDesc.Streams[0], "/compliance.ComplianceService/UploadSilaDocument", opts...)
	if err != nil {
		return nil, err
	}
	x := &complianceServiceUploadSilaDocumentClient{stream}
	return x, nil
}

type ComplianceService_UploadSilaDocumentClient interface {
	Send(*UploadSilaDocumentRequest) error
	CloseAndRecv() (*UploadSilaDocumentResponse, error)
	grpc.ClientStream
}

type complianceServiceUploadSilaDocumentClient struct {
	grpc.ClientStream
}

func (x *complianceServiceUploadSilaDocumentClient) Send(m *UploadSilaDocumentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *complianceServiceUploadSilaDocumentClient) CloseAndRecv() (*UploadSilaDocumentResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadSilaDocumentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *complianceServiceClient) GetVerificationDocumentTypes(ctx context.Context, in *GetVerificationDocumentTypesRequest, opts ...grpc.CallOption) (*GetVerificationDocumentTypesResponse, error) {
	out := new(GetVerificationDocumentTypesResponse)
	err := c.cc.Invoke(ctx, "/compliance.ComplianceService/GetVerificationDocumentTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceServiceServer is the server API for ComplianceService service.
// All implementations must embed UnimplementedComplianceServiceServer
// for forward compatibility
type ComplianceServiceServer interface {
	CreateKycResultsReadyEvent(context.Context, *CreateKycResultsReadyEventRequest) (*emptypb.Empty, error)
	GetIdentityVerificationURL(context.Context, *GetIdentityVerificationURLRequest) (*GetIdentityVerificationURLResponse, error)
	GetIdentityVerificationByID(context.Context, *GetIdentityVerificationByIDRequest) (*GetIdentityVerificationByIDResponse, error)
	SubmitIdentityVerification(context.Context, *SubmitIdentityVerificationRequest) (*emptypb.Empty, error)
	UpdateIdentityVerification(context.Context, *UpdateIdentityVerificationRequest) (*emptypb.Empty, error)
	UpdateIdentityVerificationAndRequestKyc(context.Context, *UpdateIdentityVerificationAndRequestKycRequest) (*emptypb.Empty, error)
	UpdateSardineCaseEvent(context.Context, *UpdateSardineCaseRequest) (*emptypb.Empty, error)
	CreateTransactionRequirements(context.Context, *CreateTransactionRequirementsRequest) (*CreateTransactionRequirementsResponse, error)
	UpdateDocumentationRequirement(context.Context, *UpdateDocumentationRequirementRequest) (*emptypb.Empty, error)
	UpdateInformationRequirement(context.Context, *UpdateInformationRequirementRequest) (*emptypb.Empty, error)
	CheckTransaction(context.Context, *CheckTransactionRequest) (*CheckTransactionResponse, error)
	GetTransactionRequirements(context.Context, *GetTransactionRequirementsRequest) (*GetTransactionRequirementsResponse, error)
	GetKycResultByID(context.Context, *GetKycResultByIDRequest) (*GetKycResultByIDResponse, error)
	GetVerificationRequirements(context.Context, *GetVerificationRequirementsRequest) (*GetVerificationRequirementsResponse, error)
	CompleteVerificationRequirement(context.Context, *CompleteVerificationRequirementRequest) (*CompleteVerificationRequirementResponse, error)
	UploadSilaDocument(ComplianceService_UploadSilaDocumentServer) error
	GetVerificationDocumentTypes(context.Context, *GetVerificationDocumentTypesRequest) (*GetVerificationDocumentTypesResponse, error)
	mustEmbedUnimplementedComplianceServiceServer()
}

// UnimplementedComplianceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComplianceServiceServer struct {
}

func (UnimplementedComplianceServiceServer) CreateKycResultsReadyEvent(context.Context, *CreateKycResultsReadyEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKycResultsReadyEvent not implemented")
}
func (UnimplementedComplianceServiceServer) GetIdentityVerificationURL(context.Context, *GetIdentityVerificationURLRequest) (*GetIdentityVerificationURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityVerificationURL not implemented")
}
func (UnimplementedComplianceServiceServer) GetIdentityVerificationByID(context.Context, *GetIdentityVerificationByIDRequest) (*GetIdentityVerificationByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityVerificationByID not implemented")
}
func (UnimplementedComplianceServiceServer) SubmitIdentityVerification(context.Context, *SubmitIdentityVerificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitIdentityVerification not implemented")
}
func (UnimplementedComplianceServiceServer) UpdateIdentityVerification(context.Context, *UpdateIdentityVerificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentityVerification not implemented")
}
func (UnimplementedComplianceServiceServer) UpdateIdentityVerificationAndRequestKyc(context.Context, *UpdateIdentityVerificationAndRequestKycRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentityVerificationAndRequestKyc not implemented")
}
func (UnimplementedComplianceServiceServer) UpdateSardineCaseEvent(context.Context, *UpdateSardineCaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSardineCaseEvent not implemented")
}
func (UnimplementedComplianceServiceServer) CreateTransactionRequirements(context.Context, *CreateTransactionRequirementsRequest) (*CreateTransactionRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionRequirements not implemented")
}
func (UnimplementedComplianceServiceServer) UpdateDocumentationRequirement(context.Context, *UpdateDocumentationRequirementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocumentationRequirement not implemented")
}
func (UnimplementedComplianceServiceServer) UpdateInformationRequirement(context.Context, *UpdateInformationRequirementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInformationRequirement not implemented")
}
func (UnimplementedComplianceServiceServer) CheckTransaction(context.Context, *CheckTransactionRequest) (*CheckTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTransaction not implemented")
}
func (UnimplementedComplianceServiceServer) GetTransactionRequirements(context.Context, *GetTransactionRequirementsRequest) (*GetTransactionRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionRequirements not implemented")
}
func (UnimplementedComplianceServiceServer) GetKycResultByID(context.Context, *GetKycResultByIDRequest) (*GetKycResultByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycResultByID not implemented")
}
func (UnimplementedComplianceServiceServer) GetVerificationRequirements(context.Context, *GetVerificationRequirementsRequest) (*GetVerificationRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerificationRequirements not implemented")
}
func (UnimplementedComplianceServiceServer) CompleteVerificationRequirement(context.Context, *CompleteVerificationRequirementRequest) (*CompleteVerificationRequirementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteVerificationRequirement not implemented")
}
func (UnimplementedComplianceServiceServer) UploadSilaDocument(ComplianceService_UploadSilaDocumentServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadSilaDocument not implemented")
}
func (UnimplementedComplianceServiceServer) GetVerificationDocumentTypes(context.Context, *GetVerificationDocumentTypesRequest) (*GetVerificationDocumentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerificationDocumentTypes not implemented")
}
func (UnimplementedComplianceServiceServer) mustEmbedUnimplementedComplianceServiceServer() {}

// UnsafeComplianceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceServiceServer will
// result in compilation errors.
type UnsafeComplianceServiceServer interface {
	mustEmbedUnimplementedComplianceServiceServer()
}

func RegisterComplianceServiceServer(s grpc.ServiceRegistrar, srv ComplianceServiceServer) {
	s.RegisterService(&ComplianceService_ServiceDesc, srv)
}

func _ComplianceService_CreateKycResultsReadyEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKycResultsReadyEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).CreateKycResultsReadyEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/CreateKycResultsReadyEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).CreateKycResultsReadyEvent(ctx, req.(*CreateKycResultsReadyEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetIdentityVerificationURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityVerificationURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetIdentityVerificationURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/GetIdentityVerificationURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetIdentityVerificationURL(ctx, req.(*GetIdentityVerificationURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetIdentityVerificationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityVerificationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetIdentityVerificationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/GetIdentityVerificationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetIdentityVerificationByID(ctx, req.(*GetIdentityVerificationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_SubmitIdentityVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitIdentityVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).SubmitIdentityVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/SubmitIdentityVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).SubmitIdentityVerification(ctx, req.(*SubmitIdentityVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_UpdateIdentityVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentityVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).UpdateIdentityVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/UpdateIdentityVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).UpdateIdentityVerification(ctx, req.(*UpdateIdentityVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_UpdateIdentityVerificationAndRequestKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentityVerificationAndRequestKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).UpdateIdentityVerificationAndRequestKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/UpdateIdentityVerificationAndRequestKyc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).UpdateIdentityVerificationAndRequestKyc(ctx, req.(*UpdateIdentityVerificationAndRequestKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_UpdateSardineCaseEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSardineCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).UpdateSardineCaseEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/UpdateSardineCaseEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).UpdateSardineCaseEvent(ctx, req.(*UpdateSardineCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_CreateTransactionRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequirementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).CreateTransactionRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/CreateTransactionRequirements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).CreateTransactionRequirements(ctx, req.(*CreateTransactionRequirementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_UpdateDocumentationRequirement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentationRequirementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).UpdateDocumentationRequirement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/UpdateDocumentationRequirement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).UpdateDocumentationRequirement(ctx, req.(*UpdateDocumentationRequirementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_UpdateInformationRequirement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInformationRequirementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).UpdateInformationRequirement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/UpdateInformationRequirement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).UpdateInformationRequirement(ctx, req.(*UpdateInformationRequirementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_CheckTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).CheckTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/CheckTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).CheckTransaction(ctx, req.(*CheckTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetTransactionRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequirementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetTransactionRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/GetTransactionRequirements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetTransactionRequirements(ctx, req.(*GetTransactionRequirementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetKycResultByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycResultByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetKycResultByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/GetKycResultByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetKycResultByID(ctx, req.(*GetKycResultByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetVerificationRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerificationRequirementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetVerificationRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/GetVerificationRequirements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetVerificationRequirements(ctx, req.(*GetVerificationRequirementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_CompleteVerificationRequirement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteVerificationRequirementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).CompleteVerificationRequirement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/CompleteVerificationRequirement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).CompleteVerificationRequirement(ctx, req.(*CompleteVerificationRequirementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_UploadSilaDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComplianceServiceServer).UploadSilaDocument(&complianceServiceUploadSilaDocumentServer{stream})
}

type ComplianceService_UploadSilaDocumentServer interface {
	SendAndClose(*UploadSilaDocumentResponse) error
	Recv() (*UploadSilaDocumentRequest, error)
	grpc.ServerStream
}

type complianceServiceUploadSilaDocumentServer struct {
	grpc.ServerStream
}

func (x *complianceServiceUploadSilaDocumentServer) SendAndClose(m *UploadSilaDocumentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *complianceServiceUploadSilaDocumentServer) Recv() (*UploadSilaDocumentRequest, error) {
	m := new(UploadSilaDocumentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ComplianceService_GetVerificationDocumentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerificationDocumentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetVerificationDocumentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compliance.ComplianceService/GetVerificationDocumentTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetVerificationDocumentTypes(ctx, req.(*GetVerificationDocumentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplianceService_ServiceDesc is the grpc.ServiceDesc for ComplianceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplianceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compliance.ComplianceService",
	HandlerType: (*ComplianceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKycResultsReadyEvent",
			Handler:    _ComplianceService_CreateKycResultsReadyEvent_Handler,
		},
		{
			MethodName: "GetIdentityVerificationURL",
			Handler:    _ComplianceService_GetIdentityVerificationURL_Handler,
		},
		{
			MethodName: "GetIdentityVerificationByID",
			Handler:    _ComplianceService_GetIdentityVerificationByID_Handler,
		},
		{
			MethodName: "SubmitIdentityVerification",
			Handler:    _ComplianceService_SubmitIdentityVerification_Handler,
		},
		{
			MethodName: "UpdateIdentityVerification",
			Handler:    _ComplianceService_UpdateIdentityVerification_Handler,
		},
		{
			MethodName: "UpdateIdentityVerificationAndRequestKyc",
			Handler:    _ComplianceService_UpdateIdentityVerificationAndRequestKyc_Handler,
		},
		{
			MethodName: "UpdateSardineCaseEvent",
			Handler:    _ComplianceService_UpdateSardineCaseEvent_Handler,
		},
		{
			MethodName: "CreateTransactionRequirements",
			Handler:    _ComplianceService_CreateTransactionRequirements_Handler,
		},
		{
			MethodName: "UpdateDocumentationRequirement",
			Handler:    _ComplianceService_UpdateDocumentationRequirement_Handler,
		},
		{
			MethodName: "UpdateInformationRequirement",
			Handler:    _ComplianceService_UpdateInformationRequirement_Handler,
		},
		{
			MethodName: "CheckTransaction",
			Handler:    _ComplianceService_CheckTransaction_Handler,
		},
		{
			MethodName: "GetTransactionRequirements",
			Handler:    _ComplianceService_GetTransactionRequirements_Handler,
		},
		{
			MethodName: "GetKycResultByID",
			Handler:    _ComplianceService_GetKycResultByID_Handler,
		},
		{
			MethodName: "GetVerificationRequirements",
			Handler:    _ComplianceService_GetVerificationRequirements_Handler,
		},
		{
			MethodName: "CompleteVerificationRequirement",
			Handler:    _ComplianceService_CompleteVerificationRequirement_Handler,
		},
		{
			MethodName: "GetVerificationDocumentTypes",
			Handler:    _ComplianceService_GetVerificationDocumentTypes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadSilaDocument",
			Handler:       _ComplianceService_UploadSilaDocument_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "kappa/services/compliance/compliance.proto",
}
