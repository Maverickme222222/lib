// Code generated by MockGen. DO NOT EDIT.
// Source: ../compliance_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	compliance "github.com/kappapay/backend/lib/golang/src/kappa/services/compliance"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockComplianceServiceClient is a mock of ComplianceServiceClient interface.
type MockComplianceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceServiceClientMockRecorder
}

// MockComplianceServiceClientMockRecorder is the mock recorder for MockComplianceServiceClient.
type MockComplianceServiceClientMockRecorder struct {
	mock *MockComplianceServiceClient
}

// NewMockComplianceServiceClient creates a new mock instance.
func NewMockComplianceServiceClient(ctrl *gomock.Controller) *MockComplianceServiceClient {
	mock := &MockComplianceServiceClient{ctrl: ctrl}
	mock.recorder = &MockComplianceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceServiceClient) EXPECT() *MockComplianceServiceClientMockRecorder {
	return m.recorder
}

// CheckTransaction mocks base method.
func (m *MockComplianceServiceClient) CheckTransaction(ctx context.Context, in *compliance.CheckTransactionRequest, opts ...grpc.CallOption) (*compliance.CheckTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckTransaction", varargs...)
	ret0, _ := ret[0].(*compliance.CheckTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTransaction indicates an expected call of CheckTransaction.
func (mr *MockComplianceServiceClientMockRecorder) CheckTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransaction", reflect.TypeOf((*MockComplianceServiceClient)(nil).CheckTransaction), varargs...)
}

// CompleteVerificationRequirement mocks base method.
func (m *MockComplianceServiceClient) CompleteVerificationRequirement(ctx context.Context, in *compliance.CompleteVerificationRequirementRequest, opts ...grpc.CallOption) (*compliance.CompleteVerificationRequirementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteVerificationRequirement", varargs...)
	ret0, _ := ret[0].(*compliance.CompleteVerificationRequirementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteVerificationRequirement indicates an expected call of CompleteVerificationRequirement.
func (mr *MockComplianceServiceClientMockRecorder) CompleteVerificationRequirement(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteVerificationRequirement", reflect.TypeOf((*MockComplianceServiceClient)(nil).CompleteVerificationRequirement), varargs...)
}

// CreateKycResultsReadyEvent mocks base method.
func (m *MockComplianceServiceClient) CreateKycResultsReadyEvent(ctx context.Context, in *compliance.CreateKycResultsReadyEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKycResultsReadyEvent", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKycResultsReadyEvent indicates an expected call of CreateKycResultsReadyEvent.
func (mr *MockComplianceServiceClientMockRecorder) CreateKycResultsReadyEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKycResultsReadyEvent", reflect.TypeOf((*MockComplianceServiceClient)(nil).CreateKycResultsReadyEvent), varargs...)
}

// CreateTransactionRequirements mocks base method.
func (m *MockComplianceServiceClient) CreateTransactionRequirements(ctx context.Context, in *compliance.CreateTransactionRequirementsRequest, opts ...grpc.CallOption) (*compliance.CreateTransactionRequirementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransactionRequirements", varargs...)
	ret0, _ := ret[0].(*compliance.CreateTransactionRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionRequirements indicates an expected call of CreateTransactionRequirements.
func (mr *MockComplianceServiceClientMockRecorder) CreateTransactionRequirements(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionRequirements", reflect.TypeOf((*MockComplianceServiceClient)(nil).CreateTransactionRequirements), varargs...)
}

// GetIdentityVerificationByID mocks base method.
func (m *MockComplianceServiceClient) GetIdentityVerificationByID(ctx context.Context, in *compliance.GetIdentityVerificationByIDRequest, opts ...grpc.CallOption) (*compliance.GetIdentityVerificationByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityVerificationByID", varargs...)
	ret0, _ := ret[0].(*compliance.GetIdentityVerificationByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityVerificationByID indicates an expected call of GetIdentityVerificationByID.
func (mr *MockComplianceServiceClientMockRecorder) GetIdentityVerificationByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityVerificationByID", reflect.TypeOf((*MockComplianceServiceClient)(nil).GetIdentityVerificationByID), varargs...)
}

// GetIdentityVerificationURL mocks base method.
func (m *MockComplianceServiceClient) GetIdentityVerificationURL(ctx context.Context, in *compliance.GetIdentityVerificationURLRequest, opts ...grpc.CallOption) (*compliance.GetIdentityVerificationURLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityVerificationURL", varargs...)
	ret0, _ := ret[0].(*compliance.GetIdentityVerificationURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityVerificationURL indicates an expected call of GetIdentityVerificationURL.
func (mr *MockComplianceServiceClientMockRecorder) GetIdentityVerificationURL(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityVerificationURL", reflect.TypeOf((*MockComplianceServiceClient)(nil).GetIdentityVerificationURL), varargs...)
}

// GetKycResultByID mocks base method.
func (m *MockComplianceServiceClient) GetKycResultByID(ctx context.Context, in *compliance.GetKycResultByIDRequest, opts ...grpc.CallOption) (*compliance.GetKycResultByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKycResultByID", varargs...)
	ret0, _ := ret[0].(*compliance.GetKycResultByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKycResultByID indicates an expected call of GetKycResultByID.
func (mr *MockComplianceServiceClientMockRecorder) GetKycResultByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKycResultByID", reflect.TypeOf((*MockComplianceServiceClient)(nil).GetKycResultByID), varargs...)
}

// GetTransactionRequirements mocks base method.
func (m *MockComplianceServiceClient) GetTransactionRequirements(ctx context.Context, in *compliance.GetTransactionRequirementsRequest, opts ...grpc.CallOption) (*compliance.GetTransactionRequirementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionRequirements", varargs...)
	ret0, _ := ret[0].(*compliance.GetTransactionRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionRequirements indicates an expected call of GetTransactionRequirements.
func (mr *MockComplianceServiceClientMockRecorder) GetTransactionRequirements(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionRequirements", reflect.TypeOf((*MockComplianceServiceClient)(nil).GetTransactionRequirements), varargs...)
}

// GetVerificationDocumentTypes mocks base method.
func (m *MockComplianceServiceClient) GetVerificationDocumentTypes(ctx context.Context, in *compliance.GetVerificationDocumentTypesRequest, opts ...grpc.CallOption) (*compliance.GetVerificationDocumentTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVerificationDocumentTypes", varargs...)
	ret0, _ := ret[0].(*compliance.GetVerificationDocumentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationDocumentTypes indicates an expected call of GetVerificationDocumentTypes.
func (mr *MockComplianceServiceClientMockRecorder) GetVerificationDocumentTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationDocumentTypes", reflect.TypeOf((*MockComplianceServiceClient)(nil).GetVerificationDocumentTypes), varargs...)
}

// GetVerificationRequirements mocks base method.
func (m *MockComplianceServiceClient) GetVerificationRequirements(ctx context.Context, in *compliance.GetVerificationRequirementsRequest, opts ...grpc.CallOption) (*compliance.GetVerificationRequirementsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVerificationRequirements", varargs...)
	ret0, _ := ret[0].(*compliance.GetVerificationRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationRequirements indicates an expected call of GetVerificationRequirements.
func (mr *MockComplianceServiceClientMockRecorder) GetVerificationRequirements(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationRequirements", reflect.TypeOf((*MockComplianceServiceClient)(nil).GetVerificationRequirements), varargs...)
}

// SubmitIdentityVerification mocks base method.
func (m *MockComplianceServiceClient) SubmitIdentityVerification(ctx context.Context, in *compliance.SubmitIdentityVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitIdentityVerification", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitIdentityVerification indicates an expected call of SubmitIdentityVerification.
func (mr *MockComplianceServiceClientMockRecorder) SubmitIdentityVerification(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitIdentityVerification", reflect.TypeOf((*MockComplianceServiceClient)(nil).SubmitIdentityVerification), varargs...)
}

// UpdateDocumentationRequirement mocks base method.
func (m *MockComplianceServiceClient) UpdateDocumentationRequirement(ctx context.Context, in *compliance.UpdateDocumentationRequirementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocumentationRequirement", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentationRequirement indicates an expected call of UpdateDocumentationRequirement.
func (mr *MockComplianceServiceClientMockRecorder) UpdateDocumentationRequirement(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentationRequirement", reflect.TypeOf((*MockComplianceServiceClient)(nil).UpdateDocumentationRequirement), varargs...)
}

// UpdateIdentityVerification mocks base method.
func (m *MockComplianceServiceClient) UpdateIdentityVerification(ctx context.Context, in *compliance.UpdateIdentityVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIdentityVerification", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentityVerification indicates an expected call of UpdateIdentityVerification.
func (mr *MockComplianceServiceClientMockRecorder) UpdateIdentityVerification(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityVerification", reflect.TypeOf((*MockComplianceServiceClient)(nil).UpdateIdentityVerification), varargs...)
}

// UpdateIdentityVerificationAndRequestKyc mocks base method.
func (m *MockComplianceServiceClient) UpdateIdentityVerificationAndRequestKyc(ctx context.Context, in *compliance.UpdateIdentityVerificationAndRequestKycRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIdentityVerificationAndRequestKyc", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentityVerificationAndRequestKyc indicates an expected call of UpdateIdentityVerificationAndRequestKyc.
func (mr *MockComplianceServiceClientMockRecorder) UpdateIdentityVerificationAndRequestKyc(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityVerificationAndRequestKyc", reflect.TypeOf((*MockComplianceServiceClient)(nil).UpdateIdentityVerificationAndRequestKyc), varargs...)
}

// UpdateInformationRequirement mocks base method.
func (m *MockComplianceServiceClient) UpdateInformationRequirement(ctx context.Context, in *compliance.UpdateInformationRequirementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInformationRequirement", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInformationRequirement indicates an expected call of UpdateInformationRequirement.
func (mr *MockComplianceServiceClientMockRecorder) UpdateInformationRequirement(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInformationRequirement", reflect.TypeOf((*MockComplianceServiceClient)(nil).UpdateInformationRequirement), varargs...)
}

// UpdateSardineCaseEvent mocks base method.
func (m *MockComplianceServiceClient) UpdateSardineCaseEvent(ctx context.Context, in *compliance.UpdateSardineCaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSardineCaseEvent", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSardineCaseEvent indicates an expected call of UpdateSardineCaseEvent.
func (mr *MockComplianceServiceClientMockRecorder) UpdateSardineCaseEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSardineCaseEvent", reflect.TypeOf((*MockComplianceServiceClient)(nil).UpdateSardineCaseEvent), varargs...)
}

// UploadSilaDocument mocks base method.
func (m *MockComplianceServiceClient) UploadSilaDocument(ctx context.Context, opts ...grpc.CallOption) (compliance.ComplianceService_UploadSilaDocumentClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadSilaDocument", varargs...)
	ret0, _ := ret[0].(compliance.ComplianceService_UploadSilaDocumentClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSilaDocument indicates an expected call of UploadSilaDocument.
func (mr *MockComplianceServiceClientMockRecorder) UploadSilaDocument(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSilaDocument", reflect.TypeOf((*MockComplianceServiceClient)(nil).UploadSilaDocument), varargs...)
}

// MockComplianceService_UploadSilaDocumentClient is a mock of ComplianceService_UploadSilaDocumentClient interface.
type MockComplianceService_UploadSilaDocumentClient struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceService_UploadSilaDocumentClientMockRecorder
}

// MockComplianceService_UploadSilaDocumentClientMockRecorder is the mock recorder for MockComplianceService_UploadSilaDocumentClient.
type MockComplianceService_UploadSilaDocumentClientMockRecorder struct {
	mock *MockComplianceService_UploadSilaDocumentClient
}

// NewMockComplianceService_UploadSilaDocumentClient creates a new mock instance.
func NewMockComplianceService_UploadSilaDocumentClient(ctrl *gomock.Controller) *MockComplianceService_UploadSilaDocumentClient {
	mock := &MockComplianceService_UploadSilaDocumentClient{ctrl: ctrl}
	mock.recorder = &MockComplianceService_UploadSilaDocumentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceService_UploadSilaDocumentClient) EXPECT() *MockComplianceService_UploadSilaDocumentClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockComplianceService_UploadSilaDocumentClient) CloseAndRecv() (*compliance.UploadSilaDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*compliance.UploadSilaDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockComplianceService_UploadSilaDocumentClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockComplianceService_UploadSilaDocumentClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockComplianceService_UploadSilaDocumentClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockComplianceService_UploadSilaDocumentClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockComplianceService_UploadSilaDocumentClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentClient)(nil).Context))
}

// Header mocks base method.
func (m *MockComplianceService_UploadSilaDocumentClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockComplianceService_UploadSilaDocumentClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockComplianceService_UploadSilaDocumentClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockComplianceService_UploadSilaDocumentClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockComplianceService_UploadSilaDocumentClient) Send(arg0 *compliance.UploadSilaDocumentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockComplianceService_UploadSilaDocumentClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockComplianceService_UploadSilaDocumentClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockComplianceService_UploadSilaDocumentClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockComplianceService_UploadSilaDocumentClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockComplianceService_UploadSilaDocumentClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentClient)(nil).Trailer))
}

// MockComplianceServiceServer is a mock of ComplianceServiceServer interface.
type MockComplianceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceServiceServerMockRecorder
}

// MockComplianceServiceServerMockRecorder is the mock recorder for MockComplianceServiceServer.
type MockComplianceServiceServerMockRecorder struct {
	mock *MockComplianceServiceServer
}

// NewMockComplianceServiceServer creates a new mock instance.
func NewMockComplianceServiceServer(ctrl *gomock.Controller) *MockComplianceServiceServer {
	mock := &MockComplianceServiceServer{ctrl: ctrl}
	mock.recorder = &MockComplianceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceServiceServer) EXPECT() *MockComplianceServiceServerMockRecorder {
	return m.recorder
}

// CheckTransaction mocks base method.
func (m *MockComplianceServiceServer) CheckTransaction(arg0 context.Context, arg1 *compliance.CheckTransactionRequest) (*compliance.CheckTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTransaction", arg0, arg1)
	ret0, _ := ret[0].(*compliance.CheckTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTransaction indicates an expected call of CheckTransaction.
func (mr *MockComplianceServiceServerMockRecorder) CheckTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransaction", reflect.TypeOf((*MockComplianceServiceServer)(nil).CheckTransaction), arg0, arg1)
}

// CompleteVerificationRequirement mocks base method.
func (m *MockComplianceServiceServer) CompleteVerificationRequirement(arg0 context.Context, arg1 *compliance.CompleteVerificationRequirementRequest) (*compliance.CompleteVerificationRequirementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteVerificationRequirement", arg0, arg1)
	ret0, _ := ret[0].(*compliance.CompleteVerificationRequirementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteVerificationRequirement indicates an expected call of CompleteVerificationRequirement.
func (mr *MockComplianceServiceServerMockRecorder) CompleteVerificationRequirement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteVerificationRequirement", reflect.TypeOf((*MockComplianceServiceServer)(nil).CompleteVerificationRequirement), arg0, arg1)
}

// CreateKycResultsReadyEvent mocks base method.
func (m *MockComplianceServiceServer) CreateKycResultsReadyEvent(arg0 context.Context, arg1 *compliance.CreateKycResultsReadyEventRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKycResultsReadyEvent", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKycResultsReadyEvent indicates an expected call of CreateKycResultsReadyEvent.
func (mr *MockComplianceServiceServerMockRecorder) CreateKycResultsReadyEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKycResultsReadyEvent", reflect.TypeOf((*MockComplianceServiceServer)(nil).CreateKycResultsReadyEvent), arg0, arg1)
}

// CreateTransactionRequirements mocks base method.
func (m *MockComplianceServiceServer) CreateTransactionRequirements(arg0 context.Context, arg1 *compliance.CreateTransactionRequirementsRequest) (*compliance.CreateTransactionRequirementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionRequirements", arg0, arg1)
	ret0, _ := ret[0].(*compliance.CreateTransactionRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionRequirements indicates an expected call of CreateTransactionRequirements.
func (mr *MockComplianceServiceServerMockRecorder) CreateTransactionRequirements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionRequirements", reflect.TypeOf((*MockComplianceServiceServer)(nil).CreateTransactionRequirements), arg0, arg1)
}

// GetIdentityVerificationByID mocks base method.
func (m *MockComplianceServiceServer) GetIdentityVerificationByID(arg0 context.Context, arg1 *compliance.GetIdentityVerificationByIDRequest) (*compliance.GetIdentityVerificationByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityVerificationByID", arg0, arg1)
	ret0, _ := ret[0].(*compliance.GetIdentityVerificationByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityVerificationByID indicates an expected call of GetIdentityVerificationByID.
func (mr *MockComplianceServiceServerMockRecorder) GetIdentityVerificationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityVerificationByID", reflect.TypeOf((*MockComplianceServiceServer)(nil).GetIdentityVerificationByID), arg0, arg1)
}

// GetIdentityVerificationURL mocks base method.
func (m *MockComplianceServiceServer) GetIdentityVerificationURL(arg0 context.Context, arg1 *compliance.GetIdentityVerificationURLRequest) (*compliance.GetIdentityVerificationURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityVerificationURL", arg0, arg1)
	ret0, _ := ret[0].(*compliance.GetIdentityVerificationURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityVerificationURL indicates an expected call of GetIdentityVerificationURL.
func (mr *MockComplianceServiceServerMockRecorder) GetIdentityVerificationURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityVerificationURL", reflect.TypeOf((*MockComplianceServiceServer)(nil).GetIdentityVerificationURL), arg0, arg1)
}

// GetKycResultByID mocks base method.
func (m *MockComplianceServiceServer) GetKycResultByID(arg0 context.Context, arg1 *compliance.GetKycResultByIDRequest) (*compliance.GetKycResultByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKycResultByID", arg0, arg1)
	ret0, _ := ret[0].(*compliance.GetKycResultByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKycResultByID indicates an expected call of GetKycResultByID.
func (mr *MockComplianceServiceServerMockRecorder) GetKycResultByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKycResultByID", reflect.TypeOf((*MockComplianceServiceServer)(nil).GetKycResultByID), arg0, arg1)
}

// GetTransactionRequirements mocks base method.
func (m *MockComplianceServiceServer) GetTransactionRequirements(arg0 context.Context, arg1 *compliance.GetTransactionRequirementsRequest) (*compliance.GetTransactionRequirementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionRequirements", arg0, arg1)
	ret0, _ := ret[0].(*compliance.GetTransactionRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionRequirements indicates an expected call of GetTransactionRequirements.
func (mr *MockComplianceServiceServerMockRecorder) GetTransactionRequirements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionRequirements", reflect.TypeOf((*MockComplianceServiceServer)(nil).GetTransactionRequirements), arg0, arg1)
}

// GetVerificationDocumentTypes mocks base method.
func (m *MockComplianceServiceServer) GetVerificationDocumentTypes(arg0 context.Context, arg1 *compliance.GetVerificationDocumentTypesRequest) (*compliance.GetVerificationDocumentTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationDocumentTypes", arg0, arg1)
	ret0, _ := ret[0].(*compliance.GetVerificationDocumentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationDocumentTypes indicates an expected call of GetVerificationDocumentTypes.
func (mr *MockComplianceServiceServerMockRecorder) GetVerificationDocumentTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationDocumentTypes", reflect.TypeOf((*MockComplianceServiceServer)(nil).GetVerificationDocumentTypes), arg0, arg1)
}

// GetVerificationRequirements mocks base method.
func (m *MockComplianceServiceServer) GetVerificationRequirements(arg0 context.Context, arg1 *compliance.GetVerificationRequirementsRequest) (*compliance.GetVerificationRequirementsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationRequirements", arg0, arg1)
	ret0, _ := ret[0].(*compliance.GetVerificationRequirementsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationRequirements indicates an expected call of GetVerificationRequirements.
func (mr *MockComplianceServiceServerMockRecorder) GetVerificationRequirements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationRequirements", reflect.TypeOf((*MockComplianceServiceServer)(nil).GetVerificationRequirements), arg0, arg1)
}

// SubmitIdentityVerification mocks base method.
func (m *MockComplianceServiceServer) SubmitIdentityVerification(arg0 context.Context, arg1 *compliance.SubmitIdentityVerificationRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitIdentityVerification", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitIdentityVerification indicates an expected call of SubmitIdentityVerification.
func (mr *MockComplianceServiceServerMockRecorder) SubmitIdentityVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitIdentityVerification", reflect.TypeOf((*MockComplianceServiceServer)(nil).SubmitIdentityVerification), arg0, arg1)
}

// UpdateDocumentationRequirement mocks base method.
func (m *MockComplianceServiceServer) UpdateDocumentationRequirement(arg0 context.Context, arg1 *compliance.UpdateDocumentationRequirementRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocumentationRequirement", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentationRequirement indicates an expected call of UpdateDocumentationRequirement.
func (mr *MockComplianceServiceServerMockRecorder) UpdateDocumentationRequirement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentationRequirement", reflect.TypeOf((*MockComplianceServiceServer)(nil).UpdateDocumentationRequirement), arg0, arg1)
}

// UpdateIdentityVerification mocks base method.
func (m *MockComplianceServiceServer) UpdateIdentityVerification(arg0 context.Context, arg1 *compliance.UpdateIdentityVerificationRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityVerification", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentityVerification indicates an expected call of UpdateIdentityVerification.
func (mr *MockComplianceServiceServerMockRecorder) UpdateIdentityVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityVerification", reflect.TypeOf((*MockComplianceServiceServer)(nil).UpdateIdentityVerification), arg0, arg1)
}

// UpdateIdentityVerificationAndRequestKyc mocks base method.
func (m *MockComplianceServiceServer) UpdateIdentityVerificationAndRequestKyc(arg0 context.Context, arg1 *compliance.UpdateIdentityVerificationAndRequestKycRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityVerificationAndRequestKyc", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentityVerificationAndRequestKyc indicates an expected call of UpdateIdentityVerificationAndRequestKyc.
func (mr *MockComplianceServiceServerMockRecorder) UpdateIdentityVerificationAndRequestKyc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityVerificationAndRequestKyc", reflect.TypeOf((*MockComplianceServiceServer)(nil).UpdateIdentityVerificationAndRequestKyc), arg0, arg1)
}

// UpdateInformationRequirement mocks base method.
func (m *MockComplianceServiceServer) UpdateInformationRequirement(arg0 context.Context, arg1 *compliance.UpdateInformationRequirementRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInformationRequirement", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInformationRequirement indicates an expected call of UpdateInformationRequirement.
func (mr *MockComplianceServiceServerMockRecorder) UpdateInformationRequirement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInformationRequirement", reflect.TypeOf((*MockComplianceServiceServer)(nil).UpdateInformationRequirement), arg0, arg1)
}

// UpdateSardineCaseEvent mocks base method.
func (m *MockComplianceServiceServer) UpdateSardineCaseEvent(arg0 context.Context, arg1 *compliance.UpdateSardineCaseRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSardineCaseEvent", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSardineCaseEvent indicates an expected call of UpdateSardineCaseEvent.
func (mr *MockComplianceServiceServerMockRecorder) UpdateSardineCaseEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSardineCaseEvent", reflect.TypeOf((*MockComplianceServiceServer)(nil).UpdateSardineCaseEvent), arg0, arg1)
}

// UploadSilaDocument mocks base method.
func (m *MockComplianceServiceServer) UploadSilaDocument(arg0 compliance.ComplianceService_UploadSilaDocumentServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSilaDocument", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadSilaDocument indicates an expected call of UploadSilaDocument.
func (mr *MockComplianceServiceServerMockRecorder) UploadSilaDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSilaDocument", reflect.TypeOf((*MockComplianceServiceServer)(nil).UploadSilaDocument), arg0)
}

// mustEmbedUnimplementedComplianceServiceServer mocks base method.
func (m *MockComplianceServiceServer) mustEmbedUnimplementedComplianceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedComplianceServiceServer")
}

// mustEmbedUnimplementedComplianceServiceServer indicates an expected call of mustEmbedUnimplementedComplianceServiceServer.
func (mr *MockComplianceServiceServerMockRecorder) mustEmbedUnimplementedComplianceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedComplianceServiceServer", reflect.TypeOf((*MockComplianceServiceServer)(nil).mustEmbedUnimplementedComplianceServiceServer))
}

// MockUnsafeComplianceServiceServer is a mock of UnsafeComplianceServiceServer interface.
type MockUnsafeComplianceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeComplianceServiceServerMockRecorder
}

// MockUnsafeComplianceServiceServerMockRecorder is the mock recorder for MockUnsafeComplianceServiceServer.
type MockUnsafeComplianceServiceServerMockRecorder struct {
	mock *MockUnsafeComplianceServiceServer
}

// NewMockUnsafeComplianceServiceServer creates a new mock instance.
func NewMockUnsafeComplianceServiceServer(ctrl *gomock.Controller) *MockUnsafeComplianceServiceServer {
	mock := &MockUnsafeComplianceServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeComplianceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeComplianceServiceServer) EXPECT() *MockUnsafeComplianceServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedComplianceServiceServer mocks base method.
func (m *MockUnsafeComplianceServiceServer) mustEmbedUnimplementedComplianceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedComplianceServiceServer")
}

// mustEmbedUnimplementedComplianceServiceServer indicates an expected call of mustEmbedUnimplementedComplianceServiceServer.
func (mr *MockUnsafeComplianceServiceServerMockRecorder) mustEmbedUnimplementedComplianceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedComplianceServiceServer", reflect.TypeOf((*MockUnsafeComplianceServiceServer)(nil).mustEmbedUnimplementedComplianceServiceServer))
}

// MockComplianceService_UploadSilaDocumentServer is a mock of ComplianceService_UploadSilaDocumentServer interface.
type MockComplianceService_UploadSilaDocumentServer struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceService_UploadSilaDocumentServerMockRecorder
}

// MockComplianceService_UploadSilaDocumentServerMockRecorder is the mock recorder for MockComplianceService_UploadSilaDocumentServer.
type MockComplianceService_UploadSilaDocumentServerMockRecorder struct {
	mock *MockComplianceService_UploadSilaDocumentServer
}

// NewMockComplianceService_UploadSilaDocumentServer creates a new mock instance.
func NewMockComplianceService_UploadSilaDocumentServer(ctrl *gomock.Controller) *MockComplianceService_UploadSilaDocumentServer {
	mock := &MockComplianceService_UploadSilaDocumentServer{ctrl: ctrl}
	mock.recorder = &MockComplianceService_UploadSilaDocumentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceService_UploadSilaDocumentServer) EXPECT() *MockComplianceService_UploadSilaDocumentServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockComplianceService_UploadSilaDocumentServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockComplianceService_UploadSilaDocumentServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockComplianceService_UploadSilaDocumentServer) Recv() (*compliance.UploadSilaDocumentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*compliance.UploadSilaDocumentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockComplianceService_UploadSilaDocumentServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockComplianceService_UploadSilaDocumentServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockComplianceService_UploadSilaDocumentServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockComplianceService_UploadSilaDocumentServer) SendAndClose(arg0 *compliance.UploadSilaDocumentResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockComplianceService_UploadSilaDocumentServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockComplianceService_UploadSilaDocumentServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockComplianceService_UploadSilaDocumentServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockComplianceService_UploadSilaDocumentServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockComplianceService_UploadSilaDocumentServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockComplianceService_UploadSilaDocumentServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockComplianceService_UploadSilaDocumentServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockComplianceService_UploadSilaDocumentServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockComplianceService_UploadSilaDocumentServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockComplianceService_UploadSilaDocumentServer)(nil).SetTrailer), arg0)
}
