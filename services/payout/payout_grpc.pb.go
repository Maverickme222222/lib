// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/payout/payout.proto

package payout

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayoutServiceClient is the client API for PayoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayoutServiceClient interface {
	CreatePayoutRequest(ctx context.Context, in *CreatePayoutRequestRequest, opts ...grpc.CallOption) (*CreatePayoutRequestResponse, error)
	GetPayoutRequestByTransactionReference(ctx context.Context, in *GetPayoutRequestByTransactionReferenceRequest, opts ...grpc.CallOption) (*GetPayoutRequestByTransactionReferenceResponse, error)
	UpdatePayoutRequestStatus(ctx context.Context, in *UpdatePayoutRequestStatusRequest, opts ...grpc.CallOption) (*UpdatePayoutRequestStatusResponse, error)
	ProcessSilaTransactionUpdate(ctx context.Context, in *ProcessSilaTransactionUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProcessCMRBankAccountWithdrawal(ctx context.Context, in *ProcessCMRBankAccountWithdrawalRequest, opts ...grpc.CallOption) (*ProcessCMRBankAccountWithdrawalResponse, error)
}

type payoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayoutServiceClient(cc grpc.ClientConnInterface) PayoutServiceClient {
	return &payoutServiceClient{cc}
}

func (c *payoutServiceClient) CreatePayoutRequest(ctx context.Context, in *CreatePayoutRequestRequest, opts ...grpc.CallOption) (*CreatePayoutRequestResponse, error) {
	out := new(CreatePayoutRequestResponse)
	err := c.cc.Invoke(ctx, "/payout.PayoutService/CreatePayoutRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payoutServiceClient) GetPayoutRequestByTransactionReference(ctx context.Context, in *GetPayoutRequestByTransactionReferenceRequest, opts ...grpc.CallOption) (*GetPayoutRequestByTransactionReferenceResponse, error) {
	out := new(GetPayoutRequestByTransactionReferenceResponse)
	err := c.cc.Invoke(ctx, "/payout.PayoutService/GetPayoutRequestByTransactionReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payoutServiceClient) UpdatePayoutRequestStatus(ctx context.Context, in *UpdatePayoutRequestStatusRequest, opts ...grpc.CallOption) (*UpdatePayoutRequestStatusResponse, error) {
	out := new(UpdatePayoutRequestStatusResponse)
	err := c.cc.Invoke(ctx, "/payout.PayoutService/UpdatePayoutRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payoutServiceClient) ProcessSilaTransactionUpdate(ctx context.Context, in *ProcessSilaTransactionUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payout.PayoutService/ProcessSilaTransactionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payoutServiceClient) ProcessCMRBankAccountWithdrawal(ctx context.Context, in *ProcessCMRBankAccountWithdrawalRequest, opts ...grpc.CallOption) (*ProcessCMRBankAccountWithdrawalResponse, error) {
	out := new(ProcessCMRBankAccountWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/payout.PayoutService/ProcessCMRBankAccountWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayoutServiceServer is the server API for PayoutService service.
// All implementations must embed UnimplementedPayoutServiceServer
// for forward compatibility
type PayoutServiceServer interface {
	CreatePayoutRequest(context.Context, *CreatePayoutRequestRequest) (*CreatePayoutRequestResponse, error)
	GetPayoutRequestByTransactionReference(context.Context, *GetPayoutRequestByTransactionReferenceRequest) (*GetPayoutRequestByTransactionReferenceResponse, error)
	UpdatePayoutRequestStatus(context.Context, *UpdatePayoutRequestStatusRequest) (*UpdatePayoutRequestStatusResponse, error)
	ProcessSilaTransactionUpdate(context.Context, *ProcessSilaTransactionUpdateRequest) (*emptypb.Empty, error)
	ProcessCMRBankAccountWithdrawal(context.Context, *ProcessCMRBankAccountWithdrawalRequest) (*ProcessCMRBankAccountWithdrawalResponse, error)
	mustEmbedUnimplementedPayoutServiceServer()
}

// UnimplementedPayoutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayoutServiceServer struct {
}

func (UnimplementedPayoutServiceServer) CreatePayoutRequest(context.Context, *CreatePayoutRequestRequest) (*CreatePayoutRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayoutRequest not implemented")
}
func (UnimplementedPayoutServiceServer) GetPayoutRequestByTransactionReference(context.Context, *GetPayoutRequestByTransactionReferenceRequest) (*GetPayoutRequestByTransactionReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayoutRequestByTransactionReference not implemented")
}
func (UnimplementedPayoutServiceServer) UpdatePayoutRequestStatus(context.Context, *UpdatePayoutRequestStatusRequest) (*UpdatePayoutRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayoutRequestStatus not implemented")
}
func (UnimplementedPayoutServiceServer) ProcessSilaTransactionUpdate(context.Context, *ProcessSilaTransactionUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSilaTransactionUpdate not implemented")
}
func (UnimplementedPayoutServiceServer) ProcessCMRBankAccountWithdrawal(context.Context, *ProcessCMRBankAccountWithdrawalRequest) (*ProcessCMRBankAccountWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCMRBankAccountWithdrawal not implemented")
}
func (UnimplementedPayoutServiceServer) mustEmbedUnimplementedPayoutServiceServer() {}

// UnsafePayoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayoutServiceServer will
// result in compilation errors.
type UnsafePayoutServiceServer interface {
	mustEmbedUnimplementedPayoutServiceServer()
}

func RegisterPayoutServiceServer(s grpc.ServiceRegistrar, srv PayoutServiceServer) {
	s.RegisterService(&PayoutService_ServiceDesc, srv)
}

func _PayoutService_CreatePayoutRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayoutRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayoutServiceServer).CreatePayoutRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payout.PayoutService/CreatePayoutRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayoutServiceServer).CreatePayoutRequest(ctx, req.(*CreatePayoutRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayoutService_GetPayoutRequestByTransactionReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayoutRequestByTransactionReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayoutServiceServer).GetPayoutRequestByTransactionReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payout.PayoutService/GetPayoutRequestByTransactionReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayoutServiceServer).GetPayoutRequestByTransactionReference(ctx, req.(*GetPayoutRequestByTransactionReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayoutService_UpdatePayoutRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayoutRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayoutServiceServer).UpdatePayoutRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payout.PayoutService/UpdatePayoutRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayoutServiceServer).UpdatePayoutRequestStatus(ctx, req.(*UpdatePayoutRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayoutService_ProcessSilaTransactionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessSilaTransactionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayoutServiceServer).ProcessSilaTransactionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payout.PayoutService/ProcessSilaTransactionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayoutServiceServer).ProcessSilaTransactionUpdate(ctx, req.(*ProcessSilaTransactionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayoutService_ProcessCMRBankAccountWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCMRBankAccountWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayoutServiceServer).ProcessCMRBankAccountWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payout.PayoutService/ProcessCMRBankAccountWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayoutServiceServer).ProcessCMRBankAccountWithdrawal(ctx, req.(*ProcessCMRBankAccountWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayoutService_ServiceDesc is the grpc.ServiceDesc for PayoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payout.PayoutService",
	HandlerType: (*PayoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayoutRequest",
			Handler:    _PayoutService_CreatePayoutRequest_Handler,
		},
		{
			MethodName: "GetPayoutRequestByTransactionReference",
			Handler:    _PayoutService_GetPayoutRequestByTransactionReference_Handler,
		},
		{
			MethodName: "UpdatePayoutRequestStatus",
			Handler:    _PayoutService_UpdatePayoutRequestStatus_Handler,
		},
		{
			MethodName: "ProcessSilaTransactionUpdate",
			Handler:    _PayoutService_ProcessSilaTransactionUpdate_Handler,
		},
		{
			MethodName: "ProcessCMRBankAccountWithdrawal",
			Handler:    _PayoutService_ProcessCMRBankAccountWithdrawal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/payout/payout.proto",
}
