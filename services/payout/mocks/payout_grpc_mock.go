// Code generated by MockGen. DO NOT EDIT.
// Source: ../payout_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payout "github.com/kappapay/backend/lib/golang/src/kappa/services/payout"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockPayoutServiceClient is a mock of PayoutServiceClient interface.
type MockPayoutServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPayoutServiceClientMockRecorder
}

// MockPayoutServiceClientMockRecorder is the mock recorder for MockPayoutServiceClient.
type MockPayoutServiceClientMockRecorder struct {
	mock *MockPayoutServiceClient
}

// NewMockPayoutServiceClient creates a new mock instance.
func NewMockPayoutServiceClient(ctrl *gomock.Controller) *MockPayoutServiceClient {
	mock := &MockPayoutServiceClient{ctrl: ctrl}
	mock.recorder = &MockPayoutServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayoutServiceClient) EXPECT() *MockPayoutServiceClientMockRecorder {
	return m.recorder
}

// CreatePayoutRequest mocks base method.
func (m *MockPayoutServiceClient) CreatePayoutRequest(ctx context.Context, in *payout.CreatePayoutRequestRequest, opts ...grpc.CallOption) (*payout.CreatePayoutRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePayoutRequest", varargs...)
	ret0, _ := ret[0].(*payout.CreatePayoutRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayoutRequest indicates an expected call of CreatePayoutRequest.
func (mr *MockPayoutServiceClientMockRecorder) CreatePayoutRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayoutRequest", reflect.TypeOf((*MockPayoutServiceClient)(nil).CreatePayoutRequest), varargs...)
}

// GetPayoutRequestByTransactionReference mocks base method.
func (m *MockPayoutServiceClient) GetPayoutRequestByTransactionReference(ctx context.Context, in *payout.GetPayoutRequestByTransactionReferenceRequest, opts ...grpc.CallOption) (*payout.GetPayoutRequestByTransactionReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPayoutRequestByTransactionReference", varargs...)
	ret0, _ := ret[0].(*payout.GetPayoutRequestByTransactionReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayoutRequestByTransactionReference indicates an expected call of GetPayoutRequestByTransactionReference.
func (mr *MockPayoutServiceClientMockRecorder) GetPayoutRequestByTransactionReference(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayoutRequestByTransactionReference", reflect.TypeOf((*MockPayoutServiceClient)(nil).GetPayoutRequestByTransactionReference), varargs...)
}

// ProcessCMRBankAccountWithdrawal mocks base method.
func (m *MockPayoutServiceClient) ProcessCMRBankAccountWithdrawal(ctx context.Context, in *payout.ProcessCMRBankAccountWithdrawalRequest, opts ...grpc.CallOption) (*payout.ProcessCMRBankAccountWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessCMRBankAccountWithdrawal", varargs...)
	ret0, _ := ret[0].(*payout.ProcessCMRBankAccountWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessCMRBankAccountWithdrawal indicates an expected call of ProcessCMRBankAccountWithdrawal.
func (mr *MockPayoutServiceClientMockRecorder) ProcessCMRBankAccountWithdrawal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCMRBankAccountWithdrawal", reflect.TypeOf((*MockPayoutServiceClient)(nil).ProcessCMRBankAccountWithdrawal), varargs...)
}

// ProcessSilaTransactionUpdate mocks base method.
func (m *MockPayoutServiceClient) ProcessSilaTransactionUpdate(ctx context.Context, in *payout.ProcessSilaTransactionUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessSilaTransactionUpdate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessSilaTransactionUpdate indicates an expected call of ProcessSilaTransactionUpdate.
func (mr *MockPayoutServiceClientMockRecorder) ProcessSilaTransactionUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSilaTransactionUpdate", reflect.TypeOf((*MockPayoutServiceClient)(nil).ProcessSilaTransactionUpdate), varargs...)
}

// UpdatePayoutRequestStatus mocks base method.
func (m *MockPayoutServiceClient) UpdatePayoutRequestStatus(ctx context.Context, in *payout.UpdatePayoutRequestStatusRequest, opts ...grpc.CallOption) (*payout.UpdatePayoutRequestStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePayoutRequestStatus", varargs...)
	ret0, _ := ret[0].(*payout.UpdatePayoutRequestStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayoutRequestStatus indicates an expected call of UpdatePayoutRequestStatus.
func (mr *MockPayoutServiceClientMockRecorder) UpdatePayoutRequestStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayoutRequestStatus", reflect.TypeOf((*MockPayoutServiceClient)(nil).UpdatePayoutRequestStatus), varargs...)
}

// MockPayoutServiceServer is a mock of PayoutServiceServer interface.
type MockPayoutServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPayoutServiceServerMockRecorder
}

// MockPayoutServiceServerMockRecorder is the mock recorder for MockPayoutServiceServer.
type MockPayoutServiceServerMockRecorder struct {
	mock *MockPayoutServiceServer
}

// NewMockPayoutServiceServer creates a new mock instance.
func NewMockPayoutServiceServer(ctrl *gomock.Controller) *MockPayoutServiceServer {
	mock := &MockPayoutServiceServer{ctrl: ctrl}
	mock.recorder = &MockPayoutServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayoutServiceServer) EXPECT() *MockPayoutServiceServerMockRecorder {
	return m.recorder
}

// CreatePayoutRequest mocks base method.
func (m *MockPayoutServiceServer) CreatePayoutRequest(arg0 context.Context, arg1 *payout.CreatePayoutRequestRequest) (*payout.CreatePayoutRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayoutRequest", arg0, arg1)
	ret0, _ := ret[0].(*payout.CreatePayoutRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayoutRequest indicates an expected call of CreatePayoutRequest.
func (mr *MockPayoutServiceServerMockRecorder) CreatePayoutRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayoutRequest", reflect.TypeOf((*MockPayoutServiceServer)(nil).CreatePayoutRequest), arg0, arg1)
}

// GetPayoutRequestByTransactionReference mocks base method.
func (m *MockPayoutServiceServer) GetPayoutRequestByTransactionReference(arg0 context.Context, arg1 *payout.GetPayoutRequestByTransactionReferenceRequest) (*payout.GetPayoutRequestByTransactionReferenceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayoutRequestByTransactionReference", arg0, arg1)
	ret0, _ := ret[0].(*payout.GetPayoutRequestByTransactionReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayoutRequestByTransactionReference indicates an expected call of GetPayoutRequestByTransactionReference.
func (mr *MockPayoutServiceServerMockRecorder) GetPayoutRequestByTransactionReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayoutRequestByTransactionReference", reflect.TypeOf((*MockPayoutServiceServer)(nil).GetPayoutRequestByTransactionReference), arg0, arg1)
}

// ProcessCMRBankAccountWithdrawal mocks base method.
func (m *MockPayoutServiceServer) ProcessCMRBankAccountWithdrawal(arg0 context.Context, arg1 *payout.ProcessCMRBankAccountWithdrawalRequest) (*payout.ProcessCMRBankAccountWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessCMRBankAccountWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(*payout.ProcessCMRBankAccountWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessCMRBankAccountWithdrawal indicates an expected call of ProcessCMRBankAccountWithdrawal.
func (mr *MockPayoutServiceServerMockRecorder) ProcessCMRBankAccountWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCMRBankAccountWithdrawal", reflect.TypeOf((*MockPayoutServiceServer)(nil).ProcessCMRBankAccountWithdrawal), arg0, arg1)
}

// ProcessSilaTransactionUpdate mocks base method.
func (m *MockPayoutServiceServer) ProcessSilaTransactionUpdate(arg0 context.Context, arg1 *payout.ProcessSilaTransactionUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSilaTransactionUpdate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessSilaTransactionUpdate indicates an expected call of ProcessSilaTransactionUpdate.
func (mr *MockPayoutServiceServerMockRecorder) ProcessSilaTransactionUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSilaTransactionUpdate", reflect.TypeOf((*MockPayoutServiceServer)(nil).ProcessSilaTransactionUpdate), arg0, arg1)
}

// UpdatePayoutRequestStatus mocks base method.
func (m *MockPayoutServiceServer) UpdatePayoutRequestStatus(arg0 context.Context, arg1 *payout.UpdatePayoutRequestStatusRequest) (*payout.UpdatePayoutRequestStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayoutRequestStatus", arg0, arg1)
	ret0, _ := ret[0].(*payout.UpdatePayoutRequestStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayoutRequestStatus indicates an expected call of UpdatePayoutRequestStatus.
func (mr *MockPayoutServiceServerMockRecorder) UpdatePayoutRequestStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayoutRequestStatus", reflect.TypeOf((*MockPayoutServiceServer)(nil).UpdatePayoutRequestStatus), arg0, arg1)
}

// mustEmbedUnimplementedPayoutServiceServer mocks base method.
func (m *MockPayoutServiceServer) mustEmbedUnimplementedPayoutServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPayoutServiceServer")
}

// mustEmbedUnimplementedPayoutServiceServer indicates an expected call of mustEmbedUnimplementedPayoutServiceServer.
func (mr *MockPayoutServiceServerMockRecorder) mustEmbedUnimplementedPayoutServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPayoutServiceServer", reflect.TypeOf((*MockPayoutServiceServer)(nil).mustEmbedUnimplementedPayoutServiceServer))
}

// MockUnsafePayoutServiceServer is a mock of UnsafePayoutServiceServer interface.
type MockUnsafePayoutServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePayoutServiceServerMockRecorder
}

// MockUnsafePayoutServiceServerMockRecorder is the mock recorder for MockUnsafePayoutServiceServer.
type MockUnsafePayoutServiceServerMockRecorder struct {
	mock *MockUnsafePayoutServiceServer
}

// NewMockUnsafePayoutServiceServer creates a new mock instance.
func NewMockUnsafePayoutServiceServer(ctrl *gomock.Controller) *MockUnsafePayoutServiceServer {
	mock := &MockUnsafePayoutServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePayoutServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePayoutServiceServer) EXPECT() *MockUnsafePayoutServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPayoutServiceServer mocks base method.
func (m *MockUnsafePayoutServiceServer) mustEmbedUnimplementedPayoutServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPayoutServiceServer")
}

// mustEmbedUnimplementedPayoutServiceServer indicates an expected call of mustEmbedUnimplementedPayoutServiceServer.
func (mr *MockUnsafePayoutServiceServerMockRecorder) mustEmbedUnimplementedPayoutServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPayoutServiceServer", reflect.TypeOf((*MockUnsafePayoutServiceServer)(nil).mustEmbedUnimplementedPayoutServiceServer))
}
