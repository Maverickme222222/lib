// Code generated by MockGen. DO NOT EDIT.
// Source: ../funding_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	funding "github.com/kappapay/backend/lib/golang/src/kappa/services/funding"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockFundingServiceClient is a mock of FundingServiceClient interface.
type MockFundingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFundingServiceClientMockRecorder
}

// MockFundingServiceClientMockRecorder is the mock recorder for MockFundingServiceClient.
type MockFundingServiceClientMockRecorder struct {
	mock *MockFundingServiceClient
}

// NewMockFundingServiceClient creates a new mock instance.
func NewMockFundingServiceClient(ctrl *gomock.Controller) *MockFundingServiceClient {
	mock := &MockFundingServiceClient{ctrl: ctrl}
	mock.recorder = &MockFundingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFundingServiceClient) EXPECT() *MockFundingServiceClientMockRecorder {
	return m.recorder
}

// GetAvailableBalanceForSource mocks base method.
func (m *MockFundingServiceClient) GetAvailableBalanceForSource(ctx context.Context, in *funding.GetAvailableBalanceForSourceRequest, opts ...grpc.CallOption) (*funding.GetAvailableBalanceForSourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvailableBalanceForSource", varargs...)
	ret0, _ := ret[0].(*funding.GetAvailableBalanceForSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableBalanceForSource indicates an expected call of GetAvailableBalanceForSource.
func (mr *MockFundingServiceClientMockRecorder) GetAvailableBalanceForSource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableBalanceForSource", reflect.TypeOf((*MockFundingServiceClient)(nil).GetAvailableBalanceForSource), varargs...)
}

// GetFundingRequestByTransactionReference mocks base method.
func (m *MockFundingServiceClient) GetFundingRequestByTransactionReference(ctx context.Context, in *funding.GetFundingRequestByTransactionReferenceRequest, opts ...grpc.CallOption) (*funding.GetFundingRequestByTransactionReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFundingRequestByTransactionReference", varargs...)
	ret0, _ := ret[0].(*funding.GetFundingRequestByTransactionReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFundingRequestByTransactionReference indicates an expected call of GetFundingRequestByTransactionReference.
func (mr *MockFundingServiceClientMockRecorder) GetFundingRequestByTransactionReference(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFundingRequestByTransactionReference", reflect.TypeOf((*MockFundingServiceClient)(nil).GetFundingRequestByTransactionReference), varargs...)
}

// InitiateFunding mocks base method.
func (m *MockFundingServiceClient) InitiateFunding(ctx context.Context, in *funding.InitiateFundingRequest, opts ...grpc.CallOption) (*funding.InitiateFundingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitiateFunding", varargs...)
	ret0, _ := ret[0].(*funding.InitiateFundingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateFunding indicates an expected call of InitiateFunding.
func (mr *MockFundingServiceClientMockRecorder) InitiateFunding(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateFunding", reflect.TypeOf((*MockFundingServiceClient)(nil).InitiateFunding), varargs...)
}

// ProcessSilaTransactionUpdate mocks base method.
func (m *MockFundingServiceClient) ProcessSilaTransactionUpdate(ctx context.Context, in *funding.ProcessSilaTransactionUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessSilaTransactionUpdate", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessSilaTransactionUpdate indicates an expected call of ProcessSilaTransactionUpdate.
func (mr *MockFundingServiceClientMockRecorder) ProcessSilaTransactionUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSilaTransactionUpdate", reflect.TypeOf((*MockFundingServiceClient)(nil).ProcessSilaTransactionUpdate), varargs...)
}

// UpdateFundingRequest mocks base method.
func (m *MockFundingServiceClient) UpdateFundingRequest(ctx context.Context, in *funding.UpdateFundingRequestRequest, opts ...grpc.CallOption) (*funding.UpdateFundingRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFundingRequest", varargs...)
	ret0, _ := ret[0].(*funding.UpdateFundingRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFundingRequest indicates an expected call of UpdateFundingRequest.
func (mr *MockFundingServiceClientMockRecorder) UpdateFundingRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFundingRequest", reflect.TypeOf((*MockFundingServiceClient)(nil).UpdateFundingRequest), varargs...)
}

// MockFundingServiceServer is a mock of FundingServiceServer interface.
type MockFundingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFundingServiceServerMockRecorder
}

// MockFundingServiceServerMockRecorder is the mock recorder for MockFundingServiceServer.
type MockFundingServiceServerMockRecorder struct {
	mock *MockFundingServiceServer
}

// NewMockFundingServiceServer creates a new mock instance.
func NewMockFundingServiceServer(ctrl *gomock.Controller) *MockFundingServiceServer {
	mock := &MockFundingServiceServer{ctrl: ctrl}
	mock.recorder = &MockFundingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFundingServiceServer) EXPECT() *MockFundingServiceServerMockRecorder {
	return m.recorder
}

// GetAvailableBalanceForSource mocks base method.
func (m *MockFundingServiceServer) GetAvailableBalanceForSource(arg0 context.Context, arg1 *funding.GetAvailableBalanceForSourceRequest) (*funding.GetAvailableBalanceForSourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableBalanceForSource", arg0, arg1)
	ret0, _ := ret[0].(*funding.GetAvailableBalanceForSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableBalanceForSource indicates an expected call of GetAvailableBalanceForSource.
func (mr *MockFundingServiceServerMockRecorder) GetAvailableBalanceForSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableBalanceForSource", reflect.TypeOf((*MockFundingServiceServer)(nil).GetAvailableBalanceForSource), arg0, arg1)
}

// GetFundingRequestByTransactionReference mocks base method.
func (m *MockFundingServiceServer) GetFundingRequestByTransactionReference(arg0 context.Context, arg1 *funding.GetFundingRequestByTransactionReferenceRequest) (*funding.GetFundingRequestByTransactionReferenceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFundingRequestByTransactionReference", arg0, arg1)
	ret0, _ := ret[0].(*funding.GetFundingRequestByTransactionReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFundingRequestByTransactionReference indicates an expected call of GetFundingRequestByTransactionReference.
func (mr *MockFundingServiceServerMockRecorder) GetFundingRequestByTransactionReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFundingRequestByTransactionReference", reflect.TypeOf((*MockFundingServiceServer)(nil).GetFundingRequestByTransactionReference), arg0, arg1)
}

// InitiateFunding mocks base method.
func (m *MockFundingServiceServer) InitiateFunding(arg0 context.Context, arg1 *funding.InitiateFundingRequest) (*funding.InitiateFundingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateFunding", arg0, arg1)
	ret0, _ := ret[0].(*funding.InitiateFundingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateFunding indicates an expected call of InitiateFunding.
func (mr *MockFundingServiceServerMockRecorder) InitiateFunding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateFunding", reflect.TypeOf((*MockFundingServiceServer)(nil).InitiateFunding), arg0, arg1)
}

// ProcessSilaTransactionUpdate mocks base method.
func (m *MockFundingServiceServer) ProcessSilaTransactionUpdate(arg0 context.Context, arg1 *funding.ProcessSilaTransactionUpdateRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSilaTransactionUpdate", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessSilaTransactionUpdate indicates an expected call of ProcessSilaTransactionUpdate.
func (mr *MockFundingServiceServerMockRecorder) ProcessSilaTransactionUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSilaTransactionUpdate", reflect.TypeOf((*MockFundingServiceServer)(nil).ProcessSilaTransactionUpdate), arg0, arg1)
}

// UpdateFundingRequest mocks base method.
func (m *MockFundingServiceServer) UpdateFundingRequest(arg0 context.Context, arg1 *funding.UpdateFundingRequestRequest) (*funding.UpdateFundingRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFundingRequest", arg0, arg1)
	ret0, _ := ret[0].(*funding.UpdateFundingRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFundingRequest indicates an expected call of UpdateFundingRequest.
func (mr *MockFundingServiceServerMockRecorder) UpdateFundingRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFundingRequest", reflect.TypeOf((*MockFundingServiceServer)(nil).UpdateFundingRequest), arg0, arg1)
}

// mustEmbedUnimplementedFundingServiceServer mocks base method.
func (m *MockFundingServiceServer) mustEmbedUnimplementedFundingServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFundingServiceServer")
}

// mustEmbedUnimplementedFundingServiceServer indicates an expected call of mustEmbedUnimplementedFundingServiceServer.
func (mr *MockFundingServiceServerMockRecorder) mustEmbedUnimplementedFundingServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFundingServiceServer", reflect.TypeOf((*MockFundingServiceServer)(nil).mustEmbedUnimplementedFundingServiceServer))
}

// MockUnsafeFundingServiceServer is a mock of UnsafeFundingServiceServer interface.
type MockUnsafeFundingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFundingServiceServerMockRecorder
}

// MockUnsafeFundingServiceServerMockRecorder is the mock recorder for MockUnsafeFundingServiceServer.
type MockUnsafeFundingServiceServerMockRecorder struct {
	mock *MockUnsafeFundingServiceServer
}

// NewMockUnsafeFundingServiceServer creates a new mock instance.
func NewMockUnsafeFundingServiceServer(ctrl *gomock.Controller) *MockUnsafeFundingServiceServer {
	mock := &MockUnsafeFundingServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFundingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFundingServiceServer) EXPECT() *MockUnsafeFundingServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFundingServiceServer mocks base method.
func (m *MockUnsafeFundingServiceServer) mustEmbedUnimplementedFundingServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFundingServiceServer")
}

// mustEmbedUnimplementedFundingServiceServer indicates an expected call of mustEmbedUnimplementedFundingServiceServer.
func (mr *MockUnsafeFundingServiceServerMockRecorder) mustEmbedUnimplementedFundingServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFundingServiceServer", reflect.TypeOf((*MockUnsafeFundingServiceServer)(nil).mustEmbedUnimplementedFundingServiceServer))
}
