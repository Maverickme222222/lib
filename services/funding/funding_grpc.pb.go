// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/funding/funding.proto

package funding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FundingServiceClient is the client API for FundingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundingServiceClient interface {
	GetAvailableBalanceForSource(ctx context.Context, in *GetAvailableBalanceForSourceRequest, opts ...grpc.CallOption) (*GetAvailableBalanceForSourceResponse, error)
	ProcessSilaTransactionUpdate(ctx context.Context, in *ProcessSilaTransactionUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFundingRequestByTransactionReference(ctx context.Context, in *GetFundingRequestByTransactionReferenceRequest, opts ...grpc.CallOption) (*GetFundingRequestByTransactionReferenceResponse, error)
	UpdateFundingRequest(ctx context.Context, in *UpdateFundingRequestRequest, opts ...grpc.CallOption) (*UpdateFundingRequestResponse, error)
	InitiateFunding(ctx context.Context, in *InitiateFundingRequest, opts ...grpc.CallOption) (*InitiateFundingResponse, error)
}

type fundingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFundingServiceClient(cc grpc.ClientConnInterface) FundingServiceClient {
	return &fundingServiceClient{cc}
}

func (c *fundingServiceClient) GetAvailableBalanceForSource(ctx context.Context, in *GetAvailableBalanceForSourceRequest, opts ...grpc.CallOption) (*GetAvailableBalanceForSourceResponse, error) {
	out := new(GetAvailableBalanceForSourceResponse)
	err := c.cc.Invoke(ctx, "/funding.FundingService/GetAvailableBalanceForSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingServiceClient) ProcessSilaTransactionUpdate(ctx context.Context, in *ProcessSilaTransactionUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/funding.FundingService/ProcessSilaTransactionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingServiceClient) GetFundingRequestByTransactionReference(ctx context.Context, in *GetFundingRequestByTransactionReferenceRequest, opts ...grpc.CallOption) (*GetFundingRequestByTransactionReferenceResponse, error) {
	out := new(GetFundingRequestByTransactionReferenceResponse)
	err := c.cc.Invoke(ctx, "/funding.FundingService/GetFundingRequestByTransactionReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingServiceClient) UpdateFundingRequest(ctx context.Context, in *UpdateFundingRequestRequest, opts ...grpc.CallOption) (*UpdateFundingRequestResponse, error) {
	out := new(UpdateFundingRequestResponse)
	err := c.cc.Invoke(ctx, "/funding.FundingService/UpdateFundingRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingServiceClient) InitiateFunding(ctx context.Context, in *InitiateFundingRequest, opts ...grpc.CallOption) (*InitiateFundingResponse, error) {
	out := new(InitiateFundingResponse)
	err := c.cc.Invoke(ctx, "/funding.FundingService/InitiateFunding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundingServiceServer is the server API for FundingService service.
// All implementations must embed UnimplementedFundingServiceServer
// for forward compatibility
type FundingServiceServer interface {
	GetAvailableBalanceForSource(context.Context, *GetAvailableBalanceForSourceRequest) (*GetAvailableBalanceForSourceResponse, error)
	ProcessSilaTransactionUpdate(context.Context, *ProcessSilaTransactionUpdateRequest) (*emptypb.Empty, error)
	GetFundingRequestByTransactionReference(context.Context, *GetFundingRequestByTransactionReferenceRequest) (*GetFundingRequestByTransactionReferenceResponse, error)
	UpdateFundingRequest(context.Context, *UpdateFundingRequestRequest) (*UpdateFundingRequestResponse, error)
	InitiateFunding(context.Context, *InitiateFundingRequest) (*InitiateFundingResponse, error)
	mustEmbedUnimplementedFundingServiceServer()
}

// UnimplementedFundingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFundingServiceServer struct {
}

func (UnimplementedFundingServiceServer) GetAvailableBalanceForSource(context.Context, *GetAvailableBalanceForSourceRequest) (*GetAvailableBalanceForSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableBalanceForSource not implemented")
}
func (UnimplementedFundingServiceServer) ProcessSilaTransactionUpdate(context.Context, *ProcessSilaTransactionUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSilaTransactionUpdate not implemented")
}
func (UnimplementedFundingServiceServer) GetFundingRequestByTransactionReference(context.Context, *GetFundingRequestByTransactionReferenceRequest) (*GetFundingRequestByTransactionReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFundingRequestByTransactionReference not implemented")
}
func (UnimplementedFundingServiceServer) UpdateFundingRequest(context.Context, *UpdateFundingRequestRequest) (*UpdateFundingRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFundingRequest not implemented")
}
func (UnimplementedFundingServiceServer) InitiateFunding(context.Context, *InitiateFundingRequest) (*InitiateFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateFunding not implemented")
}
func (UnimplementedFundingServiceServer) mustEmbedUnimplementedFundingServiceServer() {}

// UnsafeFundingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundingServiceServer will
// result in compilation errors.
type UnsafeFundingServiceServer interface {
	mustEmbedUnimplementedFundingServiceServer()
}

func RegisterFundingServiceServer(s grpc.ServiceRegistrar, srv FundingServiceServer) {
	s.RegisterService(&FundingService_ServiceDesc, srv)
}

func _FundingService_GetAvailableBalanceForSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableBalanceForSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).GetAvailableBalanceForSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funding.FundingService/GetAvailableBalanceForSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).GetAvailableBalanceForSource(ctx, req.(*GetAvailableBalanceForSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundingService_ProcessSilaTransactionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessSilaTransactionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).ProcessSilaTransactionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funding.FundingService/ProcessSilaTransactionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).ProcessSilaTransactionUpdate(ctx, req.(*ProcessSilaTransactionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundingService_GetFundingRequestByTransactionReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFundingRequestByTransactionReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).GetFundingRequestByTransactionReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funding.FundingService/GetFundingRequestByTransactionReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).GetFundingRequestByTransactionReference(ctx, req.(*GetFundingRequestByTransactionReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundingService_UpdateFundingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFundingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).UpdateFundingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funding.FundingService/UpdateFundingRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).UpdateFundingRequest(ctx, req.(*UpdateFundingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundingService_InitiateFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).InitiateFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funding.FundingService/InitiateFunding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).InitiateFunding(ctx, req.(*InitiateFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FundingService_ServiceDesc is the grpc.ServiceDesc for FundingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "funding.FundingService",
	HandlerType: (*FundingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableBalanceForSource",
			Handler:    _FundingService_GetAvailableBalanceForSource_Handler,
		},
		{
			MethodName: "ProcessSilaTransactionUpdate",
			Handler:    _FundingService_ProcessSilaTransactionUpdate_Handler,
		},
		{
			MethodName: "GetFundingRequestByTransactionReference",
			Handler:    _FundingService_GetFundingRequestByTransactionReference_Handler,
		},
		{
			MethodName: "UpdateFundingRequest",
			Handler:    _FundingService_UpdateFundingRequest_Handler,
		},
		{
			MethodName: "InitiateFunding",
			Handler:    _FundingService_InitiateFunding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/funding/funding.proto",
}
