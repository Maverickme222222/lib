// Code generated by MockGen. DO NOT EDIT.
// Source: ../emails_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	emails "github.com/kappapay/backend/lib/golang/src/kappa/services/emails"
	grpc "google.golang.org/grpc"
)

// MockEmailServiceClient is a mock of EmailServiceClient interface.
type MockEmailServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceClientMockRecorder
}

// MockEmailServiceClientMockRecorder is the mock recorder for MockEmailServiceClient.
type MockEmailServiceClientMockRecorder struct {
	mock *MockEmailServiceClient
}

// NewMockEmailServiceClient creates a new mock instance.
func NewMockEmailServiceClient(ctrl *gomock.Controller) *MockEmailServiceClient {
	mock := &MockEmailServiceClient{ctrl: ctrl}
	mock.recorder = &MockEmailServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceClient) EXPECT() *MockEmailServiceClientMockRecorder {
	return m.recorder
}

// CreateEmailAddress mocks base method.
func (m *MockEmailServiceClient) CreateEmailAddress(ctx context.Context, in *emails.CreateEmailAddressRequest, opts ...grpc.CallOption) (*emails.CreateEmailAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmailAddress", varargs...)
	ret0, _ := ret[0].(*emails.CreateEmailAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailAddress indicates an expected call of CreateEmailAddress.
func (mr *MockEmailServiceClientMockRecorder) CreateEmailAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailAddress", reflect.TypeOf((*MockEmailServiceClient)(nil).CreateEmailAddress), varargs...)
}

// DeleteEmailAddress mocks base method.
func (m *MockEmailServiceClient) DeleteEmailAddress(ctx context.Context, in *emails.DeleteEmailAddressRequest, opts ...grpc.CallOption) (*emails.DeleteEmailAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailAddress", varargs...)
	ret0, _ := ret[0].(*emails.DeleteEmailAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailAddress indicates an expected call of DeleteEmailAddress.
func (mr *MockEmailServiceClientMockRecorder) DeleteEmailAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailAddress", reflect.TypeOf((*MockEmailServiceClient)(nil).DeleteEmailAddress), varargs...)
}

// DeleteEmailAddressByID mocks base method.
func (m *MockEmailServiceClient) DeleteEmailAddressByID(ctx context.Context, in *emails.DeleteEmailAddressByIDRequest, opts ...grpc.CallOption) (*emails.DeleteEmailAddressByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailAddressByID", varargs...)
	ret0, _ := ret[0].(*emails.DeleteEmailAddressByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailAddressByID indicates an expected call of DeleteEmailAddressByID.
func (mr *MockEmailServiceClientMockRecorder) DeleteEmailAddressByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailAddressByID", reflect.TypeOf((*MockEmailServiceClient)(nil).DeleteEmailAddressByID), varargs...)
}

// GetEmailAddress mocks base method.
func (m *MockEmailServiceClient) GetEmailAddress(ctx context.Context, in *emails.GetEmailRequest, opts ...grpc.CallOption) (*emails.GetEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailAddress", varargs...)
	ret0, _ := ret[0].(*emails.GetEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailAddress indicates an expected call of GetEmailAddress.
func (mr *MockEmailServiceClientMockRecorder) GetEmailAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailAddress", reflect.TypeOf((*MockEmailServiceClient)(nil).GetEmailAddress), varargs...)
}

// GetEmailAddressByID mocks base method.
func (m *MockEmailServiceClient) GetEmailAddressByID(ctx context.Context, in *emails.GetEmailByIDRequest, opts ...grpc.CallOption) (*emails.GetEmailByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailAddressByID", varargs...)
	ret0, _ := ret[0].(*emails.GetEmailByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailAddressByID indicates an expected call of GetEmailAddressByID.
func (mr *MockEmailServiceClientMockRecorder) GetEmailAddressByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailAddressByID", reflect.TypeOf((*MockEmailServiceClient)(nil).GetEmailAddressByID), varargs...)
}

// GetOrCreateEmailAddress mocks base method.
func (m *MockEmailServiceClient) GetOrCreateEmailAddress(ctx context.Context, in *emails.GetEmailRequest, opts ...grpc.CallOption) (*emails.GetEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrCreateEmailAddress", varargs...)
	ret0, _ := ret[0].(*emails.GetEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateEmailAddress indicates an expected call of GetOrCreateEmailAddress.
func (mr *MockEmailServiceClientMockRecorder) GetOrCreateEmailAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateEmailAddress", reflect.TypeOf((*MockEmailServiceClient)(nil).GetOrCreateEmailAddress), varargs...)
}

// MarkEmailVerified mocks base method.
func (m *MockEmailServiceClient) MarkEmailVerified(ctx context.Context, in *emails.MarkEmailVerifiedRequest, opts ...grpc.CallOption) (*emails.MarkEmailVerifiedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkEmailVerified", varargs...)
	ret0, _ := ret[0].(*emails.MarkEmailVerifiedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkEmailVerified indicates an expected call of MarkEmailVerified.
func (mr *MockEmailServiceClientMockRecorder) MarkEmailVerified(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkEmailVerified", reflect.TypeOf((*MockEmailServiceClient)(nil).MarkEmailVerified), varargs...)
}

// UpdateEmailAddress mocks base method.
func (m *MockEmailServiceClient) UpdateEmailAddress(ctx context.Context, in *emails.UpdateEmailAddressRequest, opts ...grpc.CallOption) (*emails.UpdateEmailAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEmailAddress", varargs...)
	ret0, _ := ret[0].(*emails.UpdateEmailAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailAddress indicates an expected call of UpdateEmailAddress.
func (mr *MockEmailServiceClientMockRecorder) UpdateEmailAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailAddress", reflect.TypeOf((*MockEmailServiceClient)(nil).UpdateEmailAddress), varargs...)
}

// MockEmailServiceServer is a mock of EmailServiceServer interface.
type MockEmailServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceServerMockRecorder
}

// MockEmailServiceServerMockRecorder is the mock recorder for MockEmailServiceServer.
type MockEmailServiceServerMockRecorder struct {
	mock *MockEmailServiceServer
}

// NewMockEmailServiceServer creates a new mock instance.
func NewMockEmailServiceServer(ctrl *gomock.Controller) *MockEmailServiceServer {
	mock := &MockEmailServiceServer{ctrl: ctrl}
	mock.recorder = &MockEmailServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceServer) EXPECT() *MockEmailServiceServerMockRecorder {
	return m.recorder
}

// CreateEmailAddress mocks base method.
func (m *MockEmailServiceServer) CreateEmailAddress(arg0 context.Context, arg1 *emails.CreateEmailAddressRequest) (*emails.CreateEmailAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailAddress", arg0, arg1)
	ret0, _ := ret[0].(*emails.CreateEmailAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailAddress indicates an expected call of CreateEmailAddress.
func (mr *MockEmailServiceServerMockRecorder) CreateEmailAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailAddress", reflect.TypeOf((*MockEmailServiceServer)(nil).CreateEmailAddress), arg0, arg1)
}

// DeleteEmailAddress mocks base method.
func (m *MockEmailServiceServer) DeleteEmailAddress(arg0 context.Context, arg1 *emails.DeleteEmailAddressRequest) (*emails.DeleteEmailAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailAddress", arg0, arg1)
	ret0, _ := ret[0].(*emails.DeleteEmailAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailAddress indicates an expected call of DeleteEmailAddress.
func (mr *MockEmailServiceServerMockRecorder) DeleteEmailAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailAddress", reflect.TypeOf((*MockEmailServiceServer)(nil).DeleteEmailAddress), arg0, arg1)
}

// DeleteEmailAddressByID mocks base method.
func (m *MockEmailServiceServer) DeleteEmailAddressByID(arg0 context.Context, arg1 *emails.DeleteEmailAddressByIDRequest) (*emails.DeleteEmailAddressByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailAddressByID", arg0, arg1)
	ret0, _ := ret[0].(*emails.DeleteEmailAddressByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailAddressByID indicates an expected call of DeleteEmailAddressByID.
func (mr *MockEmailServiceServerMockRecorder) DeleteEmailAddressByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailAddressByID", reflect.TypeOf((*MockEmailServiceServer)(nil).DeleteEmailAddressByID), arg0, arg1)
}

// GetEmailAddress mocks base method.
func (m *MockEmailServiceServer) GetEmailAddress(arg0 context.Context, arg1 *emails.GetEmailRequest) (*emails.GetEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailAddress", arg0, arg1)
	ret0, _ := ret[0].(*emails.GetEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailAddress indicates an expected call of GetEmailAddress.
func (mr *MockEmailServiceServerMockRecorder) GetEmailAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailAddress", reflect.TypeOf((*MockEmailServiceServer)(nil).GetEmailAddress), arg0, arg1)
}

// GetEmailAddressByID mocks base method.
func (m *MockEmailServiceServer) GetEmailAddressByID(arg0 context.Context, arg1 *emails.GetEmailByIDRequest) (*emails.GetEmailByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailAddressByID", arg0, arg1)
	ret0, _ := ret[0].(*emails.GetEmailByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailAddressByID indicates an expected call of GetEmailAddressByID.
func (mr *MockEmailServiceServerMockRecorder) GetEmailAddressByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailAddressByID", reflect.TypeOf((*MockEmailServiceServer)(nil).GetEmailAddressByID), arg0, arg1)
}

// GetOrCreateEmailAddress mocks base method.
func (m *MockEmailServiceServer) GetOrCreateEmailAddress(arg0 context.Context, arg1 *emails.GetEmailRequest) (*emails.GetEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateEmailAddress", arg0, arg1)
	ret0, _ := ret[0].(*emails.GetEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateEmailAddress indicates an expected call of GetOrCreateEmailAddress.
func (mr *MockEmailServiceServerMockRecorder) GetOrCreateEmailAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateEmailAddress", reflect.TypeOf((*MockEmailServiceServer)(nil).GetOrCreateEmailAddress), arg0, arg1)
}

// MarkEmailVerified mocks base method.
func (m *MockEmailServiceServer) MarkEmailVerified(arg0 context.Context, arg1 *emails.MarkEmailVerifiedRequest) (*emails.MarkEmailVerifiedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkEmailVerified", arg0, arg1)
	ret0, _ := ret[0].(*emails.MarkEmailVerifiedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkEmailVerified indicates an expected call of MarkEmailVerified.
func (mr *MockEmailServiceServerMockRecorder) MarkEmailVerified(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkEmailVerified", reflect.TypeOf((*MockEmailServiceServer)(nil).MarkEmailVerified), arg0, arg1)
}

// UpdateEmailAddress mocks base method.
func (m *MockEmailServiceServer) UpdateEmailAddress(arg0 context.Context, arg1 *emails.UpdateEmailAddressRequest) (*emails.UpdateEmailAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailAddress", arg0, arg1)
	ret0, _ := ret[0].(*emails.UpdateEmailAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailAddress indicates an expected call of UpdateEmailAddress.
func (mr *MockEmailServiceServerMockRecorder) UpdateEmailAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailAddress", reflect.TypeOf((*MockEmailServiceServer)(nil).UpdateEmailAddress), arg0, arg1)
}

// mustEmbedUnimplementedEmailServiceServer mocks base method.
func (m *MockEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailServiceServer")
}

// mustEmbedUnimplementedEmailServiceServer indicates an expected call of mustEmbedUnimplementedEmailServiceServer.
func (mr *MockEmailServiceServerMockRecorder) mustEmbedUnimplementedEmailServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailServiceServer", reflect.TypeOf((*MockEmailServiceServer)(nil).mustEmbedUnimplementedEmailServiceServer))
}

// MockUnsafeEmailServiceServer is a mock of UnsafeEmailServiceServer interface.
type MockUnsafeEmailServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEmailServiceServerMockRecorder
}

// MockUnsafeEmailServiceServerMockRecorder is the mock recorder for MockUnsafeEmailServiceServer.
type MockUnsafeEmailServiceServerMockRecorder struct {
	mock *MockUnsafeEmailServiceServer
}

// NewMockUnsafeEmailServiceServer creates a new mock instance.
func NewMockUnsafeEmailServiceServer(ctrl *gomock.Controller) *MockUnsafeEmailServiceServer {
	mock := &MockUnsafeEmailServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEmailServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEmailServiceServer) EXPECT() *MockUnsafeEmailServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEmailServiceServer mocks base method.
func (m *MockUnsafeEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailServiceServer")
}

// mustEmbedUnimplementedEmailServiceServer indicates an expected call of mustEmbedUnimplementedEmailServiceServer.
func (mr *MockUnsafeEmailServiceServerMockRecorder) mustEmbedUnimplementedEmailServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailServiceServer", reflect.TypeOf((*MockUnsafeEmailServiceServer)(nil).mustEmbedUnimplementedEmailServiceServer))
}
