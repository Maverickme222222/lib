// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kappa/services/emails/emails.proto

package emails

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailServiceClient interface {
	CreateEmailAddress(ctx context.Context, in *CreateEmailAddressRequest, opts ...grpc.CallOption) (*CreateEmailAddressResponse, error)
	GetEmailAddress(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error)
	GetEmailAddressByID(ctx context.Context, in *GetEmailByIDRequest, opts ...grpc.CallOption) (*GetEmailByIDResponse, error)
	UpdateEmailAddress(ctx context.Context, in *UpdateEmailAddressRequest, opts ...grpc.CallOption) (*UpdateEmailAddressResponse, error)
	DeleteEmailAddress(ctx context.Context, in *DeleteEmailAddressRequest, opts ...grpc.CallOption) (*DeleteEmailAddressResponse, error)
	DeleteEmailAddressByID(ctx context.Context, in *DeleteEmailAddressByIDRequest, opts ...grpc.CallOption) (*DeleteEmailAddressByIDResponse, error)
	GetOrCreateEmailAddress(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error)
	MarkEmailVerified(ctx context.Context, in *MarkEmailVerifiedRequest, opts ...grpc.CallOption) (*MarkEmailVerifiedResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) CreateEmailAddress(ctx context.Context, in *CreateEmailAddressRequest, opts ...grpc.CallOption) (*CreateEmailAddressResponse, error) {
	out := new(CreateEmailAddressResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailService/CreateEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailAddress(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error) {
	out := new(GetEmailResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailService/GetEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailAddressByID(ctx context.Context, in *GetEmailByIDRequest, opts ...grpc.CallOption) (*GetEmailByIDResponse, error) {
	out := new(GetEmailByIDResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailService/GetEmailAddressByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) UpdateEmailAddress(ctx context.Context, in *UpdateEmailAddressRequest, opts ...grpc.CallOption) (*UpdateEmailAddressResponse, error) {
	out := new(UpdateEmailAddressResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailService/UpdateEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) DeleteEmailAddress(ctx context.Context, in *DeleteEmailAddressRequest, opts ...grpc.CallOption) (*DeleteEmailAddressResponse, error) {
	out := new(DeleteEmailAddressResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailService/DeleteEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) DeleteEmailAddressByID(ctx context.Context, in *DeleteEmailAddressByIDRequest, opts ...grpc.CallOption) (*DeleteEmailAddressByIDResponse, error) {
	out := new(DeleteEmailAddressByIDResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailService/DeleteEmailAddressByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetOrCreateEmailAddress(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error) {
	out := new(GetEmailResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailService/GetOrCreateEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) MarkEmailVerified(ctx context.Context, in *MarkEmailVerifiedRequest, opts ...grpc.CallOption) (*MarkEmailVerifiedResponse, error) {
	out := new(MarkEmailVerifiedResponse)
	err := c.cc.Invoke(ctx, "/emails.EmailService/MarkEmailVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility
type EmailServiceServer interface {
	CreateEmailAddress(context.Context, *CreateEmailAddressRequest) (*CreateEmailAddressResponse, error)
	GetEmailAddress(context.Context, *GetEmailRequest) (*GetEmailResponse, error)
	GetEmailAddressByID(context.Context, *GetEmailByIDRequest) (*GetEmailByIDResponse, error)
	UpdateEmailAddress(context.Context, *UpdateEmailAddressRequest) (*UpdateEmailAddressResponse, error)
	DeleteEmailAddress(context.Context, *DeleteEmailAddressRequest) (*DeleteEmailAddressResponse, error)
	DeleteEmailAddressByID(context.Context, *DeleteEmailAddressByIDRequest) (*DeleteEmailAddressByIDResponse, error)
	GetOrCreateEmailAddress(context.Context, *GetEmailRequest) (*GetEmailResponse, error)
	MarkEmailVerified(context.Context, *MarkEmailVerifiedRequest) (*MarkEmailVerifiedResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailServiceServer struct {
}

func (UnimplementedEmailServiceServer) CreateEmailAddress(context.Context, *CreateEmailAddressRequest) (*CreateEmailAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailAddress not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailAddress(context.Context, *GetEmailRequest) (*GetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailAddress not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailAddressByID(context.Context, *GetEmailByIDRequest) (*GetEmailByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailAddressByID not implemented")
}
func (UnimplementedEmailServiceServer) UpdateEmailAddress(context.Context, *UpdateEmailAddressRequest) (*UpdateEmailAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailAddress not implemented")
}
func (UnimplementedEmailServiceServer) DeleteEmailAddress(context.Context, *DeleteEmailAddressRequest) (*DeleteEmailAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailAddress not implemented")
}
func (UnimplementedEmailServiceServer) DeleteEmailAddressByID(context.Context, *DeleteEmailAddressByIDRequest) (*DeleteEmailAddressByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailAddressByID not implemented")
}
func (UnimplementedEmailServiceServer) GetOrCreateEmailAddress(context.Context, *GetEmailRequest) (*GetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateEmailAddress not implemented")
}
func (UnimplementedEmailServiceServer) MarkEmailVerified(context.Context, *MarkEmailVerifiedRequest) (*MarkEmailVerifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkEmailVerified not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_CreateEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).CreateEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailService/CreateEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).CreateEmailAddress(ctx, req.(*CreateEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailService/GetEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailAddress(ctx, req.(*GetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailAddressByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailAddressByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailService/GetEmailAddressByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailAddressByID(ctx, req.(*GetEmailByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_UpdateEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).UpdateEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailService/UpdateEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).UpdateEmailAddress(ctx, req.(*UpdateEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_DeleteEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).DeleteEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailService/DeleteEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).DeleteEmailAddress(ctx, req.(*DeleteEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_DeleteEmailAddressByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailAddressByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).DeleteEmailAddressByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailService/DeleteEmailAddressByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).DeleteEmailAddressByID(ctx, req.(*DeleteEmailAddressByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetOrCreateEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetOrCreateEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailService/GetOrCreateEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetOrCreateEmailAddress(ctx, req.(*GetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_MarkEmailVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkEmailVerifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).MarkEmailVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emails.EmailService/MarkEmailVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).MarkEmailVerified(ctx, req.(*MarkEmailVerifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emails.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmailAddress",
			Handler:    _EmailService_CreateEmailAddress_Handler,
		},
		{
			MethodName: "GetEmailAddress",
			Handler:    _EmailService_GetEmailAddress_Handler,
		},
		{
			MethodName: "GetEmailAddressByID",
			Handler:    _EmailService_GetEmailAddressByID_Handler,
		},
		{
			MethodName: "UpdateEmailAddress",
			Handler:    _EmailService_UpdateEmailAddress_Handler,
		},
		{
			MethodName: "DeleteEmailAddress",
			Handler:    _EmailService_DeleteEmailAddress_Handler,
		},
		{
			MethodName: "DeleteEmailAddressByID",
			Handler:    _EmailService_DeleteEmailAddressByID_Handler,
		},
		{
			MethodName: "GetOrCreateEmailAddress",
			Handler:    _EmailService_GetOrCreateEmailAddress_Handler,
		},
		{
			MethodName: "MarkEmailVerified",
			Handler:    _EmailService_MarkEmailVerified_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kappa/services/emails/emails.proto",
}
