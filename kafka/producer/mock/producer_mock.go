// Code generated by MockGen. DO NOT EDIT.
// Source: producer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKappaProducerI is a mock of KappaProducerI interface.
type MockKappaProducerI struct {
	ctrl     *gomock.Controller
	recorder *MockKappaProducerIMockRecorder
}

// MockKappaProducerIMockRecorder is the mock recorder for MockKappaProducerI.
type MockKappaProducerIMockRecorder struct {
	mock *MockKappaProducerI
}

// NewMockKappaProducerI creates a new mock instance.
func NewMockKappaProducerI(ctrl *gomock.Controller) *MockKappaProducerI {
	mock := &MockKappaProducerI{ctrl: ctrl}
	mock.recorder = &MockKappaProducerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKappaProducerI) EXPECT() *MockKappaProducerIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKappaProducerI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKappaProducerIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKappaProducerI)(nil).Close))
}

// Send mocks base method.
func (m *MockKappaProducerI) Send(ctx context.Context, key []byte, payload interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, key, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockKappaProducerIMockRecorder) Send(ctx, key, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockKappaProducerI)(nil).Send), ctx, key, payload)
}

// SendToTopic mocks base method.
func (m *MockKappaProducerI) SendToTopic(ctx context.Context, topic string, key []byte, payload interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToTopic", ctx, topic, key, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToTopic indicates an expected call of SendToTopic.
func (mr *MockKappaProducerIMockRecorder) SendToTopic(ctx, topic, key, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToTopic", reflect.TypeOf((*MockKappaProducerI)(nil).SendToTopic), ctx, topic, key, payload)
}
