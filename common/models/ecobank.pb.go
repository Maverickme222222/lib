// ------------------------------------------------------------------------------
// <copyright company="Kappa Pay Inc.">
// Copyright (C) Kappa Pay Inc.  All rights reserved.
// Unauthorised copying of this file, via any medium, is strictly prohibited.
// Proprietary and confidential
// </copyright>
// <author>Pankaj Pant</author>
// ------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: kappa/common/models/ecobank.proto

package models

import (
	types "github.com/kappapay/backend/lib/golang/src/kappa/common/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EcobankVUDepositStatus int32

const (
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_UNSPECIFIED EcobankVUDepositStatus = 0
	// Deposit has been requested
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_REQUESTED EcobankVUDepositStatus = 1
	// Deposit request has been acknowledged by Ecobank operations
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_ACKNOWLEDGED EcobankVUDepositStatus = 2
	// Deposit request has been approved by Ecobank risk
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_APPROVED EcobankVUDepositStatus = 3
	// Deposit request has been rejected by Ecobank risk. Terminal state
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_REJECTED EcobankVUDepositStatus = 4
	// Deposit has been funded, Ecobank has credited General FBO account
	// and debited Operating account
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_FUNDED EcobankVUDepositStatus = 5
	// Maker has initiated the creation of VUs
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_MADE EcobankVUDepositStatus = 6
	// Checker has confirmed the creation of VUs
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_CHECKED EcobankVUDepositStatus = 7
	// VUs have been successfully created. Terminal state
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_COMPLETED EcobankVUDepositStatus = 8
	// Deposit has been cancelled. It may need to be rolled back
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_CANCELLED EcobankVUDepositStatus = 9
	// The deposit is being rolled back
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_ROLLBACK EcobankVUDepositStatus = 10
	// The deposit has failed. Terminal state
	EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_FAILED EcobankVUDepositStatus = 11
)

// Enum value maps for EcobankVUDepositStatus.
var (
	EcobankVUDepositStatus_name = map[int32]string{
		0:  "ECOBANK_VU_DEPOSIT_STATUS_UNSPECIFIED",
		1:  "ECOBANK_VU_DEPOSIT_STATUS_REQUESTED",
		2:  "ECOBANK_VU_DEPOSIT_STATUS_ACKNOWLEDGED",
		3:  "ECOBANK_VU_DEPOSIT_STATUS_APPROVED",
		4:  "ECOBANK_VU_DEPOSIT_STATUS_REJECTED",
		5:  "ECOBANK_VU_DEPOSIT_STATUS_FUNDED",
		6:  "ECOBANK_VU_DEPOSIT_STATUS_MADE",
		7:  "ECOBANK_VU_DEPOSIT_STATUS_CHECKED",
		8:  "ECOBANK_VU_DEPOSIT_STATUS_COMPLETED",
		9:  "ECOBANK_VU_DEPOSIT_STATUS_CANCELLED",
		10: "ECOBANK_VU_DEPOSIT_STATUS_ROLLBACK",
		11: "ECOBANK_VU_DEPOSIT_STATUS_FAILED",
	}
	EcobankVUDepositStatus_value = map[string]int32{
		"ECOBANK_VU_DEPOSIT_STATUS_UNSPECIFIED":  0,
		"ECOBANK_VU_DEPOSIT_STATUS_REQUESTED":    1,
		"ECOBANK_VU_DEPOSIT_STATUS_ACKNOWLEDGED": 2,
		"ECOBANK_VU_DEPOSIT_STATUS_APPROVED":     3,
		"ECOBANK_VU_DEPOSIT_STATUS_REJECTED":     4,
		"ECOBANK_VU_DEPOSIT_STATUS_FUNDED":       5,
		"ECOBANK_VU_DEPOSIT_STATUS_MADE":         6,
		"ECOBANK_VU_DEPOSIT_STATUS_CHECKED":      7,
		"ECOBANK_VU_DEPOSIT_STATUS_COMPLETED":    8,
		"ECOBANK_VU_DEPOSIT_STATUS_CANCELLED":    9,
		"ECOBANK_VU_DEPOSIT_STATUS_ROLLBACK":     10,
		"ECOBANK_VU_DEPOSIT_STATUS_FAILED":       11,
	}
)

func (x EcobankVUDepositStatus) Enum() *EcobankVUDepositStatus {
	p := new(EcobankVUDepositStatus)
	*p = x
	return p
}

func (x EcobankVUDepositStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcobankVUDepositStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_ecobank_proto_enumTypes[0].Descriptor()
}

func (EcobankVUDepositStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_ecobank_proto_enumTypes[0]
}

func (x EcobankVUDepositStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcobankVUDepositStatus.Descriptor instead.
func (EcobankVUDepositStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_ecobank_proto_rawDescGZIP(), []int{0}
}

type EcobankVUWithdrawalStatus int32

const (
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_UNSPECIFIED EcobankVUWithdrawalStatus = 0
	// Withdrawal has been requested
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_REQUESTED EcobankVUWithdrawalStatus = 1
	// Withdrawal request has been acknowledged by Ecobank operations
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_ACKNOWLEDGED EcobankVUWithdrawalStatus = 2
	// Withdrawal request has been approved by Ecobank risk
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_APPROVED EcobankVUWithdrawalStatus = 3
	// Withdrawal request has been rejected by Ecobank risk. Terminal state
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_REJECTED EcobankVUWithdrawalStatus = 4
	// Maker has initiated the destruction of VUs
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_MADE EcobankVUWithdrawalStatus = 5
	// Checker has confirmed the destruction of VUs
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_CHECKED EcobankVUWithdrawalStatus = 6
	// Withdrawal has been funded. KPC has updated its ledger
	// to release the funds in the VU FBO account
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_FUNDED EcobankVUWithdrawalStatus = 7
	// VUs have been successfully destroyed. Ecobank has credited KPC's Operating
	// account and debited its General FBO Account. Terminal state.
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_COMPLETED EcobankVUWithdrawalStatus = 8
	// Withdrawal has been cancelled. It may need to be rolled back
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_CANCELLED EcobankVUWithdrawalStatus = 9
	// The withdrawal is being rolled back
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_ROLLBACK EcobankVUWithdrawalStatus = 10
	// The withdrawal has failed. Terminal state
	EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_FAILED EcobankVUWithdrawalStatus = 11
)

// Enum value maps for EcobankVUWithdrawalStatus.
var (
	EcobankVUWithdrawalStatus_name = map[int32]string{
		0:  "ECOBANK_VU_WITHDRAWAL_STATUS_UNSPECIFIED",
		1:  "ECOBANK_VU_WITHDRAWAL_STATUS_REQUESTED",
		2:  "ECOBANK_VU_WITHDRAWAL_STATUS_ACKNOWLEDGED",
		3:  "ECOBANK_VU_WITHDRAWAL_STATUS_APPROVED",
		4:  "ECOBANK_VU_WITHDRAWAL_STATUS_REJECTED",
		5:  "ECOBANK_VU_WITHDRAWAL_STATUS_MADE",
		6:  "ECOBANK_VU_WITHDRAWAL_STATUS_CHECKED",
		7:  "ECOBANK_VU_WITHDRAWAL_STATUS_FUNDED",
		8:  "ECOBANK_VU_WITHDRAWAL_STATUS_COMPLETED",
		9:  "ECOBANK_VU_WITHDRAWAL_STATUS_CANCELLED",
		10: "ECOBANK_VU_WITHDRAWAL_STATUS_ROLLBACK",
		11: "ECOBANK_VU_WITHDRAWAL_STATUS_FAILED",
	}
	EcobankVUWithdrawalStatus_value = map[string]int32{
		"ECOBANK_VU_WITHDRAWAL_STATUS_UNSPECIFIED":  0,
		"ECOBANK_VU_WITHDRAWAL_STATUS_REQUESTED":    1,
		"ECOBANK_VU_WITHDRAWAL_STATUS_ACKNOWLEDGED": 2,
		"ECOBANK_VU_WITHDRAWAL_STATUS_APPROVED":     3,
		"ECOBANK_VU_WITHDRAWAL_STATUS_REJECTED":     4,
		"ECOBANK_VU_WITHDRAWAL_STATUS_MADE":         5,
		"ECOBANK_VU_WITHDRAWAL_STATUS_CHECKED":      6,
		"ECOBANK_VU_WITHDRAWAL_STATUS_FUNDED":       7,
		"ECOBANK_VU_WITHDRAWAL_STATUS_COMPLETED":    8,
		"ECOBANK_VU_WITHDRAWAL_STATUS_CANCELLED":    9,
		"ECOBANK_VU_WITHDRAWAL_STATUS_ROLLBACK":     10,
		"ECOBANK_VU_WITHDRAWAL_STATUS_FAILED":       11,
	}
)

func (x EcobankVUWithdrawalStatus) Enum() *EcobankVUWithdrawalStatus {
	p := new(EcobankVUWithdrawalStatus)
	*p = x
	return p
}

func (x EcobankVUWithdrawalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcobankVUWithdrawalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_ecobank_proto_enumTypes[1].Descriptor()
}

func (EcobankVUWithdrawalStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_ecobank_proto_enumTypes[1]
}

func (x EcobankVUWithdrawalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcobankVUWithdrawalStatus.Descriptor instead.
func (EcobankVUWithdrawalStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_ecobank_proto_rawDescGZIP(), []int{1}
}

type EcobankAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number           string                 `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Currency         *Currency              `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`                       //The currency of the account that has been provisioned : ecobank mapping field: ccy (e.g. GHS)
	BranchCode       string                 `protobuf:"bytes,5,opt,name=branch_code,json=branchCode,proto3" json:"branch_code,omitempty"` //Branch Code assigned to the account that has been created : H01
	CustomerId       string                 `protobuf:"bytes,6,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"` // Alpha-numeric string equal to 10 letters (e.g. 4105921AB)
	AvailableBalance *types.Decimal         `protobuf:"bytes,7,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	CurrentBalance   *types.Decimal         `protobuf:"bytes,8,opt,name=current_balance,json=currentBalance,proto3" json:"current_balance,omitempty"`
	OdLimit          *types.Decimal         `protobuf:"bytes,9,opt,name=od_limit,json=odLimit,proto3" json:"od_limit,omitempty"`                    // This represents the overdraft limit amount for the account (e.g. 200.00)
	AccountType      string                 `protobuf:"bytes,10,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`       // This is the account type under which the customer account has been maintained (e.g. S)
	AccountClass     string                 `protobuf:"bytes,11,opt,name=account_class,json=accountClass,proto3" json:"account_class,omitempty"`    // This is the account class under which the customer account has been maintained (e.g. GHSTAF)
	AccountStatus    string                 `protobuf:"bytes,12,opt,name=account_status,json=accountStatus,proto3" json:"account_status,omitempty"` // This is check is the if the account is valid and active : (e.g. ACTIVE)
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *EcobankAccount) Reset() {
	*x = EcobankAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_ecobank_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcobankAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcobankAccount) ProtoMessage() {}

func (x *EcobankAccount) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_ecobank_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcobankAccount.ProtoReflect.Descriptor instead.
func (*EcobankAccount) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_ecobank_proto_rawDescGZIP(), []int{0}
}

func (x *EcobankAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EcobankAccount) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *EcobankAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EcobankAccount) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *EcobankAccount) GetBranchCode() string {
	if x != nil {
		return x.BranchCode
	}
	return ""
}

func (x *EcobankAccount) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *EcobankAccount) GetAvailableBalance() *types.Decimal {
	if x != nil {
		return x.AvailableBalance
	}
	return nil
}

func (x *EcobankAccount) GetCurrentBalance() *types.Decimal {
	if x != nil {
		return x.CurrentBalance
	}
	return nil
}

func (x *EcobankAccount) GetOdLimit() *types.Decimal {
	if x != nil {
		return x.OdLimit
	}
	return nil
}

func (x *EcobankAccount) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *EcobankAccount) GetAccountClass() string {
	if x != nil {
		return x.AccountClass
	}
	return ""
}

func (x *EcobankAccount) GetAccountStatus() string {
	if x != nil {
		return x.AccountStatus
	}
	return ""
}

func (x *EcobankAccount) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EcobankAccount) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *EcobankAccount) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// EcobankEmailEvent is the event data from lambda email listener
type EcobankEmailEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject                  string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Name                     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Account                  string   `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	TransactionType          string   `protobuf:"bytes,4,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Amount                   string   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency                 string   `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	TransactionDate          string   `protobuf:"bytes,7,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	ReferenceNumber          string   `protobuf:"bytes,8,opt,name=reference_number,json=referenceNumber,proto3" json:"reference_number,omitempty"`
	LedgerBalanceCurrency    string   `protobuf:"bytes,9,opt,name=ledger_balance_currency,json=ledgerBalanceCurrency,proto3" json:"ledger_balance_currency,omitempty"`
	LedgerBalance            string   `protobuf:"bytes,10,opt,name=ledger_balance,json=ledgerBalance,proto3" json:"ledger_balance,omitempty"`
	AvailableBalanceCurrency string   `protobuf:"bytes,11,opt,name=available_balance_currency,json=availableBalanceCurrency,proto3" json:"available_balance_currency,omitempty"`
	AvailableBalance         string   `protobuf:"bytes,12,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	Errors                   []string `protobuf:"bytes,13,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *EcobankEmailEvent) Reset() {
	*x = EcobankEmailEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_ecobank_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcobankEmailEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcobankEmailEvent) ProtoMessage() {}

func (x *EcobankEmailEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_ecobank_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcobankEmailEvent.ProtoReflect.Descriptor instead.
func (*EcobankEmailEvent) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_ecobank_proto_rawDescGZIP(), []int{1}
}

func (x *EcobankEmailEvent) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EcobankEmailEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EcobankEmailEvent) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *EcobankEmailEvent) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *EcobankEmailEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *EcobankEmailEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EcobankEmailEvent) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *EcobankEmailEvent) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *EcobankEmailEvent) GetLedgerBalanceCurrency() string {
	if x != nil {
		return x.LedgerBalanceCurrency
	}
	return ""
}

func (x *EcobankEmailEvent) GetLedgerBalance() string {
	if x != nil {
		return x.LedgerBalance
	}
	return ""
}

func (x *EcobankEmailEvent) GetAvailableBalanceCurrency() string {
	if x != nil {
		return x.AvailableBalanceCurrency
	}
	return ""
}

func (x *EcobankEmailEvent) GetAvailableBalance() string {
	if x != nil {
		return x.AvailableBalance
	}
	return ""
}

func (x *EcobankEmailEvent) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type EcobankVUDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequesterId string                 `protobuf:"bytes,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"` // ID of the operations user that has requested the deposit
	ApproverId  string                 `protobuf:"bytes,3,opt,name=approver_id,json=approverId,proto3" json:"approver_id,omitempty"`    // ID of the Ecobank operations user that approved the request
	MakerId     string                 `protobuf:"bytes,4,opt,name=maker_id,json=makerId,proto3" json:"maker_id,omitempty"`             // ID of the Ecobank operations user that marked the request as made
	CheckerId   string                 `protobuf:"bytes,5,opt,name=checker_id,json=checkerId,proto3" json:"checker_id,omitempty"`       // ID of the Ecobank operations user that marked the request as checked
	Reference   string                 `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`                        // unique human-readable reference number for the deposit
	Amount      *Amount                `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Status      EcobankVUDepositStatus `protobuf:"varint,8,opt,name=status,proto3,enum=kappa.EcobankVUDepositStatus" json:"status,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LedgerName  *string                `protobuf:"bytes,11,opt,name=ledger_name,json=ledgerName,proto3,oneof" json:"ledger_name,omitempty"`
}

func (x *EcobankVUDeposit) Reset() {
	*x = EcobankVUDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_ecobank_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcobankVUDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcobankVUDeposit) ProtoMessage() {}

func (x *EcobankVUDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_ecobank_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcobankVUDeposit.ProtoReflect.Descriptor instead.
func (*EcobankVUDeposit) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_ecobank_proto_rawDescGZIP(), []int{2}
}

func (x *EcobankVUDeposit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EcobankVUDeposit) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *EcobankVUDeposit) GetApproverId() string {
	if x != nil {
		return x.ApproverId
	}
	return ""
}

func (x *EcobankVUDeposit) GetMakerId() string {
	if x != nil {
		return x.MakerId
	}
	return ""
}

func (x *EcobankVUDeposit) GetCheckerId() string {
	if x != nil {
		return x.CheckerId
	}
	return ""
}

func (x *EcobankVUDeposit) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *EcobankVUDeposit) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *EcobankVUDeposit) GetStatus() EcobankVUDepositStatus {
	if x != nil {
		return x.Status
	}
	return EcobankVUDepositStatus_ECOBANK_VU_DEPOSIT_STATUS_UNSPECIFIED
}

func (x *EcobankVUDeposit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EcobankVUDeposit) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *EcobankVUDeposit) GetLedgerName() string {
	if x != nil && x.LedgerName != nil {
		return *x.LedgerName
	}
	return ""
}

type EcobankVUWithdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequesterId string                    `protobuf:"bytes,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"` // ID of the operations user that has requested the deposit
	ApproverId  string                    `protobuf:"bytes,3,opt,name=approver_id,json=approverId,proto3" json:"approver_id,omitempty"`    // ID of the Ecobank operations user that approved the request
	MakerId     string                    `protobuf:"bytes,4,opt,name=maker_id,json=makerId,proto3" json:"maker_id,omitempty"`             // ID of the Ecobank operations user that marked the request as made
	CheckerId   string                    `protobuf:"bytes,5,opt,name=checker_id,json=checkerId,proto3" json:"checker_id,omitempty"`       // ID of the Ecobank operations user that marked the request as checked
	Reference   string                    `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`                        // unique human-readable reference number for the deposit
	Amount      *Amount                   `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Status      EcobankVUWithdrawalStatus `protobuf:"varint,8,opt,name=status,proto3,enum=kappa.EcobankVUWithdrawalStatus" json:"status,omitempty"`
	CreatedAt   *timestamppb.Timestamp    `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp    `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LedgerName  *string                   `protobuf:"bytes,11,opt,name=ledger_name,json=ledgerName,proto3,oneof" json:"ledger_name,omitempty"`
}

func (x *EcobankVUWithdrawal) Reset() {
	*x = EcobankVUWithdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_ecobank_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcobankVUWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcobankVUWithdrawal) ProtoMessage() {}

func (x *EcobankVUWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_ecobank_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcobankVUWithdrawal.ProtoReflect.Descriptor instead.
func (*EcobankVUWithdrawal) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_ecobank_proto_rawDescGZIP(), []int{3}
}

func (x *EcobankVUWithdrawal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EcobankVUWithdrawal) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *EcobankVUWithdrawal) GetApproverId() string {
	if x != nil {
		return x.ApproverId
	}
	return ""
}

func (x *EcobankVUWithdrawal) GetMakerId() string {
	if x != nil {
		return x.MakerId
	}
	return ""
}

func (x *EcobankVUWithdrawal) GetCheckerId() string {
	if x != nil {
		return x.CheckerId
	}
	return ""
}

func (x *EcobankVUWithdrawal) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *EcobankVUWithdrawal) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *EcobankVUWithdrawal) GetStatus() EcobankVUWithdrawalStatus {
	if x != nil {
		return x.Status
	}
	return EcobankVUWithdrawalStatus_ECOBANK_VU_WITHDRAWAL_STATUS_UNSPECIFIED
}

func (x *EcobankVUWithdrawal) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EcobankVUWithdrawal) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *EcobankVUWithdrawal) GetLedgerName() string {
	if x != nil && x.LedgerName != nil {
		return *x.LedgerName
	}
	return ""
}

type EcobankWebhookEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batchid         string                              `protobuf:"bytes,1,opt,name=batchid,proto3" json:"batchid,omitempty"`
	Batchsequence   int32                               `protobuf:"varint,2,opt,name=batchsequence,proto3" json:"batchsequence,omitempty"`
	Futureresponses []*anypb.Any                        `protobuf:"bytes,3,rep,name=futureresponses,proto3" json:"futureresponses,omitempty"`
	Headerresponse  *EcobankWebhookEvent_Headerresponse `protobuf:"bytes,4,opt,name=headerresponse,proto3" json:"headerresponse,omitempty"`
	Processedcount  int32                               `protobuf:"varint,5,opt,name=processedcount,proto3" json:"processedcount,omitempty"`
	Records         []*EcobankWebhookEvent_Record       `protobuf:"bytes,6,rep,name=records,proto3" json:"records,omitempty"`
	Transactionid   string                              `protobuf:"bytes,7,opt,name=transactionid,proto3" json:"transactionid,omitempty"`
}

func (x *EcobankWebhookEvent) Reset() {
	*x = EcobankWebhookEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_ecobank_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcobankWebhookEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcobankWebhookEvent) ProtoMessage() {}

func (x *EcobankWebhookEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_ecobank_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcobankWebhookEvent.ProtoReflect.Descriptor instead.
func (*EcobankWebhookEvent) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_ecobank_proto_rawDescGZIP(), []int{4}
}

func (x *EcobankWebhookEvent) GetBatchid() string {
	if x != nil {
		return x.Batchid
	}
	return ""
}

func (x *EcobankWebhookEvent) GetBatchsequence() int32 {
	if x != nil {
		return x.Batchsequence
	}
	return 0
}

func (x *EcobankWebhookEvent) GetFutureresponses() []*anypb.Any {
	if x != nil {
		return x.Futureresponses
	}
	return nil
}

func (x *EcobankWebhookEvent) GetHeaderresponse() *EcobankWebhookEvent_Headerresponse {
	if x != nil {
		return x.Headerresponse
	}
	return nil
}

func (x *EcobankWebhookEvent) GetProcessedcount() int32 {
	if x != nil {
		return x.Processedcount
	}
	return 0
}

func (x *EcobankWebhookEvent) GetRecords() []*EcobankWebhookEvent_Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *EcobankWebhookEvent) GetTransactionid() string {
	if x != nil {
		return x.Transactionid
	}
	return ""
}

type EcobankWebhookEvent_Headerresponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responsecode     string `protobuf:"bytes,1,opt,name=responsecode,proto3" json:"responsecode,omitempty"`
	Respponsemessage string `protobuf:"bytes,2,opt,name=respponsemessage,proto3" json:"respponsemessage,omitempty"`
}

func (x *EcobankWebhookEvent_Headerresponse) Reset() {
	*x = EcobankWebhookEvent_Headerresponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_ecobank_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcobankWebhookEvent_Headerresponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcobankWebhookEvent_Headerresponse) ProtoMessage() {}

func (x *EcobankWebhookEvent_Headerresponse) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_ecobank_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcobankWebhookEvent_Headerresponse.ProtoReflect.Descriptor instead.
func (*EcobankWebhookEvent_Headerresponse) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_ecobank_proto_rawDescGZIP(), []int{4, 0}
}

func (x *EcobankWebhookEvent_Headerresponse) GetResponsecode() string {
	if x != nil {
		return x.Responsecode
	}
	return ""
}

func (x *EcobankWebhookEvent_Headerresponse) GetRespponsemessage() string {
	if x != nil {
		return x.Respponsemessage
	}
	return ""
}

type EcobankWebhookEvent_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cbareference    string `protobuf:"bytes,1,opt,name=cbareference,proto3" json:"cbareference,omitempty"`
	Dateprocessed   string `protobuf:"bytes,2,opt,name=dateprocessed,proto3" json:"dateprocessed,omitempty"`
	Requestid       string `protobuf:"bytes,3,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Responsecode    string `protobuf:"bytes,4,opt,name=responsecode,proto3" json:"responsecode,omitempty"`
	Responsemessage string `protobuf:"bytes,5,opt,name=responsemessage,proto3" json:"responsemessage,omitempty"`
	Token           string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *EcobankWebhookEvent_Record) Reset() {
	*x = EcobankWebhookEvent_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_ecobank_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcobankWebhookEvent_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcobankWebhookEvent_Record) ProtoMessage() {}

func (x *EcobankWebhookEvent_Record) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_ecobank_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcobankWebhookEvent_Record.ProtoReflect.Descriptor instead.
func (*EcobankWebhookEvent_Record) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_ecobank_proto_rawDescGZIP(), []int{4, 1}
}

func (x *EcobankWebhookEvent_Record) GetCbareference() string {
	if x != nil {
		return x.Cbareference
	}
	return ""
}

func (x *EcobankWebhookEvent_Record) GetDateprocessed() string {
	if x != nil {
		return x.Dateprocessed
	}
	return ""
}

func (x *EcobankWebhookEvent_Record) GetRequestid() string {
	if x != nil {
		return x.Requestid
	}
	return ""
}

func (x *EcobankWebhookEvent_Record) GetResponsecode() string {
	if x != nil {
		return x.Responsecode
	}
	return ""
}

func (x *EcobankWebhookEvent_Record) GetResponsemessage() string {
	if x != nil {
		return x.Responsemessage
	}
	return ""
}

func (x *EcobankWebhookEvent_Record) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_kappa_common_models_ecobank_proto protoreflect.FileDescriptor

var file_kappa_common_models_ecobank_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x65, 0x63, 0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6b,
	0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xea, 0x04, 0x0a, 0x0e, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x6f,
	0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xf2, 0x03, 0x0a, 0x11, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x10, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e,
	0x6b, 0x56, 0x55, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x56, 0x55, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xce, 0x03, 0x0a, 0x13, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x56, 0x55, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x2e, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x56, 0x55, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xac, 0x05, 0x0a, 0x13, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e,
	0x6b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x45, 0x63,
	0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x1a, 0x60, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x70, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xd4, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x62, 0x61, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x62, 0x61, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2a, 0xf9, 0x03, 0x0a, 0x16, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x56, 0x55, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x25, 0x45,
	0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x4b,
	0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56,
	0x55, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x45,
	0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d,
	0x41, 0x44, 0x45, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x26,
	0x0a, 0x22, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x2a, 0xa0, 0x04, 0x0a,
	0x19, 0x45, 0x63, 0x6f, 0x62, 0x61, 0x6e, 0x6b, 0x56, 0x55, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x43,
	0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x43, 0x4f, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f,
	0x56, 0x55, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56,
	0x55, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x29,
	0x0a, 0x25, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x43, 0x4f,
	0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x44, 0x45, 0x10, 0x05,
	0x12, 0x28, 0x0a, 0x24, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x43,
	0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56,
	0x55, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x2a, 0x0a, 0x26, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25, 0x45,
	0x43, 0x4f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52,
	0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x43, 0x4f, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x56, 0x55, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x42,
	0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x70, 0x61, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6c,
	0x69, 0x62, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kappa_common_models_ecobank_proto_rawDescOnce sync.Once
	file_kappa_common_models_ecobank_proto_rawDescData = file_kappa_common_models_ecobank_proto_rawDesc
)

func file_kappa_common_models_ecobank_proto_rawDescGZIP() []byte {
	file_kappa_common_models_ecobank_proto_rawDescOnce.Do(func() {
		file_kappa_common_models_ecobank_proto_rawDescData = protoimpl.X.CompressGZIP(file_kappa_common_models_ecobank_proto_rawDescData)
	})
	return file_kappa_common_models_ecobank_proto_rawDescData
}

var file_kappa_common_models_ecobank_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kappa_common_models_ecobank_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_kappa_common_models_ecobank_proto_goTypes = []interface{}{
	(EcobankVUDepositStatus)(0),                // 0: kappa.EcobankVUDepositStatus
	(EcobankVUWithdrawalStatus)(0),             // 1: kappa.EcobankVUWithdrawalStatus
	(*EcobankAccount)(nil),                     // 2: kappa.EcobankAccount
	(*EcobankEmailEvent)(nil),                  // 3: kappa.EcobankEmailEvent
	(*EcobankVUDeposit)(nil),                   // 4: kappa.EcobankVUDeposit
	(*EcobankVUWithdrawal)(nil),                // 5: kappa.EcobankVUWithdrawal
	(*EcobankWebhookEvent)(nil),                // 6: kappa.EcobankWebhookEvent
	(*EcobankWebhookEvent_Headerresponse)(nil), // 7: kappa.EcobankWebhookEvent.Headerresponse
	(*EcobankWebhookEvent_Record)(nil),         // 8: kappa.EcobankWebhookEvent.Record
	(*Currency)(nil),                           // 9: kappa.Currency
	(*types.Decimal)(nil),                      // 10: Decimal
	(*timestamppb.Timestamp)(nil),              // 11: google.protobuf.Timestamp
	(*Amount)(nil),                             // 12: kappa.Amount
	(*anypb.Any)(nil),                          // 13: google.protobuf.Any
}
var file_kappa_common_models_ecobank_proto_depIdxs = []int32{
	9,  // 0: kappa.EcobankAccount.currency:type_name -> kappa.Currency
	10, // 1: kappa.EcobankAccount.available_balance:type_name -> Decimal
	10, // 2: kappa.EcobankAccount.current_balance:type_name -> Decimal
	10, // 3: kappa.EcobankAccount.od_limit:type_name -> Decimal
	11, // 4: kappa.EcobankAccount.created_at:type_name -> google.protobuf.Timestamp
	11, // 5: kappa.EcobankAccount.updated_at:type_name -> google.protobuf.Timestamp
	11, // 6: kappa.EcobankAccount.deleted_at:type_name -> google.protobuf.Timestamp
	12, // 7: kappa.EcobankVUDeposit.amount:type_name -> kappa.Amount
	0,  // 8: kappa.EcobankVUDeposit.status:type_name -> kappa.EcobankVUDepositStatus
	11, // 9: kappa.EcobankVUDeposit.created_at:type_name -> google.protobuf.Timestamp
	11, // 10: kappa.EcobankVUDeposit.updated_at:type_name -> google.protobuf.Timestamp
	12, // 11: kappa.EcobankVUWithdrawal.amount:type_name -> kappa.Amount
	1,  // 12: kappa.EcobankVUWithdrawal.status:type_name -> kappa.EcobankVUWithdrawalStatus
	11, // 13: kappa.EcobankVUWithdrawal.created_at:type_name -> google.protobuf.Timestamp
	11, // 14: kappa.EcobankVUWithdrawal.updated_at:type_name -> google.protobuf.Timestamp
	13, // 15: kappa.EcobankWebhookEvent.futureresponses:type_name -> google.protobuf.Any
	7,  // 16: kappa.EcobankWebhookEvent.headerresponse:type_name -> kappa.EcobankWebhookEvent.Headerresponse
	8,  // 17: kappa.EcobankWebhookEvent.records:type_name -> kappa.EcobankWebhookEvent.Record
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_kappa_common_models_ecobank_proto_init() }
func file_kappa_common_models_ecobank_proto_init() {
	if File_kappa_common_models_ecobank_proto != nil {
		return
	}
	file_kappa_common_models_configuration_proto_init()
	file_kappa_common_models_amount_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kappa_common_models_ecobank_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcobankAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_ecobank_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcobankEmailEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_ecobank_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcobankVUDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_ecobank_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcobankVUWithdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_ecobank_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcobankWebhookEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_ecobank_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcobankWebhookEvent_Headerresponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_ecobank_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcobankWebhookEvent_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kappa_common_models_ecobank_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_kappa_common_models_ecobank_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kappa_common_models_ecobank_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kappa_common_models_ecobank_proto_goTypes,
		DependencyIndexes: file_kappa_common_models_ecobank_proto_depIdxs,
		EnumInfos:         file_kappa_common_models_ecobank_proto_enumTypes,
		MessageInfos:      file_kappa_common_models_ecobank_proto_msgTypes,
	}.Build()
	File_kappa_common_models_ecobank_proto = out.File
	file_kappa_common_models_ecobank_proto_rawDesc = nil
	file_kappa_common_models_ecobank_proto_goTypes = nil
	file_kappa_common_models_ecobank_proto_depIdxs = nil
}
