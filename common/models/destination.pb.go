// ------------------------------------------------------------------------------
// <copyright company="Kappa Pay Inc.">
// Copyright (C) Kappa Pay Inc.  All rights reserved.
// Unauthorised copying of this file, via any medium, is strictly prohibited.
// Proprietary and confidential
// </copyright>
// <author>Chris Nyaga</author>
// ------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: kappa/common/models/destination.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DestinationType int32

const (
	DestinationType_DESTINATION_TYPE_UNSPECIFIED          DestinationType = 0
	DestinationType_DESTINATION_TYPE_WALLET               DestinationType = 1
	DestinationType_DESTINATION_TYPE_BANK_ACCOUNT         DestinationType = 2
	DestinationType_DESTINATION_TYPE_MOBILE_MONEY_ACCOUNT DestinationType = 3
	DestinationType_DESTINATION_TYPE_LINKED_ACCOUNT       DestinationType = 4
)

// Enum value maps for DestinationType.
var (
	DestinationType_name = map[int32]string{
		0: "DESTINATION_TYPE_UNSPECIFIED",
		1: "DESTINATION_TYPE_WALLET",
		2: "DESTINATION_TYPE_BANK_ACCOUNT",
		3: "DESTINATION_TYPE_MOBILE_MONEY_ACCOUNT",
		4: "DESTINATION_TYPE_LINKED_ACCOUNT",
	}
	DestinationType_value = map[string]int32{
		"DESTINATION_TYPE_UNSPECIFIED":          0,
		"DESTINATION_TYPE_WALLET":               1,
		"DESTINATION_TYPE_BANK_ACCOUNT":         2,
		"DESTINATION_TYPE_MOBILE_MONEY_ACCOUNT": 3,
		"DESTINATION_TYPE_LINKED_ACCOUNT":       4,
	}
)

func (x DestinationType) Enum() *DestinationType {
	p := new(DestinationType)
	*p = x
	return p
}

func (x DestinationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestinationType) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_destination_proto_enumTypes[0].Descriptor()
}

func (DestinationType) Type() protoreflect.EnumType {
	return &file_kappa_common_models_destination_proto_enumTypes[0]
}

func (x DestinationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestinationType.Descriptor instead.
func (DestinationType) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_destination_proto_rawDescGZIP(), []int{0}
}

type DestinationStatus int32

const (
	DestinationStatus_DESTINATION_STATUS_UNSPECIFIED           DestinationStatus = 0
	DestinationStatus_DESTINATION_STATUS_PENDING_AUTHORIZATION DestinationStatus = 1
	DestinationStatus_DESTINATION_STATUS_AUTHORIZED            DestinationStatus = 2
	DestinationStatus_DESTINATION_STATUS_FAILED_TO_AUTHORIZE   DestinationStatus = 3
	DestinationStatus_DESTINATION_STATUS_ON_HOLD               DestinationStatus = 4
)

// Enum value maps for DestinationStatus.
var (
	DestinationStatus_name = map[int32]string{
		0: "DESTINATION_STATUS_UNSPECIFIED",
		1: "DESTINATION_STATUS_PENDING_AUTHORIZATION",
		2: "DESTINATION_STATUS_AUTHORIZED",
		3: "DESTINATION_STATUS_FAILED_TO_AUTHORIZE",
		4: "DESTINATION_STATUS_ON_HOLD",
	}
	DestinationStatus_value = map[string]int32{
		"DESTINATION_STATUS_UNSPECIFIED":           0,
		"DESTINATION_STATUS_PENDING_AUTHORIZATION": 1,
		"DESTINATION_STATUS_AUTHORIZED":            2,
		"DESTINATION_STATUS_FAILED_TO_AUTHORIZE":   3,
		"DESTINATION_STATUS_ON_HOLD":               4,
	}
)

func (x DestinationStatus) Enum() *DestinationStatus {
	p := new(DestinationStatus)
	*p = x
	return p
}

func (x DestinationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestinationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_destination_proto_enumTypes[1].Descriptor()
}

func (DestinationStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_destination_proto_enumTypes[1]
}

func (x DestinationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestinationStatus.Descriptor instead.
func (DestinationStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_destination_proto_rawDescGZIP(), []int{1}
}

type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     DestinationType `protobuf:"varint,2,opt,name=type,proto3,enum=kappa.DestinationType" json:"type,omitempty"`
	EntityId string          `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"` // the entity for which this is a valid destination
	// Types that are assignable to Destination:
	//	*Destination_Wallet
	//	*Destination_BankAccount
	//	*Destination_LinkedAccount
	//	*Destination_MobileMoneyAccount
	Destination isDestination_Destination `protobuf_oneof:"destination"`
	Status      DestinationStatus         `protobuf:"varint,8,opt,name=status,proto3,enum=kappa.DestinationStatus" json:"status,omitempty"`
	Domicile    *Country                  `protobuf:"bytes,9,opt,name=domicile,proto3" json:"domicile,omitempty"`
	Currency    *Currency                 `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_destination_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_destination_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_destination_proto_rawDescGZIP(), []int{0}
}

func (x *Destination) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Destination) GetType() DestinationType {
	if x != nil {
		return x.Type
	}
	return DestinationType_DESTINATION_TYPE_UNSPECIFIED
}

func (x *Destination) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (m *Destination) GetDestination() isDestination_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *Destination) GetWallet() *Wallet {
	if x, ok := x.GetDestination().(*Destination_Wallet); ok {
		return x.Wallet
	}
	return nil
}

func (x *Destination) GetBankAccount() *BankAccount {
	if x, ok := x.GetDestination().(*Destination_BankAccount); ok {
		return x.BankAccount
	}
	return nil
}

func (x *Destination) GetLinkedAccount() *LinkedAccount {
	if x, ok := x.GetDestination().(*Destination_LinkedAccount); ok {
		return x.LinkedAccount
	}
	return nil
}

func (x *Destination) GetMobileMoneyAccount() *MobileMoneyAccount {
	if x, ok := x.GetDestination().(*Destination_MobileMoneyAccount); ok {
		return x.MobileMoneyAccount
	}
	return nil
}

func (x *Destination) GetStatus() DestinationStatus {
	if x != nil {
		return x.Status
	}
	return DestinationStatus_DESTINATION_STATUS_UNSPECIFIED
}

func (x *Destination) GetDomicile() *Country {
	if x != nil {
		return x.Domicile
	}
	return nil
}

func (x *Destination) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

type isDestination_Destination interface {
	isDestination_Destination()
}

type Destination_Wallet struct {
	Wallet *Wallet `protobuf:"bytes,4,opt,name=wallet,proto3,oneof"`
}

type Destination_BankAccount struct {
	BankAccount *BankAccount `protobuf:"bytes,5,opt,name=bank_account,json=bankAccount,proto3,oneof"`
}

type Destination_LinkedAccount struct {
	LinkedAccount *LinkedAccount `protobuf:"bytes,6,opt,name=linked_account,json=linkedAccount,proto3,oneof"`
}

type Destination_MobileMoneyAccount struct {
	MobileMoneyAccount *MobileMoneyAccount `protobuf:"bytes,7,opt,name=mobile_money_account,json=mobileMoneyAccount,proto3,oneof"`
}

func (*Destination_Wallet) isDestination_Destination() {}

func (*Destination_BankAccount) isDestination_Destination() {}

func (*Destination_LinkedAccount) isDestination_Destination() {}

func (*Destination_MobileMoneyAccount) isDestination_Destination() {}

var File_kappa_common_models_destination_proto protoreflect.FileDescriptor

var file_kappa_common_models_destination_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x1a, 0x20,
	0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x26, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x03, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x37, 0x0a,
	0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xc3,
	0x01, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f,
	0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x23, 0x0a, 0x1f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x04, 0x2a, 0xd4, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45,
	0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c,
	0x0a, 0x28, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44,
	0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x42, 0x40, 0x5a, 0x3e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x70,
	0x61, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kappa_common_models_destination_proto_rawDescOnce sync.Once
	file_kappa_common_models_destination_proto_rawDescData = file_kappa_common_models_destination_proto_rawDesc
)

func file_kappa_common_models_destination_proto_rawDescGZIP() []byte {
	file_kappa_common_models_destination_proto_rawDescOnce.Do(func() {
		file_kappa_common_models_destination_proto_rawDescData = protoimpl.X.CompressGZIP(file_kappa_common_models_destination_proto_rawDescData)
	})
	return file_kappa_common_models_destination_proto_rawDescData
}

var file_kappa_common_models_destination_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kappa_common_models_destination_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_kappa_common_models_destination_proto_goTypes = []interface{}{
	(DestinationType)(0),       // 0: kappa.DestinationType
	(DestinationStatus)(0),     // 1: kappa.DestinationStatus
	(*Destination)(nil),        // 2: kappa.Destination
	(*Wallet)(nil),             // 3: kappa.Wallet
	(*BankAccount)(nil),        // 4: kappa.BankAccount
	(*LinkedAccount)(nil),      // 5: kappa.LinkedAccount
	(*MobileMoneyAccount)(nil), // 6: kappa.MobileMoneyAccount
	(*Country)(nil),            // 7: kappa.Country
	(*Currency)(nil),           // 8: kappa.Currency
}
var file_kappa_common_models_destination_proto_depIdxs = []int32{
	0, // 0: kappa.Destination.type:type_name -> kappa.DestinationType
	3, // 1: kappa.Destination.wallet:type_name -> kappa.Wallet
	4, // 2: kappa.Destination.bank_account:type_name -> kappa.BankAccount
	5, // 3: kappa.Destination.linked_account:type_name -> kappa.LinkedAccount
	6, // 4: kappa.Destination.mobile_money_account:type_name -> kappa.MobileMoneyAccount
	1, // 5: kappa.Destination.status:type_name -> kappa.DestinationStatus
	7, // 6: kappa.Destination.domicile:type_name -> kappa.Country
	8, // 7: kappa.Destination.currency:type_name -> kappa.Currency
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_kappa_common_models_destination_proto_init() }
func file_kappa_common_models_destination_proto_init() {
	if File_kappa_common_models_destination_proto != nil {
		return
	}
	file_kappa_common_models_wallet_proto_init()
	file_kappa_common_models_bank_account_proto_init()
	file_kappa_common_models_linked_account_proto_init()
	file_kappa_common_models_mobile_money_account_proto_init()
	file_kappa_common_models_configuration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kappa_common_models_destination_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kappa_common_models_destination_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Destination_Wallet)(nil),
		(*Destination_BankAccount)(nil),
		(*Destination_LinkedAccount)(nil),
		(*Destination_MobileMoneyAccount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kappa_common_models_destination_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kappa_common_models_destination_proto_goTypes,
		DependencyIndexes: file_kappa_common_models_destination_proto_depIdxs,
		EnumInfos:         file_kappa_common_models_destination_proto_enumTypes,
		MessageInfos:      file_kappa_common_models_destination_proto_msgTypes,
	}.Build()
	File_kappa_common_models_destination_proto = out.File
	file_kappa_common_models_destination_proto_rawDesc = nil
	file_kappa_common_models_destination_proto_goTypes = nil
	file_kappa_common_models_destination_proto_depIdxs = nil
}
