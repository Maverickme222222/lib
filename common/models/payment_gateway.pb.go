// ------------------------------------------------------------------------------
// <copyright company="Kappa Pay Inc.">
// Copyright (C) Kappa Pay Inc.  All rights reserved.
// Unauthorised copying of this file, via any medium, is strictly prohibited.
// Proprietary and confidential
// </copyright>
// <author>Shashank Agarwal</author>
// ------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: kappa/common/models/payment_gateway.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaymentGatewayProcessingType int32

const (
	PaymentGatewayProcessingType_PAYMENT_GATEWAY_PROCESSING_TYPE_UNSPECIFIED PaymentGatewayProcessingType = 0
	PaymentGatewayProcessingType_PAYMENT_GATEWAY_PROCESSING_TYPE_BATCH       PaymentGatewayProcessingType = 1
	PaymentGatewayProcessingType_PAYMENT_GATEWAY_PROCESSING_TYPE_CONTINUOUS  PaymentGatewayProcessingType = 2
)

// Enum value maps for PaymentGatewayProcessingType.
var (
	PaymentGatewayProcessingType_name = map[int32]string{
		0: "PAYMENT_GATEWAY_PROCESSING_TYPE_UNSPECIFIED",
		1: "PAYMENT_GATEWAY_PROCESSING_TYPE_BATCH",
		2: "PAYMENT_GATEWAY_PROCESSING_TYPE_CONTINUOUS",
	}
	PaymentGatewayProcessingType_value = map[string]int32{
		"PAYMENT_GATEWAY_PROCESSING_TYPE_UNSPECIFIED": 0,
		"PAYMENT_GATEWAY_PROCESSING_TYPE_BATCH":       1,
		"PAYMENT_GATEWAY_PROCESSING_TYPE_CONTINUOUS":  2,
	}
)

func (x PaymentGatewayProcessingType) Enum() *PaymentGatewayProcessingType {
	p := new(PaymentGatewayProcessingType)
	*p = x
	return p
}

func (x PaymentGatewayProcessingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentGatewayProcessingType) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_payment_gateway_proto_enumTypes[0].Descriptor()
}

func (PaymentGatewayProcessingType) Type() protoreflect.EnumType {
	return &file_kappa_common_models_payment_gateway_proto_enumTypes[0]
}

func (x PaymentGatewayProcessingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentGatewayProcessingType.Descriptor instead.
func (PaymentGatewayProcessingType) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{0}
}

type PaymentGatewayType int32

const (
	PaymentGatewayType_PAYMENT_GATEWAY_TYPE_UNSPECIFIED          PaymentGatewayType = 0
	PaymentGatewayType_PAYMENT_GATEWAY_TYPE_API                  PaymentGatewayType = 1
	PaymentGatewayType_PAYMENT_GATEWAY_TYPE_MANUAL_BANK_TRANSFER PaymentGatewayType = 2
)

// Enum value maps for PaymentGatewayType.
var (
	PaymentGatewayType_name = map[int32]string{
		0: "PAYMENT_GATEWAY_TYPE_UNSPECIFIED",
		1: "PAYMENT_GATEWAY_TYPE_API",
		2: "PAYMENT_GATEWAY_TYPE_MANUAL_BANK_TRANSFER",
	}
	PaymentGatewayType_value = map[string]int32{
		"PAYMENT_GATEWAY_TYPE_UNSPECIFIED":          0,
		"PAYMENT_GATEWAY_TYPE_API":                  1,
		"PAYMENT_GATEWAY_TYPE_MANUAL_BANK_TRANSFER": 2,
	}
)

func (x PaymentGatewayType) Enum() *PaymentGatewayType {
	p := new(PaymentGatewayType)
	*p = x
	return p
}

func (x PaymentGatewayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentGatewayType) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_payment_gateway_proto_enumTypes[1].Descriptor()
}

func (PaymentGatewayType) Type() protoreflect.EnumType {
	return &file_kappa_common_models_payment_gateway_proto_enumTypes[1]
}

func (x PaymentGatewayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentGatewayType.Descriptor instead.
func (PaymentGatewayType) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{1}
}

type PaymentDirection int32

const (
	PaymentDirection_PAYMENT_DIRECTION_UNSPECIFIED PaymentDirection = 0
	PaymentDirection_PAYMENT_DIRECTION_COLLECTION  PaymentDirection = 1
	PaymentDirection_PAYMENT_DIRECTION_PAYOUT      PaymentDirection = 2
)

// Enum value maps for PaymentDirection.
var (
	PaymentDirection_name = map[int32]string{
		0: "PAYMENT_DIRECTION_UNSPECIFIED",
		1: "PAYMENT_DIRECTION_COLLECTION",
		2: "PAYMENT_DIRECTION_PAYOUT",
	}
	PaymentDirection_value = map[string]int32{
		"PAYMENT_DIRECTION_UNSPECIFIED": 0,
		"PAYMENT_DIRECTION_COLLECTION":  1,
		"PAYMENT_DIRECTION_PAYOUT":      2,
	}
)

func (x PaymentDirection) Enum() *PaymentDirection {
	p := new(PaymentDirection)
	*p = x
	return p
}

func (x PaymentDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_payment_gateway_proto_enumTypes[2].Descriptor()
}

func (PaymentDirection) Type() protoreflect.EnumType {
	return &file_kappa_common_models_payment_gateway_proto_enumTypes[2]
}

func (x PaymentDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentDirection.Descriptor instead.
func (PaymentDirection) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{2}
}

type PaymentGatewayFeeType int32

const (
	PaymentGatewayFeeType_PAYMENT_GATEWAY_FEE_TYPE_UNSPECIFIED PaymentGatewayFeeType = 0
	PaymentGatewayFeeType_PAYMENT_GATEWAY_FEE_TYPE_FIXED       PaymentGatewayFeeType = 1
	PaymentGatewayFeeType_PAYMENT_GATEWAY_FEE_TYPE_PERCENTAGE  PaymentGatewayFeeType = 2
)

// Enum value maps for PaymentGatewayFeeType.
var (
	PaymentGatewayFeeType_name = map[int32]string{
		0: "PAYMENT_GATEWAY_FEE_TYPE_UNSPECIFIED",
		1: "PAYMENT_GATEWAY_FEE_TYPE_FIXED",
		2: "PAYMENT_GATEWAY_FEE_TYPE_PERCENTAGE",
	}
	PaymentGatewayFeeType_value = map[string]int32{
		"PAYMENT_GATEWAY_FEE_TYPE_UNSPECIFIED": 0,
		"PAYMENT_GATEWAY_FEE_TYPE_FIXED":       1,
		"PAYMENT_GATEWAY_FEE_TYPE_PERCENTAGE":  2,
	}
)

func (x PaymentGatewayFeeType) Enum() *PaymentGatewayFeeType {
	p := new(PaymentGatewayFeeType)
	*p = x
	return p
}

func (x PaymentGatewayFeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentGatewayFeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_payment_gateway_proto_enumTypes[3].Descriptor()
}

func (PaymentGatewayFeeType) Type() protoreflect.EnumType {
	return &file_kappa_common_models_payment_gateway_proto_enumTypes[3]
}

func (x PaymentGatewayFeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentGatewayFeeType.Descriptor instead.
func (PaymentGatewayFeeType) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{3}
}

type PaymentGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // e.g. 'SILA-ACH', 'ECOBANK-BANK-TRANSFER'
	Type           PaymentGatewayType           `protobuf:"varint,3,opt,name=type,proto3,enum=kappa.PaymentGatewayType" json:"type,omitempty"`
	ProcessingType PaymentGatewayProcessingType `protobuf:"varint,4,opt,name=processing_type,json=processingType,proto3,enum=kappa.PaymentGatewayProcessingType" json:"processing_type,omitempty"`
}

func (x *PaymentGateway) Reset() {
	*x = PaymentGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentGateway) ProtoMessage() {}

func (x *PaymentGateway) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentGateway.ProtoReflect.Descriptor instead.
func (*PaymentGateway) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *PaymentGateway) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentGateway) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentGateway) GetType() PaymentGatewayType {
	if x != nil {
		return x.Type
	}
	return PaymentGatewayType_PAYMENT_GATEWAY_TYPE_UNSPECIFIED
}

func (x *PaymentGateway) GetProcessingType() PaymentGatewayProcessingType {
	if x != nil {
		return x.ProcessingType
	}
	return PaymentGatewayProcessingType_PAYMENT_GATEWAY_PROCESSING_TYPE_UNSPECIFIED
}

type BatchProcessingSchedulePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScheduleId string   `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"` // The schedule this point belongs to
	Cutoff     *DayTime `protobuf:"bytes,3,opt,name=cutoff,proto3" json:"cutoff,omitempty"`                           // the cutoff day and time for this batch, e.g. MONDAY 17:00:00
	Completion *DayTime `protobuf:"bytes,4,opt,name=completion,proto3" json:"completion,omitempty"`                   // the day and time this batch is expected to complete, e.g. WEDNESDAY, 08:14:00
}

func (x *BatchProcessingSchedulePoint) Reset() {
	*x = BatchProcessingSchedulePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProcessingSchedulePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessingSchedulePoint) ProtoMessage() {}

func (x *BatchProcessingSchedulePoint) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessingSchedulePoint.ProtoReflect.Descriptor instead.
func (*BatchProcessingSchedulePoint) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *BatchProcessingSchedulePoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchProcessingSchedulePoint) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *BatchProcessingSchedulePoint) GetCutoff() *DayTime {
	if x != nil {
		return x.Cutoff
	}
	return nil
}

func (x *BatchProcessingSchedulePoint) GetCompletion() *DayTime {
	if x != nil {
		return x.Completion
	}
	return nil
}

type PaymentGatewayBatchProcessingSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GatewayId       string                          `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`                                                     // the ID of the payment gateway whose schedule this is
	Name            string                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                                // human-readable identifier of the schedule
	Direction       PaymentDirection                `protobuf:"varint,4,opt,name=direction,proto3,enum=kappa.PaymentDirection" json:"direction,omitempty"`                                         // the direction of the transfer, 'COLLECTION' or 'PAYOUT'
	Currency        *Currency                       `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                                                                        // the currency of the transfer
	Country         *Country                        `protobuf:"bytes,6,opt,name=country,proto3,oneof" json:"country,omitempty"`                                                                    // the country this schedule applies in
	HolidayCalendar *HolidayCalendar                `protobuf:"varint,7,opt,name=holiday_calendar,json=holidayCalendar,proto3,enum=kappa.HolidayCalendar,oneof" json:"holiday_calendar,omitempty"` // the holiday calendar that applies to this schedule, if any
	Points          []*BatchProcessingSchedulePoint `protobuf:"bytes,8,rep,name=points,proto3" json:"points,omitempty"`                                                                            // the points in the schedule, must be ordered
}

func (x *PaymentGatewayBatchProcessingSchedule) Reset() {
	*x = PaymentGatewayBatchProcessingSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentGatewayBatchProcessingSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentGatewayBatchProcessingSchedule) ProtoMessage() {}

func (x *PaymentGatewayBatchProcessingSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentGatewayBatchProcessingSchedule.ProtoReflect.Descriptor instead.
func (*PaymentGatewayBatchProcessingSchedule) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *PaymentGatewayBatchProcessingSchedule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentGatewayBatchProcessingSchedule) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *PaymentGatewayBatchProcessingSchedule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentGatewayBatchProcessingSchedule) GetDirection() PaymentDirection {
	if x != nil {
		return x.Direction
	}
	return PaymentDirection_PAYMENT_DIRECTION_UNSPECIFIED
}

func (x *PaymentGatewayBatchProcessingSchedule) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *PaymentGatewayBatchProcessingSchedule) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *PaymentGatewayBatchProcessingSchedule) GetHolidayCalendar() HolidayCalendar {
	if x != nil && x.HolidayCalendar != nil {
		return *x.HolidayCalendar
	}
	return HolidayCalendar_HOLIDAY_CALENDAR_UNSPECIFIED
}

func (x *PaymentGatewayBatchProcessingSchedule) GetPoints() []*BatchProcessingSchedulePoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type PaymentGatewayContinuousProcessingSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A processing schedule for a gateway that processes payments continuously
	Id              string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GatewayId       string               `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`                                                     // the ID of the payment gateway whose schedule this is
	Name            string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                                // human-readable identifier of the schedule
	Direction       PaymentDirection     `protobuf:"varint,4,opt,name=direction,proto3,enum=kappa.PaymentDirection" json:"direction,omitempty"`                                         // the direction of the transfer, 'COLLECTION' or 'PAYOUT'
	Currency        *Currency            `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                                                                        // the currency of the transfer
	Country         *Country             `protobuf:"bytes,6,opt,name=country,proto3,oneof" json:"country,omitempty"`                                                                    // the country this schedule applies in
	HolidayCalendar *HolidayCalendar     `protobuf:"varint,7,opt,name=holiday_calendar,json=holidayCalendar,proto3,enum=kappa.HolidayCalendar,oneof" json:"holiday_calendar,omitempty"` // the holiday calendar that applies to this schedule, if any
	ProcessingTime  *durationpb.Duration `protobuf:"bytes,8,opt,name=processing_time,json=processingTime,proto3" json:"processing_time,omitempty"`                                      // the average or expected processing time for each transaction
}

func (x *PaymentGatewayContinuousProcessingSchedule) Reset() {
	*x = PaymentGatewayContinuousProcessingSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentGatewayContinuousProcessingSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentGatewayContinuousProcessingSchedule) ProtoMessage() {}

func (x *PaymentGatewayContinuousProcessingSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentGatewayContinuousProcessingSchedule.ProtoReflect.Descriptor instead.
func (*PaymentGatewayContinuousProcessingSchedule) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *PaymentGatewayContinuousProcessingSchedule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentGatewayContinuousProcessingSchedule) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *PaymentGatewayContinuousProcessingSchedule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentGatewayContinuousProcessingSchedule) GetDirection() PaymentDirection {
	if x != nil {
		return x.Direction
	}
	return PaymentDirection_PAYMENT_DIRECTION_UNSPECIFIED
}

func (x *PaymentGatewayContinuousProcessingSchedule) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *PaymentGatewayContinuousProcessingSchedule) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *PaymentGatewayContinuousProcessingSchedule) GetHolidayCalendar() HolidayCalendar {
	if x != nil && x.HolidayCalendar != nil {
		return *x.HolidayCalendar
	}
	return HolidayCalendar_HOLIDAY_CALENDAR_UNSPECIFIED
}

func (x *PaymentGatewayContinuousProcessingSchedule) GetProcessingTime() *durationpb.Duration {
	if x != nil {
		return x.ProcessingTime
	}
	return nil
}

type PaymentGatewayFixedFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentGatewayId string           `protobuf:"bytes,2,opt,name=payment_gateway_id,json=paymentGatewayId,proto3" json:"payment_gateway_id,omitempty"` // the ID of the payment gateway whose fee this is
	Name             string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                   // human-readable identifier of the fee
	Direction        PaymentDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=kappa.PaymentDirection" json:"direction,omitempty"`            // the payment direction this fee applies to
	Currency         *Currency        `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                                           // the payment currency this fee applies to
	Country          *Country         `protobuf:"bytes,6,opt,name=country,proto3,oneof" json:"country,omitempty"`                                       // the country this fee applies in
	Value            *Amount          `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`                                                 // the fee amount in currency units
}

func (x *PaymentGatewayFixedFee) Reset() {
	*x = PaymentGatewayFixedFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentGatewayFixedFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentGatewayFixedFee) ProtoMessage() {}

func (x *PaymentGatewayFixedFee) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentGatewayFixedFee.ProtoReflect.Descriptor instead.
func (*PaymentGatewayFixedFee) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *PaymentGatewayFixedFee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentGatewayFixedFee) GetPaymentGatewayId() string {
	if x != nil {
		return x.PaymentGatewayId
	}
	return ""
}

func (x *PaymentGatewayFixedFee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentGatewayFixedFee) GetDirection() PaymentDirection {
	if x != nil {
		return x.Direction
	}
	return PaymentDirection_PAYMENT_DIRECTION_UNSPECIFIED
}

func (x *PaymentGatewayFixedFee) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *PaymentGatewayFixedFee) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *PaymentGatewayFixedFee) GetValue() *Amount {
	if x != nil {
		return x.Value
	}
	return nil
}

type PaymentGatewayPercentageFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentGatewayId string           `protobuf:"bytes,2,opt,name=payment_gateway_id,json=paymentGatewayId,proto3" json:"payment_gateway_id,omitempty"` // the ID of the payment gateway whose fee this is
	Name             string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                   // human-readable identifier of the fee
	Direction        PaymentDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=kappa.PaymentDirection" json:"direction,omitempty"`            // the payment direction this fee applies to
	Currency         *Currency        `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                                           //  the payment currency this fee applies to
	Country          *Country         `protobuf:"bytes,6,opt,name=country,proto3,oneof" json:"country,omitempty"`                                       // the country this fee applies in
	Value            float64          `protobuf:"fixed64,7,opt,name=value,proto3" json:"value,omitempty"`                                               // the percentage value of the fee, e.g. 0.05 for 5%
}

func (x *PaymentGatewayPercentageFee) Reset() {
	*x = PaymentGatewayPercentageFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentGatewayPercentageFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentGatewayPercentageFee) ProtoMessage() {}

func (x *PaymentGatewayPercentageFee) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentGatewayPercentageFee.ProtoReflect.Descriptor instead.
func (*PaymentGatewayPercentageFee) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *PaymentGatewayPercentageFee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentGatewayPercentageFee) GetPaymentGatewayId() string {
	if x != nil {
		return x.PaymentGatewayId
	}
	return ""
}

func (x *PaymentGatewayPercentageFee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentGatewayPercentageFee) GetDirection() PaymentDirection {
	if x != nil {
		return x.Direction
	}
	return PaymentDirection_PAYMENT_DIRECTION_UNSPECIFIED
}

func (x *PaymentGatewayPercentageFee) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *PaymentGatewayPercentageFee) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *PaymentGatewayPercentageFee) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PaymentGatewayFeeAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeId   string                `protobuf:"bytes,1,opt,name=fee_id,json=feeId,proto3" json:"fee_id,omitempty"`
	FeeType PaymentGatewayFeeType `protobuf:"varint,2,opt,name=fee_type,json=feeType,proto3,enum=kappa.PaymentGatewayFeeType" json:"fee_type,omitempty"`
	Amount  *Amount               `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"` // fee amount in currency units, dynamically calculated
}

func (x *PaymentGatewayFeeAmount) Reset() {
	*x = PaymentGatewayFeeAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentGatewayFeeAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentGatewayFeeAmount) ProtoMessage() {}

func (x *PaymentGatewayFeeAmount) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentGatewayFeeAmount.ProtoReflect.Descriptor instead.
func (*PaymentGatewayFeeAmount) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *PaymentGatewayFeeAmount) GetFeeId() string {
	if x != nil {
		return x.FeeId
	}
	return ""
}

func (x *PaymentGatewayFeeAmount) GetFeeType() PaymentGatewayFeeType {
	if x != nil {
		return x.FeeType
	}
	return PaymentGatewayFeeType_PAYMENT_GATEWAY_FEE_TYPE_UNSPECIFIED
}

func (x *PaymentGatewayFeeAmount) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type PaymentGatewayFeeSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedFees      []*PaymentGatewayFixedFee      `protobuf:"bytes,1,rep,name=fixed_fees,json=fixedFees,proto3" json:"fixed_fees,omitempty"`
	PercentageFees []*PaymentGatewayPercentageFee `protobuf:"bytes,2,rep,name=percentage_fees,json=percentageFees,proto3" json:"percentage_fees,omitempty"`
}

func (x *PaymentGatewayFeeSchedule) Reset() {
	*x = PaymentGatewayFeeSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentGatewayFeeSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentGatewayFeeSchedule) ProtoMessage() {}

func (x *PaymentGatewayFeeSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_payment_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentGatewayFeeSchedule.ProtoReflect.Descriptor instead.
func (*PaymentGatewayFeeSchedule) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_payment_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *PaymentGatewayFeeSchedule) GetFixedFees() []*PaymentGatewayFixedFee {
	if x != nil {
		return x.FixedFees
	}
	return nil
}

func (x *PaymentGatewayFeeSchedule) GetPercentageFees() []*PaymentGatewayPercentageFee {
	if x != nil {
		return x.PercentageFees
	}
	return nil
}

var File_kappa_common_models_payment_gateway_proto protoreflect.FileDescriptor

var file_kappa_common_models_payment_gateway_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x1a, 0x20, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6b,
	0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01,
	0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6b,
	0x61, 0x70, 0x70, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x2e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x03, 0x0a, 0x25,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x10, 0x68,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x48, 0x01, 0x52,
	0x0f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x22, 0xaf, 0x03, 0x0a, 0x2a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b,
	0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x10, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x48, 0x01, 0x52, 0x0f, 0x68, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x22, 0xae, 0x02, 0x0a, 0x16, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0xa4, 0x02, 0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x17,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x65, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x66, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6,
	0x01, 0x0a, 0x19, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52,
	0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x73, 0x2a, 0xaa, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f,
	0x55, 0x53, 0x10, 0x02, 0x2a, 0x87, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x01, 0x12,
	0x2d, 0x0a, 0x29, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x75,
	0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59,
	0x4f, 0x55, 0x54, 0x10, 0x02, 0x2a, 0x8e, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x24, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x46, 0x45, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x70, 0x61, 0x79, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kappa_common_models_payment_gateway_proto_rawDescOnce sync.Once
	file_kappa_common_models_payment_gateway_proto_rawDescData = file_kappa_common_models_payment_gateway_proto_rawDesc
)

func file_kappa_common_models_payment_gateway_proto_rawDescGZIP() []byte {
	file_kappa_common_models_payment_gateway_proto_rawDescOnce.Do(func() {
		file_kappa_common_models_payment_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_kappa_common_models_payment_gateway_proto_rawDescData)
	})
	return file_kappa_common_models_payment_gateway_proto_rawDescData
}

var file_kappa_common_models_payment_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_kappa_common_models_payment_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_kappa_common_models_payment_gateway_proto_goTypes = []interface{}{
	(PaymentGatewayProcessingType)(0),                  // 0: kappa.PaymentGatewayProcessingType
	(PaymentGatewayType)(0),                            // 1: kappa.PaymentGatewayType
	(PaymentDirection)(0),                              // 2: kappa.PaymentDirection
	(PaymentGatewayFeeType)(0),                         // 3: kappa.PaymentGatewayFeeType
	(*PaymentGateway)(nil),                             // 4: kappa.PaymentGateway
	(*BatchProcessingSchedulePoint)(nil),               // 5: kappa.BatchProcessingSchedulePoint
	(*PaymentGatewayBatchProcessingSchedule)(nil),      // 6: kappa.PaymentGatewayBatchProcessingSchedule
	(*PaymentGatewayContinuousProcessingSchedule)(nil), // 7: kappa.PaymentGatewayContinuousProcessingSchedule
	(*PaymentGatewayFixedFee)(nil),                     // 8: kappa.PaymentGatewayFixedFee
	(*PaymentGatewayPercentageFee)(nil),                // 9: kappa.PaymentGatewayPercentageFee
	(*PaymentGatewayFeeAmount)(nil),                    // 10: kappa.PaymentGatewayFeeAmount
	(*PaymentGatewayFeeSchedule)(nil),                  // 11: kappa.PaymentGatewayFeeSchedule
	(*DayTime)(nil),                                    // 12: kappa.DayTime
	(*Currency)(nil),                                   // 13: kappa.Currency
	(*Country)(nil),                                    // 14: kappa.Country
	(HolidayCalendar)(0),                               // 15: kappa.HolidayCalendar
	(*durationpb.Duration)(nil),                        // 16: google.protobuf.Duration
	(*Amount)(nil),                                     // 17: kappa.Amount
}
var file_kappa_common_models_payment_gateway_proto_depIdxs = []int32{
	1,  // 0: kappa.PaymentGateway.type:type_name -> kappa.PaymentGatewayType
	0,  // 1: kappa.PaymentGateway.processing_type:type_name -> kappa.PaymentGatewayProcessingType
	12, // 2: kappa.BatchProcessingSchedulePoint.cutoff:type_name -> kappa.DayTime
	12, // 3: kappa.BatchProcessingSchedulePoint.completion:type_name -> kappa.DayTime
	2,  // 4: kappa.PaymentGatewayBatchProcessingSchedule.direction:type_name -> kappa.PaymentDirection
	13, // 5: kappa.PaymentGatewayBatchProcessingSchedule.currency:type_name -> kappa.Currency
	14, // 6: kappa.PaymentGatewayBatchProcessingSchedule.country:type_name -> kappa.Country
	15, // 7: kappa.PaymentGatewayBatchProcessingSchedule.holiday_calendar:type_name -> kappa.HolidayCalendar
	5,  // 8: kappa.PaymentGatewayBatchProcessingSchedule.points:type_name -> kappa.BatchProcessingSchedulePoint
	2,  // 9: kappa.PaymentGatewayContinuousProcessingSchedule.direction:type_name -> kappa.PaymentDirection
	13, // 10: kappa.PaymentGatewayContinuousProcessingSchedule.currency:type_name -> kappa.Currency
	14, // 11: kappa.PaymentGatewayContinuousProcessingSchedule.country:type_name -> kappa.Country
	15, // 12: kappa.PaymentGatewayContinuousProcessingSchedule.holiday_calendar:type_name -> kappa.HolidayCalendar
	16, // 13: kappa.PaymentGatewayContinuousProcessingSchedule.processing_time:type_name -> google.protobuf.Duration
	2,  // 14: kappa.PaymentGatewayFixedFee.direction:type_name -> kappa.PaymentDirection
	13, // 15: kappa.PaymentGatewayFixedFee.currency:type_name -> kappa.Currency
	14, // 16: kappa.PaymentGatewayFixedFee.country:type_name -> kappa.Country
	17, // 17: kappa.PaymentGatewayFixedFee.value:type_name -> kappa.Amount
	2,  // 18: kappa.PaymentGatewayPercentageFee.direction:type_name -> kappa.PaymentDirection
	13, // 19: kappa.PaymentGatewayPercentageFee.currency:type_name -> kappa.Currency
	14, // 20: kappa.PaymentGatewayPercentageFee.country:type_name -> kappa.Country
	3,  // 21: kappa.PaymentGatewayFeeAmount.fee_type:type_name -> kappa.PaymentGatewayFeeType
	17, // 22: kappa.PaymentGatewayFeeAmount.amount:type_name -> kappa.Amount
	8,  // 23: kappa.PaymentGatewayFeeSchedule.fixed_fees:type_name -> kappa.PaymentGatewayFixedFee
	9,  // 24: kappa.PaymentGatewayFeeSchedule.percentage_fees:type_name -> kappa.PaymentGatewayPercentageFee
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_kappa_common_models_payment_gateway_proto_init() }
func file_kappa_common_models_payment_gateway_proto_init() {
	if File_kappa_common_models_payment_gateway_proto != nil {
		return
	}
	file_kappa_common_models_amount_proto_init()
	file_kappa_common_models_configuration_proto_init()
	file_kappa_common_models_time_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kappa_common_models_payment_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_payment_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProcessingSchedulePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_payment_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentGatewayBatchProcessingSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_payment_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentGatewayContinuousProcessingSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_payment_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentGatewayFixedFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_payment_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentGatewayPercentageFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_payment_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentGatewayFeeAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_payment_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentGatewayFeeSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kappa_common_models_payment_gateway_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_kappa_common_models_payment_gateway_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_kappa_common_models_payment_gateway_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_kappa_common_models_payment_gateway_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kappa_common_models_payment_gateway_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kappa_common_models_payment_gateway_proto_goTypes,
		DependencyIndexes: file_kappa_common_models_payment_gateway_proto_depIdxs,
		EnumInfos:         file_kappa_common_models_payment_gateway_proto_enumTypes,
		MessageInfos:      file_kappa_common_models_payment_gateway_proto_msgTypes,
	}.Build()
	File_kappa_common_models_payment_gateway_proto = out.File
	file_kappa_common_models_payment_gateway_proto_rawDesc = nil
	file_kappa_common_models_payment_gateway_proto_goTypes = nil
	file_kappa_common_models_payment_gateway_proto_depIdxs = nil
}
