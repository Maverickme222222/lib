// ------------------------------------------------------------------------------
// <copyright company="Kappa Pay Inc.">
// Copyright (C) Kappa Pay Inc.  All rights reserved.
// Unauthorised copying of this file, via any medium, is strictly prohibited.
// Proprietary and confidential
// </copyright>
// <author>Shashank A</author>
// ------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: kappa/common/models/servicing_fees.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServicingFeeType int32

const (
	ServicingFeeType_SERVICING_FEE_TYPE_UNSPECIFIED ServicingFeeType = 0
	ServicingFeeType_SERVICING_FEE_TYPE_FIXED       ServicingFeeType = 1
	ServicingFeeType_SERVICING_FEE_TYPE_PERCENTAGE  ServicingFeeType = 2
)

// Enum value maps for ServicingFeeType.
var (
	ServicingFeeType_name = map[int32]string{
		0: "SERVICING_FEE_TYPE_UNSPECIFIED",
		1: "SERVICING_FEE_TYPE_FIXED",
		2: "SERVICING_FEE_TYPE_PERCENTAGE",
	}
	ServicingFeeType_value = map[string]int32{
		"SERVICING_FEE_TYPE_UNSPECIFIED": 0,
		"SERVICING_FEE_TYPE_FIXED":       1,
		"SERVICING_FEE_TYPE_PERCENTAGE":  2,
	}
)

func (x ServicingFeeType) Enum() *ServicingFeeType {
	p := new(ServicingFeeType)
	*p = x
	return p
}

func (x ServicingFeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicingFeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_servicing_fees_proto_enumTypes[0].Descriptor()
}

func (ServicingFeeType) Type() protoreflect.EnumType {
	return &file_kappa_common_models_servicing_fees_proto_enumTypes[0]
}

func (x ServicingFeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicingFeeType.Descriptor instead.
func (ServicingFeeType) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_servicing_fees_proto_rawDescGZIP(), []int{0}
}

type ServicingFixedFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EntityId            string          `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`                                                  // the ID of the Kappa entity that charges thi
	Name                string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                          // human-readable name for the fee
	SourceCurrency      *Currency       `protobuf:"bytes,4,opt,name=source_currency,json=sourceCurrency,proto3" json:"source_currency,omitempty"`                                // the currency of the transaction source
	DestinationType     DestinationType `protobuf:"varint,5,opt,name=destination_type,json=destinationType,proto3,enum=kappa.DestinationType" json:"destination_type,omitempty"` // the type of the transaction destination
	DestinationCurrency *Currency       `protobuf:"bytes,6,opt,name=destination_currency,json=destinationCurrency,proto3" json:"destination_currency,omitempty"`                 // the currency of the transaction destination
	DestinationDomicile *Country        `protobuf:"bytes,7,opt,name=destination_domicile,json=destinationDomicile,proto3" json:"destination_domicile,omitempty"`                 // the domicile of the transaction destination
	Value               *Amount         `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`                                                                        // the fee in currency units
}

func (x *ServicingFixedFee) Reset() {
	*x = ServicingFixedFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_servicing_fees_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicingFixedFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicingFixedFee) ProtoMessage() {}

func (x *ServicingFixedFee) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_servicing_fees_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicingFixedFee.ProtoReflect.Descriptor instead.
func (*ServicingFixedFee) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_servicing_fees_proto_rawDescGZIP(), []int{0}
}

func (x *ServicingFixedFee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServicingFixedFee) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ServicingFixedFee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServicingFixedFee) GetSourceCurrency() *Currency {
	if x != nil {
		return x.SourceCurrency
	}
	return nil
}

func (x *ServicingFixedFee) GetDestinationType() DestinationType {
	if x != nil {
		return x.DestinationType
	}
	return DestinationType_DESTINATION_TYPE_UNSPECIFIED
}

func (x *ServicingFixedFee) GetDestinationCurrency() *Currency {
	if x != nil {
		return x.DestinationCurrency
	}
	return nil
}

func (x *ServicingFixedFee) GetDestinationDomicile() *Country {
	if x != nil {
		return x.DestinationDomicile
	}
	return nil
}

func (x *ServicingFixedFee) GetValue() *Amount {
	if x != nil {
		return x.Value
	}
	return nil
}

type ServicingPercentageFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EntityId            string          `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`                                                  // the ID of the Kappa entity that charges thi
	Name                string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                          // human-readable name for the fee
	SourceCurrency      *Currency       `protobuf:"bytes,4,opt,name=source_currency,json=sourceCurrency,proto3" json:"source_currency,omitempty"`                                // the currency of the transaction source
	DestinationType     DestinationType `protobuf:"varint,5,opt,name=destination_type,json=destinationType,proto3,enum=kappa.DestinationType" json:"destination_type,omitempty"` // the type of the transaction destination
	DestinationCurrency *Currency       `protobuf:"bytes,6,opt,name=destination_currency,json=destinationCurrency,proto3" json:"destination_currency,omitempty"`                 // the currency of the transaction destination
	DestinationDomicile *Country        `protobuf:"bytes,7,opt,name=destination_domicile,json=destinationDomicile,proto3" json:"destination_domicile,omitempty"`                 // the domicile of the transaction destination
	Value               float64         `protobuf:"fixed64,8,opt,name=value,proto3" json:"value,omitempty"`                                                                      // the percentage value of the fee, e.g. 0.05 for 5%
}

func (x *ServicingPercentageFee) Reset() {
	*x = ServicingPercentageFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_servicing_fees_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicingPercentageFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicingPercentageFee) ProtoMessage() {}

func (x *ServicingPercentageFee) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_servicing_fees_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicingPercentageFee.ProtoReflect.Descriptor instead.
func (*ServicingPercentageFee) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_servicing_fees_proto_rawDescGZIP(), []int{1}
}

func (x *ServicingPercentageFee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServicingPercentageFee) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ServicingPercentageFee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServicingPercentageFee) GetSourceCurrency() *Currency {
	if x != nil {
		return x.SourceCurrency
	}
	return nil
}

func (x *ServicingPercentageFee) GetDestinationType() DestinationType {
	if x != nil {
		return x.DestinationType
	}
	return DestinationType_DESTINATION_TYPE_UNSPECIFIED
}

func (x *ServicingPercentageFee) GetDestinationCurrency() *Currency {
	if x != nil {
		return x.DestinationCurrency
	}
	return nil
}

func (x *ServicingPercentageFee) GetDestinationDomicile() *Country {
	if x != nil {
		return x.DestinationDomicile
	}
	return nil
}

func (x *ServicingPercentageFee) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ServicingFeeSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedFees      []*ServicingFixedFee      `protobuf:"bytes,1,rep,name=fixed_fees,json=fixedFees,proto3" json:"fixed_fees,omitempty"`
	PercentageFees []*ServicingPercentageFee `protobuf:"bytes,2,rep,name=percentage_fees,json=percentageFees,proto3" json:"percentage_fees,omitempty"`
}

func (x *ServicingFeeSchedule) Reset() {
	*x = ServicingFeeSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_servicing_fees_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicingFeeSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicingFeeSchedule) ProtoMessage() {}

func (x *ServicingFeeSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_servicing_fees_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicingFeeSchedule.ProtoReflect.Descriptor instead.
func (*ServicingFeeSchedule) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_servicing_fees_proto_rawDescGZIP(), []int{2}
}

func (x *ServicingFeeSchedule) GetFixedFees() []*ServicingFixedFee {
	if x != nil {
		return x.FixedFees
	}
	return nil
}

func (x *ServicingFeeSchedule) GetPercentageFees() []*ServicingPercentageFee {
	if x != nil {
		return x.PercentageFees
	}
	return nil
}

type ServicingFeeAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeId   string           `protobuf:"bytes,1,opt,name=fee_id,json=feeId,proto3" json:"fee_id,omitempty"` // the ID of the fee this is an instance of
	FeeType ServicingFeeType `protobuf:"varint,2,opt,name=fee_type,json=feeType,proto3,enum=kappa.ServicingFeeType" json:"fee_type,omitempty"`
	Amount  *Amount          `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"` // fee amount in currency units, dynamically calculated
}

func (x *ServicingFeeAmount) Reset() {
	*x = ServicingFeeAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_servicing_fees_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicingFeeAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicingFeeAmount) ProtoMessage() {}

func (x *ServicingFeeAmount) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_servicing_fees_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicingFeeAmount.ProtoReflect.Descriptor instead.
func (*ServicingFeeAmount) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_servicing_fees_proto_rawDescGZIP(), []int{3}
}

func (x *ServicingFeeAmount) GetFeeId() string {
	if x != nil {
		return x.FeeId
	}
	return ""
}

func (x *ServicingFeeAmount) GetFeeType() ServicingFeeType {
	if x != nil {
		return x.FeeType
	}
	return ServicingFeeType_SERVICING_FEE_TYPE_UNSPECIFIED
}

func (x *ServicingFeeAmount) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

var File_kappa_common_models_servicing_fees_proto protoreflect.FileDescriptor

var file_kappa_common_models_servicing_fees_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x1a, 0x20, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x14, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63,
	0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xf3, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x14,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x41, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x69, 0x63,
	0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65,
	0x52, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x46, 0x65, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46,
	0x65, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x65,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x65, 0x65, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x77, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x70, 0x61, 0x79, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x73, 0x72, 0x63, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kappa_common_models_servicing_fees_proto_rawDescOnce sync.Once
	file_kappa_common_models_servicing_fees_proto_rawDescData = file_kappa_common_models_servicing_fees_proto_rawDesc
)

func file_kappa_common_models_servicing_fees_proto_rawDescGZIP() []byte {
	file_kappa_common_models_servicing_fees_proto_rawDescOnce.Do(func() {
		file_kappa_common_models_servicing_fees_proto_rawDescData = protoimpl.X.CompressGZIP(file_kappa_common_models_servicing_fees_proto_rawDescData)
	})
	return file_kappa_common_models_servicing_fees_proto_rawDescData
}

var file_kappa_common_models_servicing_fees_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kappa_common_models_servicing_fees_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kappa_common_models_servicing_fees_proto_goTypes = []interface{}{
	(ServicingFeeType)(0),          // 0: kappa.ServicingFeeType
	(*ServicingFixedFee)(nil),      // 1: kappa.ServicingFixedFee
	(*ServicingPercentageFee)(nil), // 2: kappa.ServicingPercentageFee
	(*ServicingFeeSchedule)(nil),   // 3: kappa.ServicingFeeSchedule
	(*ServicingFeeAmount)(nil),     // 4: kappa.ServicingFeeAmount
	(*Currency)(nil),               // 5: kappa.Currency
	(DestinationType)(0),           // 6: kappa.DestinationType
	(*Country)(nil),                // 7: kappa.Country
	(*Amount)(nil),                 // 8: kappa.Amount
}
var file_kappa_common_models_servicing_fees_proto_depIdxs = []int32{
	5,  // 0: kappa.ServicingFixedFee.source_currency:type_name -> kappa.Currency
	6,  // 1: kappa.ServicingFixedFee.destination_type:type_name -> kappa.DestinationType
	5,  // 2: kappa.ServicingFixedFee.destination_currency:type_name -> kappa.Currency
	7,  // 3: kappa.ServicingFixedFee.destination_domicile:type_name -> kappa.Country
	8,  // 4: kappa.ServicingFixedFee.value:type_name -> kappa.Amount
	5,  // 5: kappa.ServicingPercentageFee.source_currency:type_name -> kappa.Currency
	6,  // 6: kappa.ServicingPercentageFee.destination_type:type_name -> kappa.DestinationType
	5,  // 7: kappa.ServicingPercentageFee.destination_currency:type_name -> kappa.Currency
	7,  // 8: kappa.ServicingPercentageFee.destination_domicile:type_name -> kappa.Country
	1,  // 9: kappa.ServicingFeeSchedule.fixed_fees:type_name -> kappa.ServicingFixedFee
	2,  // 10: kappa.ServicingFeeSchedule.percentage_fees:type_name -> kappa.ServicingPercentageFee
	0,  // 11: kappa.ServicingFeeAmount.fee_type:type_name -> kappa.ServicingFeeType
	8,  // 12: kappa.ServicingFeeAmount.amount:type_name -> kappa.Amount
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_kappa_common_models_servicing_fees_proto_init() }
func file_kappa_common_models_servicing_fees_proto_init() {
	if File_kappa_common_models_servicing_fees_proto != nil {
		return
	}
	file_kappa_common_models_amount_proto_init()
	file_kappa_common_models_configuration_proto_init()
	file_kappa_common_models_destination_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kappa_common_models_servicing_fees_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicingFixedFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_servicing_fees_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicingPercentageFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_servicing_fees_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicingFeeSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_servicing_fees_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicingFeeAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kappa_common_models_servicing_fees_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kappa_common_models_servicing_fees_proto_goTypes,
		DependencyIndexes: file_kappa_common_models_servicing_fees_proto_depIdxs,
		EnumInfos:         file_kappa_common_models_servicing_fees_proto_enumTypes,
		MessageInfos:      file_kappa_common_models_servicing_fees_proto_msgTypes,
	}.Build()
	File_kappa_common_models_servicing_fees_proto = out.File
	file_kappa_common_models_servicing_fees_proto_rawDesc = nil
	file_kappa_common_models_servicing_fees_proto_goTypes = nil
	file_kappa_common_models_servicing_fees_proto_depIdxs = nil
}
