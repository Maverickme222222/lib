// ------------------------------------------------------------------------------
// <copyright company="Kappa Pay Inc.">
// Copyright (C) Kappa Pay Inc.  All rights reserved.
// Unauthorised copying of this file, via any medium, is strictly prohibited.
// Proprietary and confidential
// </copyright>
// <author>Andreas Fragner</author>
// ------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: kappa/common/models/limit.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LimitTimeInterval int32

const (
	LimitTimeInterval_LIMIT_TIME_INTERVAL_UNSPECIFIED LimitTimeInterval = 0
	LimitTimeInterval_LIMIT_TIME_INTERVAL_24_HOURS    LimitTimeInterval = 1
	LimitTimeInterval_LIMIT_TIME_INTERVAL_30_DAYS     LimitTimeInterval = 2
)

// Enum value maps for LimitTimeInterval.
var (
	LimitTimeInterval_name = map[int32]string{
		0: "LIMIT_TIME_INTERVAL_UNSPECIFIED",
		1: "LIMIT_TIME_INTERVAL_24_HOURS",
		2: "LIMIT_TIME_INTERVAL_30_DAYS",
	}
	LimitTimeInterval_value = map[string]int32{
		"LIMIT_TIME_INTERVAL_UNSPECIFIED": 0,
		"LIMIT_TIME_INTERVAL_24_HOURS":    1,
		"LIMIT_TIME_INTERVAL_30_DAYS":     2,
	}
)

func (x LimitTimeInterval) Enum() *LimitTimeInterval {
	p := new(LimitTimeInterval)
	*p = x
	return p
}

func (x LimitTimeInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitTimeInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_limit_proto_enumTypes[0].Descriptor()
}

func (LimitTimeInterval) Type() protoreflect.EnumType {
	return &file_kappa_common_models_limit_proto_enumTypes[0]
}

func (x LimitTimeInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimitTimeInterval.Descriptor instead.
func (LimitTimeInterval) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_limit_proto_rawDescGZIP(), []int{0}
}

type LimitAggregator int32

const (
	LimitAggregator_LIMIT_AGGREGATOR_UNSPECIFIED LimitAggregator = 0
	LimitAggregator_LIMIT_AGGREGATOR_POINT       LimitAggregator = 1 // single value, no aggregation
	LimitAggregator_LIMIT_AGGREGATOR_SUM         LimitAggregator = 2 // sum over given time interval
)

// Enum value maps for LimitAggregator.
var (
	LimitAggregator_name = map[int32]string{
		0: "LIMIT_AGGREGATOR_UNSPECIFIED",
		1: "LIMIT_AGGREGATOR_POINT",
		2: "LIMIT_AGGREGATOR_SUM",
	}
	LimitAggregator_value = map[string]int32{
		"LIMIT_AGGREGATOR_UNSPECIFIED": 0,
		"LIMIT_AGGREGATOR_POINT":       1,
		"LIMIT_AGGREGATOR_SUM":         2,
	}
)

func (x LimitAggregator) Enum() *LimitAggregator {
	p := new(LimitAggregator)
	*p = x
	return p
}

func (x LimitAggregator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitAggregator) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_limit_proto_enumTypes[1].Descriptor()
}

func (LimitAggregator) Type() protoreflect.EnumType {
	return &file_kappa_common_models_limit_proto_enumTypes[1]
}

func (x LimitAggregator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimitAggregator.Descriptor instead.
func (LimitAggregator) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_limit_proto_rawDescGZIP(), []int{1}
}

type LimitStatus int32

const (
	LimitStatus_LIMIT_STATUS_UNSPECIFIED LimitStatus = 0
	LimitStatus_LIMIT_STATUS_ACTIVE      LimitStatus = 1
	LimitStatus_LIMIT_STATUS_INACTIVE    LimitStatus = 2
)

// Enum value maps for LimitStatus.
var (
	LimitStatus_name = map[int32]string{
		0: "LIMIT_STATUS_UNSPECIFIED",
		1: "LIMIT_STATUS_ACTIVE",
		2: "LIMIT_STATUS_INACTIVE",
	}
	LimitStatus_value = map[string]int32{
		"LIMIT_STATUS_UNSPECIFIED": 0,
		"LIMIT_STATUS_ACTIVE":      1,
		"LIMIT_STATUS_INACTIVE":    2,
	}
)

func (x LimitStatus) Enum() *LimitStatus {
	p := new(LimitStatus)
	*p = x
	return p
}

func (x LimitStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_limit_proto_enumTypes[2].Descriptor()
}

func (LimitStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_limit_proto_enumTypes[2]
}

func (x LimitStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimitStatus.Descriptor instead.
func (LimitStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_limit_proto_rawDescGZIP(), []int{2}
}

type DefaultLimitStatus int32

const (
	DefaultLimitStatus_DEFAULT_LIMIT_STATUS_UNSPECIFIED DefaultLimitStatus = 0
	DefaultLimitStatus_DEFAULT_LIMIT_STATUS_ACTIVE      DefaultLimitStatus = 1
	DefaultLimitStatus_DEFAULT_LIMIT_STATUS_INACTIVE    DefaultLimitStatus = 2
)

// Enum value maps for DefaultLimitStatus.
var (
	DefaultLimitStatus_name = map[int32]string{
		0: "DEFAULT_LIMIT_STATUS_UNSPECIFIED",
		1: "DEFAULT_LIMIT_STATUS_ACTIVE",
		2: "DEFAULT_LIMIT_STATUS_INACTIVE",
	}
	DefaultLimitStatus_value = map[string]int32{
		"DEFAULT_LIMIT_STATUS_UNSPECIFIED": 0,
		"DEFAULT_LIMIT_STATUS_ACTIVE":      1,
		"DEFAULT_LIMIT_STATUS_INACTIVE":    2,
	}
)

func (x DefaultLimitStatus) Enum() *DefaultLimitStatus {
	p := new(DefaultLimitStatus)
	*p = x
	return p
}

func (x DefaultLimitStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefaultLimitStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_limit_proto_enumTypes[3].Descriptor()
}

func (DefaultLimitStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_limit_proto_enumTypes[3]
}

func (x DefaultLimitStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefaultLimitStatus.Descriptor instead.
func (DefaultLimitStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_limit_proto_rawDescGZIP(), []int{3}
}

type Limit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status          LimitStatus            `protobuf:"varint,2,opt,name=status,proto3,enum=kappa.LimitStatus" json:"status,omitempty"`
	EntityId        string                 `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`                                                  // the entity this limit applies to
	TransactionType TransactionType        `protobuf:"varint,4,opt,name=transaction_type,json=transactionType,proto3,enum=kappa.TransactionType" json:"transaction_type,omitempty"` // the type of transaction this limit applies to
	SourceType      SourceType             `protobuf:"varint,5,opt,name=source_type,json=sourceType,proto3,enum=kappa.SourceType" json:"source_type,omitempty"`                     // the type of source this limit applies to
	TimeInterval    LimitTimeInterval      `protobuf:"varint,6,opt,name=time_interval,json=timeInterval,proto3,enum=kappa.LimitTimeInterval" json:"time_interval,omitempty"`        // the time interval for aggregation. May be unspecified if the aggregator is POINT
	Aggregator      LimitAggregator        `protobuf:"varint,7,opt,name=aggregator,proto3,enum=kappa.LimitAggregator" json:"aggregator,omitempty"`                                  // the aggregation function
	Value           *Amount                `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`                                                                        // the value of the limit in currency units
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Remaining       *Amount                `protobuf:"bytes,12,opt,name=remaining,proto3,oneof" json:"remaining,omitempty"` // optional field to calculate remaining limit amount
}

func (x *Limit) Reset() {
	*x = Limit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_limit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limit) ProtoMessage() {}

func (x *Limit) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_limit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limit.ProtoReflect.Descriptor instead.
func (*Limit) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_limit_proto_rawDescGZIP(), []int{0}
}

func (x *Limit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Limit) GetStatus() LimitStatus {
	if x != nil {
		return x.Status
	}
	return LimitStatus_LIMIT_STATUS_UNSPECIFIED
}

func (x *Limit) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *Limit) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *Limit) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *Limit) GetTimeInterval() LimitTimeInterval {
	if x != nil {
		return x.TimeInterval
	}
	return LimitTimeInterval_LIMIT_TIME_INTERVAL_UNSPECIFIED
}

func (x *Limit) GetAggregator() LimitAggregator {
	if x != nil {
		return x.Aggregator
	}
	return LimitAggregator_LIMIT_AGGREGATOR_UNSPECIFIED
}

func (x *Limit) GetValue() *Amount {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Limit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Limit) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Limit) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Limit) GetRemaining() *Amount {
	if x != nil {
		return x.Remaining
	}
	return nil
}

type DefaultLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status          DefaultLimitStatus     `protobuf:"varint,3,opt,name=status,proto3,enum=kappa.DefaultLimitStatus" json:"status,omitempty"`
	EntityType      EntityType             `protobuf:"varint,4,opt,name=entity_type,json=entityType,proto3,enum=kappa.EntityType" json:"entity_type,omitempty"`
	EntityDomicile  *Country               `protobuf:"bytes,5,opt,name=entity_domicile,json=entityDomicile,proto3" json:"entity_domicile,omitempty"`
	TransactionType TransactionType        `protobuf:"varint,6,opt,name=transaction_type,json=transactionType,proto3,enum=kappa.TransactionType" json:"transaction_type,omitempty"`
	SourceType      SourceType             `protobuf:"varint,7,opt,name=source_type,json=sourceType,proto3,enum=kappa.SourceType" json:"source_type,omitempty"`
	TimeInterval    LimitTimeInterval      `protobuf:"varint,8,opt,name=time_interval,json=timeInterval,proto3,enum=kappa.LimitTimeInterval" json:"time_interval,omitempty"`
	Aggregator      LimitAggregator        `protobuf:"varint,9,opt,name=aggregator,proto3,enum=kappa.LimitAggregator" json:"aggregator,omitempty"`
	Value           *Amount                `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *DefaultLimit) Reset() {
	*x = DefaultLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_limit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultLimit) ProtoMessage() {}

func (x *DefaultLimit) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_limit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultLimit.ProtoReflect.Descriptor instead.
func (*DefaultLimit) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_limit_proto_rawDescGZIP(), []int{1}
}

func (x *DefaultLimit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DefaultLimit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DefaultLimit) GetStatus() DefaultLimitStatus {
	if x != nil {
		return x.Status
	}
	return DefaultLimitStatus_DEFAULT_LIMIT_STATUS_UNSPECIFIED
}

func (x *DefaultLimit) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_ENTITY_TYPE_UNSPECIFIED
}

func (x *DefaultLimit) GetEntityDomicile() *Country {
	if x != nil {
		return x.EntityDomicile
	}
	return nil
}

func (x *DefaultLimit) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *DefaultLimit) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *DefaultLimit) GetTimeInterval() LimitTimeInterval {
	if x != nil {
		return x.TimeInterval
	}
	return LimitTimeInterval_LIMIT_TIME_INTERVAL_UNSPECIFIED
}

func (x *DefaultLimit) GetAggregator() LimitAggregator {
	if x != nil {
		return x.Aggregator
	}
	return LimitAggregator_LIMIT_AGGREGATOR_UNSPECIFIED
}

func (x *DefaultLimit) GetValue() *Amount {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DefaultLimit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DefaultLimit) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DefaultLimit) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type LimitsFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTypes []TransactionType `protobuf:"varint,1,rep,packed,name=transaction_types,json=transactionTypes,proto3,enum=kappa.TransactionType" json:"transaction_types,omitempty"`
	SourceTypes      []SourceType      `protobuf:"varint,2,rep,packed,name=source_types,json=sourceTypes,proto3,enum=kappa.SourceType" json:"source_types,omitempty"`
	BindingOnly      bool              `protobuf:"varint,3,opt,name=binding_only,json=bindingOnly,proto3" json:"binding_only,omitempty"`
}

func (x *LimitsFilters) Reset() {
	*x = LimitsFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_limit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitsFilters) ProtoMessage() {}

func (x *LimitsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_limit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitsFilters.ProtoReflect.Descriptor instead.
func (*LimitsFilters) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_limit_proto_rawDescGZIP(), []int{2}
}

func (x *LimitsFilters) GetTransactionTypes() []TransactionType {
	if x != nil {
		return x.TransactionTypes
	}
	return nil
}

func (x *LimitsFilters) GetSourceTypes() []SourceType {
	if x != nil {
		return x.SourceTypes
	}
	return nil
}

func (x *LimitsFilters) GetBindingOnly() bool {
	if x != nil {
		return x.BindingOnly
	}
	return false
}

var File_kappa_common_models_limit_proto protoreflect.FileDescriptor

var file_kappa_common_models_limit_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6b, 0x61, 0x70, 0x70, 0x61,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x04, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x36, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x96, 0x05,
	0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69,
	0x6c, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b,
	0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b,
	0x61, 0x70, 0x70, 0x61, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x2a, 0x7b, 0x0a, 0x11, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x1f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x32, 0x34, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x33, 0x30, 0x5f, 0x44, 0x41, 0x59,
	0x53, 0x10, 0x02, 0x2a, 0x69, 0x0a, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x02, 0x2a, 0x5f,
	0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x18, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a,
	0x7e, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x42,
	0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x70, 0x61, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6c,
	0x69, 0x62, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kappa_common_models_limit_proto_rawDescOnce sync.Once
	file_kappa_common_models_limit_proto_rawDescData = file_kappa_common_models_limit_proto_rawDesc
)

func file_kappa_common_models_limit_proto_rawDescGZIP() []byte {
	file_kappa_common_models_limit_proto_rawDescOnce.Do(func() {
		file_kappa_common_models_limit_proto_rawDescData = protoimpl.X.CompressGZIP(file_kappa_common_models_limit_proto_rawDescData)
	})
	return file_kappa_common_models_limit_proto_rawDescData
}

var file_kappa_common_models_limit_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_kappa_common_models_limit_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kappa_common_models_limit_proto_goTypes = []interface{}{
	(LimitTimeInterval)(0),        // 0: kappa.LimitTimeInterval
	(LimitAggregator)(0),          // 1: kappa.LimitAggregator
	(LimitStatus)(0),              // 2: kappa.LimitStatus
	(DefaultLimitStatus)(0),       // 3: kappa.DefaultLimitStatus
	(*Limit)(nil),                 // 4: kappa.Limit
	(*DefaultLimit)(nil),          // 5: kappa.DefaultLimit
	(*LimitsFilters)(nil),         // 6: kappa.LimitsFilters
	(TransactionType)(0),          // 7: kappa.TransactionType
	(SourceType)(0),               // 8: kappa.SourceType
	(*Amount)(nil),                // 9: kappa.Amount
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(EntityType)(0),               // 11: kappa.EntityType
	(*Country)(nil),               // 12: kappa.Country
}
var file_kappa_common_models_limit_proto_depIdxs = []int32{
	2,  // 0: kappa.Limit.status:type_name -> kappa.LimitStatus
	7,  // 1: kappa.Limit.transaction_type:type_name -> kappa.TransactionType
	8,  // 2: kappa.Limit.source_type:type_name -> kappa.SourceType
	0,  // 3: kappa.Limit.time_interval:type_name -> kappa.LimitTimeInterval
	1,  // 4: kappa.Limit.aggregator:type_name -> kappa.LimitAggregator
	9,  // 5: kappa.Limit.value:type_name -> kappa.Amount
	10, // 6: kappa.Limit.created_at:type_name -> google.protobuf.Timestamp
	10, // 7: kappa.Limit.updated_at:type_name -> google.protobuf.Timestamp
	10, // 8: kappa.Limit.deleted_at:type_name -> google.protobuf.Timestamp
	9,  // 9: kappa.Limit.remaining:type_name -> kappa.Amount
	3,  // 10: kappa.DefaultLimit.status:type_name -> kappa.DefaultLimitStatus
	11, // 11: kappa.DefaultLimit.entity_type:type_name -> kappa.EntityType
	12, // 12: kappa.DefaultLimit.entity_domicile:type_name -> kappa.Country
	7,  // 13: kappa.DefaultLimit.transaction_type:type_name -> kappa.TransactionType
	8,  // 14: kappa.DefaultLimit.source_type:type_name -> kappa.SourceType
	0,  // 15: kappa.DefaultLimit.time_interval:type_name -> kappa.LimitTimeInterval
	1,  // 16: kappa.DefaultLimit.aggregator:type_name -> kappa.LimitAggregator
	9,  // 17: kappa.DefaultLimit.value:type_name -> kappa.Amount
	10, // 18: kappa.DefaultLimit.created_at:type_name -> google.protobuf.Timestamp
	10, // 19: kappa.DefaultLimit.updated_at:type_name -> google.protobuf.Timestamp
	10, // 20: kappa.DefaultLimit.deleted_at:type_name -> google.protobuf.Timestamp
	7,  // 21: kappa.LimitsFilters.transaction_types:type_name -> kappa.TransactionType
	8,  // 22: kappa.LimitsFilters.source_types:type_name -> kappa.SourceType
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_kappa_common_models_limit_proto_init() }
func file_kappa_common_models_limit_proto_init() {
	if File_kappa_common_models_limit_proto != nil {
		return
	}
	file_kappa_common_models_amount_proto_init()
	file_kappa_common_models_configuration_proto_init()
	file_kappa_common_models_entities_proto_init()
	file_kappa_common_models_source_proto_init()
	file_kappa_common_models_transaction_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kappa_common_models_limit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_limit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_limit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitsFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kappa_common_models_limit_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kappa_common_models_limit_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kappa_common_models_limit_proto_goTypes,
		DependencyIndexes: file_kappa_common_models_limit_proto_depIdxs,
		EnumInfos:         file_kappa_common_models_limit_proto_enumTypes,
		MessageInfos:      file_kappa_common_models_limit_proto_msgTypes,
	}.Build()
	File_kappa_common_models_limit_proto = out.File
	file_kappa_common_models_limit_proto_rawDesc = nil
	file_kappa_common_models_limit_proto_goTypes = nil
	file_kappa_common_models_limit_proto_depIdxs = nil
}
