// ------------------------------------------------------------------------------
// <copyright company="Kappa Pay Inc.">
// Copyright (C) Kappa Pay Inc.  All rights reserved.
// Unauthorised copying of this file, via any medium, is strictly prohibited.
// Proprietary and confidential
// </copyright>
// <author>Shashank A</author>
// ------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: kappa/common/models/processing_fees.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcessingFeeType int32

const (
	ProcessingFeeType_PROCESSING_FEE_TYPE_UNSPECIFIED ProcessingFeeType = 0
	ProcessingFeeType_PROCESSING_FEE_TYPE_FIXED       ProcessingFeeType = 1
	ProcessingFeeType_PROCESSING_FEE_TYPE_PERCENTAGE  ProcessingFeeType = 2
)

// Enum value maps for ProcessingFeeType.
var (
	ProcessingFeeType_name = map[int32]string{
		0: "PROCESSING_FEE_TYPE_UNSPECIFIED",
		1: "PROCESSING_FEE_TYPE_FIXED",
		2: "PROCESSING_FEE_TYPE_PERCENTAGE",
	}
	ProcessingFeeType_value = map[string]int32{
		"PROCESSING_FEE_TYPE_UNSPECIFIED": 0,
		"PROCESSING_FEE_TYPE_FIXED":       1,
		"PROCESSING_FEE_TYPE_PERCENTAGE":  2,
	}
)

func (x ProcessingFeeType) Enum() *ProcessingFeeType {
	p := new(ProcessingFeeType)
	*p = x
	return p
}

func (x ProcessingFeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessingFeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_processing_fees_proto_enumTypes[0].Descriptor()
}

func (ProcessingFeeType) Type() protoreflect.EnumType {
	return &file_kappa_common_models_processing_fees_proto_enumTypes[0]
}

func (x ProcessingFeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessingFeeType.Descriptor instead.
func (ProcessingFeeType) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_processing_fees_proto_rawDescGZIP(), []int{0}
}

type ProcessingFixedFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EntityId            string          `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`                                                  // the ID of the Kappa entity that charges thi
	Name                string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                          // human-readable name for the fee
	SourceType          SourceType      `protobuf:"varint,4,opt,name=source_type,json=sourceType,proto3,enum=kappa.SourceType" json:"source_type,omitempty"`                     // the type of the transaction source
	SourceCurrency      *Currency       `protobuf:"bytes,5,opt,name=source_currency,json=sourceCurrency,proto3" json:"source_currency,omitempty"`                                // the currency of the transaction source
	SourceDomicile      *Country        `protobuf:"bytes,6,opt,name=source_domicile,json=sourceDomicile,proto3" json:"source_domicile,omitempty"`                                // the domicile of the transaction source
	DestinationType     DestinationType `protobuf:"varint,7,opt,name=destination_type,json=destinationType,proto3,enum=kappa.DestinationType" json:"destination_type,omitempty"` // the type of the transaction destination
	DestinationCurrency *Currency       `protobuf:"bytes,8,opt,name=destination_currency,json=destinationCurrency,proto3" json:"destination_currency,omitempty"`                 // the currency of the transaction destination
	DestinationDomicile *Country        `protobuf:"bytes,9,opt,name=destination_domicile,json=destinationDomicile,proto3" json:"destination_domicile,omitempty"`                 // the domicile of the transaction destination
	Value               *Amount         `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`                                                                       // the fee in currency units
}

func (x *ProcessingFixedFee) Reset() {
	*x = ProcessingFixedFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_processing_fees_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingFixedFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingFixedFee) ProtoMessage() {}

func (x *ProcessingFixedFee) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_processing_fees_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingFixedFee.ProtoReflect.Descriptor instead.
func (*ProcessingFixedFee) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_processing_fees_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessingFixedFee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessingFixedFee) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProcessingFixedFee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessingFixedFee) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *ProcessingFixedFee) GetSourceCurrency() *Currency {
	if x != nil {
		return x.SourceCurrency
	}
	return nil
}

func (x *ProcessingFixedFee) GetSourceDomicile() *Country {
	if x != nil {
		return x.SourceDomicile
	}
	return nil
}

func (x *ProcessingFixedFee) GetDestinationType() DestinationType {
	if x != nil {
		return x.DestinationType
	}
	return DestinationType_DESTINATION_TYPE_UNSPECIFIED
}

func (x *ProcessingFixedFee) GetDestinationCurrency() *Currency {
	if x != nil {
		return x.DestinationCurrency
	}
	return nil
}

func (x *ProcessingFixedFee) GetDestinationDomicile() *Country {
	if x != nil {
		return x.DestinationDomicile
	}
	return nil
}

func (x *ProcessingFixedFee) GetValue() *Amount {
	if x != nil {
		return x.Value
	}
	return nil
}

type ProcessingPercentageFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EntityId            string          `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`                                                  // the ID of the Kappa entity that charges thi
	Name                string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                          // human-readable name for the fee
	SourceType          SourceType      `protobuf:"varint,4,opt,name=source_type,json=sourceType,proto3,enum=kappa.SourceType" json:"source_type,omitempty"`                     // the type of the transaction source
	SourceCurrency      *Currency       `protobuf:"bytes,5,opt,name=source_currency,json=sourceCurrency,proto3" json:"source_currency,omitempty"`                                // the currency of the transaction source
	SourceDomicile      *Country        `protobuf:"bytes,6,opt,name=source_domicile,json=sourceDomicile,proto3" json:"source_domicile,omitempty"`                                // the domicile of the transaction source
	DestinationType     DestinationType `protobuf:"varint,7,opt,name=destination_type,json=destinationType,proto3,enum=kappa.DestinationType" json:"destination_type,omitempty"` // the type of the transaction destination
	DestinationCurrency *Currency       `protobuf:"bytes,8,opt,name=destination_currency,json=destinationCurrency,proto3" json:"destination_currency,omitempty"`                 // the currency of the transaction destination
	DestinationDomicile *Country        `protobuf:"bytes,9,opt,name=destination_domicile,json=destinationDomicile,proto3" json:"destination_domicile,omitempty"`                 // the domicile of the transaction destination
	Value               float64         `protobuf:"fixed64,10,opt,name=value,proto3" json:"value,omitempty"`                                                                     // the percentage value of the fee, e.g. 0.05 for 5%
}

func (x *ProcessingPercentageFee) Reset() {
	*x = ProcessingPercentageFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_processing_fees_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingPercentageFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingPercentageFee) ProtoMessage() {}

func (x *ProcessingPercentageFee) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_processing_fees_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingPercentageFee.ProtoReflect.Descriptor instead.
func (*ProcessingPercentageFee) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_processing_fees_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessingPercentageFee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessingPercentageFee) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProcessingPercentageFee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessingPercentageFee) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *ProcessingPercentageFee) GetSourceCurrency() *Currency {
	if x != nil {
		return x.SourceCurrency
	}
	return nil
}

func (x *ProcessingPercentageFee) GetSourceDomicile() *Country {
	if x != nil {
		return x.SourceDomicile
	}
	return nil
}

func (x *ProcessingPercentageFee) GetDestinationType() DestinationType {
	if x != nil {
		return x.DestinationType
	}
	return DestinationType_DESTINATION_TYPE_UNSPECIFIED
}

func (x *ProcessingPercentageFee) GetDestinationCurrency() *Currency {
	if x != nil {
		return x.DestinationCurrency
	}
	return nil
}

func (x *ProcessingPercentageFee) GetDestinationDomicile() *Country {
	if x != nil {
		return x.DestinationDomicile
	}
	return nil
}

func (x *ProcessingPercentageFee) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ProcessingFeeSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedFees      []*ProcessingFixedFee      `protobuf:"bytes,1,rep,name=fixed_fees,json=fixedFees,proto3" json:"fixed_fees,omitempty"`
	PercentageFees []*ProcessingPercentageFee `protobuf:"bytes,2,rep,name=percentage_fees,json=percentageFees,proto3" json:"percentage_fees,omitempty"`
}

func (x *ProcessingFeeSchedule) Reset() {
	*x = ProcessingFeeSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_processing_fees_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingFeeSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingFeeSchedule) ProtoMessage() {}

func (x *ProcessingFeeSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_processing_fees_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingFeeSchedule.ProtoReflect.Descriptor instead.
func (*ProcessingFeeSchedule) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_processing_fees_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessingFeeSchedule) GetFixedFees() []*ProcessingFixedFee {
	if x != nil {
		return x.FixedFees
	}
	return nil
}

func (x *ProcessingFeeSchedule) GetPercentageFees() []*ProcessingPercentageFee {
	if x != nil {
		return x.PercentageFees
	}
	return nil
}

type ProcessingFeeAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeId   string            `protobuf:"bytes,1,opt,name=fee_id,json=feeId,proto3" json:"fee_id,omitempty"` // the ID of the fee this is an instance of
	FeeType ProcessingFeeType `protobuf:"varint,2,opt,name=fee_type,json=feeType,proto3,enum=kappa.ProcessingFeeType" json:"fee_type,omitempty"`
	Amount  *Amount           `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"` // fee amount in currency units, dynamically calculated
}

func (x *ProcessingFeeAmount) Reset() {
	*x = ProcessingFeeAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_processing_fees_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingFeeAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingFeeAmount) ProtoMessage() {}

func (x *ProcessingFeeAmount) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_processing_fees_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingFeeAmount.ProtoReflect.Descriptor instead.
func (*ProcessingFeeAmount) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_processing_fees_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessingFeeAmount) GetFeeId() string {
	if x != nil {
		return x.FeeId
	}
	return ""
}

func (x *ProcessingFeeAmount) GetFeeType() ProcessingFeeType {
	if x != nil {
		return x.FeeType
	}
	return ProcessingFeeType_PROCESSING_FEE_TYPE_UNSPECIFIED
}

func (x *ProcessingFeeAmount) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

var File_kappa_common_models_processing_fees_proto protoreflect.FileDescriptor

var file_kappa_common_models_processing_fees_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x1a, 0x20, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6b,
	0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x03, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d,
	0x69, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x14,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x69,
	0x63, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe1, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x37, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x41, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65,
	0x65, 0x52, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x46, 0x65, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x46, 0x65, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x65, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x66, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x2a, 0x7b, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x42, 0x40, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x70, 0x61, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x62,
	0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kappa_common_models_processing_fees_proto_rawDescOnce sync.Once
	file_kappa_common_models_processing_fees_proto_rawDescData = file_kappa_common_models_processing_fees_proto_rawDesc
)

func file_kappa_common_models_processing_fees_proto_rawDescGZIP() []byte {
	file_kappa_common_models_processing_fees_proto_rawDescOnce.Do(func() {
		file_kappa_common_models_processing_fees_proto_rawDescData = protoimpl.X.CompressGZIP(file_kappa_common_models_processing_fees_proto_rawDescData)
	})
	return file_kappa_common_models_processing_fees_proto_rawDescData
}

var file_kappa_common_models_processing_fees_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kappa_common_models_processing_fees_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kappa_common_models_processing_fees_proto_goTypes = []interface{}{
	(ProcessingFeeType)(0),          // 0: kappa.ProcessingFeeType
	(*ProcessingFixedFee)(nil),      // 1: kappa.ProcessingFixedFee
	(*ProcessingPercentageFee)(nil), // 2: kappa.ProcessingPercentageFee
	(*ProcessingFeeSchedule)(nil),   // 3: kappa.ProcessingFeeSchedule
	(*ProcessingFeeAmount)(nil),     // 4: kappa.ProcessingFeeAmount
	(SourceType)(0),                 // 5: kappa.SourceType
	(*Currency)(nil),                // 6: kappa.Currency
	(*Country)(nil),                 // 7: kappa.Country
	(DestinationType)(0),            // 8: kappa.DestinationType
	(*Amount)(nil),                  // 9: kappa.Amount
}
var file_kappa_common_models_processing_fees_proto_depIdxs = []int32{
	5,  // 0: kappa.ProcessingFixedFee.source_type:type_name -> kappa.SourceType
	6,  // 1: kappa.ProcessingFixedFee.source_currency:type_name -> kappa.Currency
	7,  // 2: kappa.ProcessingFixedFee.source_domicile:type_name -> kappa.Country
	8,  // 3: kappa.ProcessingFixedFee.destination_type:type_name -> kappa.DestinationType
	6,  // 4: kappa.ProcessingFixedFee.destination_currency:type_name -> kappa.Currency
	7,  // 5: kappa.ProcessingFixedFee.destination_domicile:type_name -> kappa.Country
	9,  // 6: kappa.ProcessingFixedFee.value:type_name -> kappa.Amount
	5,  // 7: kappa.ProcessingPercentageFee.source_type:type_name -> kappa.SourceType
	6,  // 8: kappa.ProcessingPercentageFee.source_currency:type_name -> kappa.Currency
	7,  // 9: kappa.ProcessingPercentageFee.source_domicile:type_name -> kappa.Country
	8,  // 10: kappa.ProcessingPercentageFee.destination_type:type_name -> kappa.DestinationType
	6,  // 11: kappa.ProcessingPercentageFee.destination_currency:type_name -> kappa.Currency
	7,  // 12: kappa.ProcessingPercentageFee.destination_domicile:type_name -> kappa.Country
	1,  // 13: kappa.ProcessingFeeSchedule.fixed_fees:type_name -> kappa.ProcessingFixedFee
	2,  // 14: kappa.ProcessingFeeSchedule.percentage_fees:type_name -> kappa.ProcessingPercentageFee
	0,  // 15: kappa.ProcessingFeeAmount.fee_type:type_name -> kappa.ProcessingFeeType
	9,  // 16: kappa.ProcessingFeeAmount.amount:type_name -> kappa.Amount
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_kappa_common_models_processing_fees_proto_init() }
func file_kappa_common_models_processing_fees_proto_init() {
	if File_kappa_common_models_processing_fees_proto != nil {
		return
	}
	file_kappa_common_models_amount_proto_init()
	file_kappa_common_models_configuration_proto_init()
	file_kappa_common_models_source_proto_init()
	file_kappa_common_models_destination_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kappa_common_models_processing_fees_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingFixedFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_processing_fees_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingPercentageFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_processing_fees_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingFeeSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_processing_fees_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingFeeAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kappa_common_models_processing_fees_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kappa_common_models_processing_fees_proto_goTypes,
		DependencyIndexes: file_kappa_common_models_processing_fees_proto_depIdxs,
		EnumInfos:         file_kappa_common_models_processing_fees_proto_enumTypes,
		MessageInfos:      file_kappa_common_models_processing_fees_proto_msgTypes,
	}.Build()
	File_kappa_common_models_processing_fees_proto = out.File
	file_kappa_common_models_processing_fees_proto_rawDesc = nil
	file_kappa_common_models_processing_fees_proto_goTypes = nil
	file_kappa_common_models_processing_fees_proto_depIdxs = nil
}
