// ------------------------------------------------------------------------------
// <copyright company="Kappa Pay Inc.">
// Copyright (C) Kappa Pay Inc.  All rights reserved.
// Unauthorised copying of this file, via any medium, is strictly prohibited.
// Proprietary and confidential
// </copyright>
// <author>Flavio Rajta</author>
// ------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: kappa/common/models/transaction_taxes.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionTaxType int32

const (
	TransactionTaxType_TRANSACTION_TAX_TYPE_UNSPECIFIED TransactionTaxType = 0
	TransactionTaxType_TRANSACTION_TAX_TYPE_FIXED       TransactionTaxType = 1
	TransactionTaxType_TRANSACTION_TAX_TYPE_PERCENTAGE  TransactionTaxType = 2
)

// Enum value maps for TransactionTaxType.
var (
	TransactionTaxType_name = map[int32]string{
		0: "TRANSACTION_TAX_TYPE_UNSPECIFIED",
		1: "TRANSACTION_TAX_TYPE_FIXED",
		2: "TRANSACTION_TAX_TYPE_PERCENTAGE",
	}
	TransactionTaxType_value = map[string]int32{
		"TRANSACTION_TAX_TYPE_UNSPECIFIED": 0,
		"TRANSACTION_TAX_TYPE_FIXED":       1,
		"TRANSACTION_TAX_TYPE_PERCENTAGE":  2,
	}
)

func (x TransactionTaxType) Enum() *TransactionTaxType {
	p := new(TransactionTaxType)
	*p = x
	return p
}

func (x TransactionTaxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionTaxType) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_transaction_taxes_proto_enumTypes[0].Descriptor()
}

func (TransactionTaxType) Type() protoreflect.EnumType {
	return &file_kappa_common_models_transaction_taxes_proto_enumTypes[0]
}

func (x TransactionTaxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionTaxType.Descriptor instead.
func (TransactionTaxType) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_taxes_proto_rawDescGZIP(), []int{0}
}

type TransactionTaxSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedTaxes      []*TransactionFixedTax      `protobuf:"bytes,1,rep,name=fixed_taxes,json=fixedTaxes,proto3" json:"fixed_taxes,omitempty"`
	PercentageTaxes []*TransactionPercentageTax `protobuf:"bytes,2,rep,name=percentage_taxes,json=percentageTaxes,proto3" json:"percentage_taxes,omitempty"`
}

func (x *TransactionTaxSchedule) Reset() {
	*x = TransactionTaxSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_transaction_taxes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTaxSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTaxSchedule) ProtoMessage() {}

func (x *TransactionTaxSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_transaction_taxes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTaxSchedule.ProtoReflect.Descriptor instead.
func (*TransactionTaxSchedule) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_taxes_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionTaxSchedule) GetFixedTaxes() []*TransactionFixedTax {
	if x != nil {
		return x.FixedTaxes
	}
	return nil
}

func (x *TransactionTaxSchedule) GetPercentageTaxes() []*TransactionPercentageTax {
	if x != nil {
		return x.PercentageTaxes
	}
	return nil
}

type TransactionFixedTax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                     // human-readable name for the tax
	Entity              *Business         `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`                                                                                 // the Kappa entity that is required to collect this tax
	SourceTypes         []SourceType      `protobuf:"varint,4,rep,packed,name=source_types,json=sourceTypes,proto3,enum=kappa.SourceType" json:"source_types,omitempty"`                      // the types of the transaction source
	SourceCurrency      *Currency         `protobuf:"bytes,5,opt,name=source_currency,json=sourceCurrency,proto3" json:"source_currency,omitempty"`                                           // the currency of the transaction source
	SourceDomicile      *Country          `protobuf:"bytes,6,opt,name=source_domicile,json=sourceDomicile,proto3" json:"source_domicile,omitempty"`                                           // the domicile of the transaction source
	DestinationTypes    []DestinationType `protobuf:"varint,7,rep,packed,name=destination_types,json=destinationTypes,proto3,enum=kappa.DestinationType" json:"destination_types,omitempty"`  // the types of the transaction destination
	DestinationCurrency *Currency         `protobuf:"bytes,8,opt,name=destination_currency,json=destinationCurrency,proto3" json:"destination_currency,omitempty"`                            // the currency of the transaction destination
	DestinationDomicile *Country          `protobuf:"bytes,9,opt,name=destination_domicile,json=destinationDomicile,proto3" json:"destination_domicile,omitempty"`                            // the domicile of the transaction destination
	TransactionTypes    []TransactionType `protobuf:"varint,10,rep,packed,name=transaction_types,json=transactionTypes,proto3,enum=kappa.TransactionType" json:"transaction_types,omitempty"` // the transaction types
	Value               *Amount           `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`                                                                                  // the tax amount in currency units
}

func (x *TransactionFixedTax) Reset() {
	*x = TransactionFixedTax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_transaction_taxes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionFixedTax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFixedTax) ProtoMessage() {}

func (x *TransactionFixedTax) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_transaction_taxes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFixedTax.ProtoReflect.Descriptor instead.
func (*TransactionFixedTax) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_taxes_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionFixedTax) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionFixedTax) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransactionFixedTax) GetEntity() *Business {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *TransactionFixedTax) GetSourceTypes() []SourceType {
	if x != nil {
		return x.SourceTypes
	}
	return nil
}

func (x *TransactionFixedTax) GetSourceCurrency() *Currency {
	if x != nil {
		return x.SourceCurrency
	}
	return nil
}

func (x *TransactionFixedTax) GetSourceDomicile() *Country {
	if x != nil {
		return x.SourceDomicile
	}
	return nil
}

func (x *TransactionFixedTax) GetDestinationTypes() []DestinationType {
	if x != nil {
		return x.DestinationTypes
	}
	return nil
}

func (x *TransactionFixedTax) GetDestinationCurrency() *Currency {
	if x != nil {
		return x.DestinationCurrency
	}
	return nil
}

func (x *TransactionFixedTax) GetDestinationDomicile() *Country {
	if x != nil {
		return x.DestinationDomicile
	}
	return nil
}

func (x *TransactionFixedTax) GetTransactionTypes() []TransactionType {
	if x != nil {
		return x.TransactionTypes
	}
	return nil
}

func (x *TransactionFixedTax) GetValue() *Amount {
	if x != nil {
		return x.Value
	}
	return nil
}

type TransactionPercentageTax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                     // human-readable name for the tax
	Entity              *Business         `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`                                                                                 // the Kappa entity that is required to collect this tax
	SourceTypes         []SourceType      `protobuf:"varint,4,rep,packed,name=source_types,json=sourceTypes,proto3,enum=kappa.SourceType" json:"source_types,omitempty"`                      // the types of the transaction source
	SourceCurrency      *Currency         `protobuf:"bytes,5,opt,name=source_currency,json=sourceCurrency,proto3" json:"source_currency,omitempty"`                                           // the currency of the transaction source
	SourceDomicile      *Country          `protobuf:"bytes,6,opt,name=source_domicile,json=sourceDomicile,proto3" json:"source_domicile,omitempty"`                                           // the domicile of the transaction source
	DestinationTypes    []DestinationType `protobuf:"varint,7,rep,packed,name=destination_types,json=destinationTypes,proto3,enum=kappa.DestinationType" json:"destination_types,omitempty"`  // the types of the transaction destination
	DestinationCurrency *Currency         `protobuf:"bytes,8,opt,name=destination_currency,json=destinationCurrency,proto3" json:"destination_currency,omitempty"`                            // the currency of the transaction destination
	DestinationDomicile *Country          `protobuf:"bytes,9,opt,name=destination_domicile,json=destinationDomicile,proto3" json:"destination_domicile,omitempty"`                            // the domicile of the transaction destination
	TransactionTypes    []TransactionType `protobuf:"varint,10,rep,packed,name=transaction_types,json=transactionTypes,proto3,enum=kappa.TransactionType" json:"transaction_types,omitempty"` // the transaction types
	Value               float64           `protobuf:"fixed64,11,opt,name=value,proto3" json:"value,omitempty"`                                                                                // the percentage value of the tax, e.g. 0.05 for 5%
}

func (x *TransactionPercentageTax) Reset() {
	*x = TransactionPercentageTax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_transaction_taxes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPercentageTax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPercentageTax) ProtoMessage() {}

func (x *TransactionPercentageTax) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_transaction_taxes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPercentageTax.ProtoReflect.Descriptor instead.
func (*TransactionPercentageTax) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_taxes_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionPercentageTax) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionPercentageTax) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransactionPercentageTax) GetEntity() *Business {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *TransactionPercentageTax) GetSourceTypes() []SourceType {
	if x != nil {
		return x.SourceTypes
	}
	return nil
}

func (x *TransactionPercentageTax) GetSourceCurrency() *Currency {
	if x != nil {
		return x.SourceCurrency
	}
	return nil
}

func (x *TransactionPercentageTax) GetSourceDomicile() *Country {
	if x != nil {
		return x.SourceDomicile
	}
	return nil
}

func (x *TransactionPercentageTax) GetDestinationTypes() []DestinationType {
	if x != nil {
		return x.DestinationTypes
	}
	return nil
}

func (x *TransactionPercentageTax) GetDestinationCurrency() *Currency {
	if x != nil {
		return x.DestinationCurrency
	}
	return nil
}

func (x *TransactionPercentageTax) GetDestinationDomicile() *Country {
	if x != nil {
		return x.DestinationDomicile
	}
	return nil
}

func (x *TransactionPercentageTax) GetTransactionTypes() []TransactionType {
	if x != nil {
		return x.TransactionTypes
	}
	return nil
}

func (x *TransactionPercentageTax) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type TransactionTaxAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the tax this calculation is derived from
	// one of fixed tax or percentage tax
	//
	// Types that are assignable to Tax:
	//	*TransactionTaxAmount_FixedTax
	//	*TransactionTaxAmount_PercentageTax
	Tax     isTransactionTaxAmount_Tax `protobuf_oneof:"tax"`
	TaxType TransactionTaxType         `protobuf:"varint,3,opt,name=tax_type,json=taxType,proto3,enum=kappa.TransactionTaxType" json:"tax_type,omitempty"` // the type of tax, fixed or percentage
	Amount  *Amount                    `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`                                                 // tax amount in currency units, dynamically calculated
}

func (x *TransactionTaxAmount) Reset() {
	*x = TransactionTaxAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_transaction_taxes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTaxAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTaxAmount) ProtoMessage() {}

func (x *TransactionTaxAmount) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_transaction_taxes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTaxAmount.ProtoReflect.Descriptor instead.
func (*TransactionTaxAmount) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_taxes_proto_rawDescGZIP(), []int{3}
}

func (m *TransactionTaxAmount) GetTax() isTransactionTaxAmount_Tax {
	if m != nil {
		return m.Tax
	}
	return nil
}

func (x *TransactionTaxAmount) GetFixedTax() *TransactionFixedTax {
	if x, ok := x.GetTax().(*TransactionTaxAmount_FixedTax); ok {
		return x.FixedTax
	}
	return nil
}

func (x *TransactionTaxAmount) GetPercentageTax() *TransactionPercentageTax {
	if x, ok := x.GetTax().(*TransactionTaxAmount_PercentageTax); ok {
		return x.PercentageTax
	}
	return nil
}

func (x *TransactionTaxAmount) GetTaxType() TransactionTaxType {
	if x != nil {
		return x.TaxType
	}
	return TransactionTaxType_TRANSACTION_TAX_TYPE_UNSPECIFIED
}

func (x *TransactionTaxAmount) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type isTransactionTaxAmount_Tax interface {
	isTransactionTaxAmount_Tax()
}

type TransactionTaxAmount_FixedTax struct {
	FixedTax *TransactionFixedTax `protobuf:"bytes,1,opt,name=fixed_tax,json=fixedTax,proto3,oneof"`
}

type TransactionTaxAmount_PercentageTax struct {
	PercentageTax *TransactionPercentageTax `protobuf:"bytes,2,opt,name=percentage_tax,json=percentageTax,proto3,oneof"`
}

func (*TransactionTaxAmount_FixedTax) isTransactionTaxAmount_Tax() {}

func (*TransactionTaxAmount_PercentageTax) isTransactionTaxAmount_Tax() {}

var File_kappa_common_models_transaction_taxes_proto protoreflect.FileDescriptor

var file_kappa_common_models_transaction_taxes_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b,
	0x61, 0x70, 0x70, 0x61, 0x1a, 0x20, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x78,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x54, 0x61, 0x78, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x54, 0x61, 0x78, 0x65, 0x73,
	0x12, 0x4a, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x61, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x52, 0x0f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x65, 0x73, 0x22, 0xc1, 0x04, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x54, 0x61, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x37, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x69,
	0x63, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xb7, 0x04, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x0f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x69, 0x63,
	0x69, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x14,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x69,
	0x63, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x12,
	0x43, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54,
	0x61, 0x78, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x54, 0x61, 0x78, 0x12, 0x48,
	0x0a, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x2a, 0x7f, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x42, 0x40, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x70, 0x61, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x62,
	0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kappa_common_models_transaction_taxes_proto_rawDescOnce sync.Once
	file_kappa_common_models_transaction_taxes_proto_rawDescData = file_kappa_common_models_transaction_taxes_proto_rawDesc
)

func file_kappa_common_models_transaction_taxes_proto_rawDescGZIP() []byte {
	file_kappa_common_models_transaction_taxes_proto_rawDescOnce.Do(func() {
		file_kappa_common_models_transaction_taxes_proto_rawDescData = protoimpl.X.CompressGZIP(file_kappa_common_models_transaction_taxes_proto_rawDescData)
	})
	return file_kappa_common_models_transaction_taxes_proto_rawDescData
}

var file_kappa_common_models_transaction_taxes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kappa_common_models_transaction_taxes_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kappa_common_models_transaction_taxes_proto_goTypes = []interface{}{
	(TransactionTaxType)(0),          // 0: kappa.TransactionTaxType
	(*TransactionTaxSchedule)(nil),   // 1: kappa.TransactionTaxSchedule
	(*TransactionFixedTax)(nil),      // 2: kappa.TransactionFixedTax
	(*TransactionPercentageTax)(nil), // 3: kappa.TransactionPercentageTax
	(*TransactionTaxAmount)(nil),     // 4: kappa.TransactionTaxAmount
	(*Business)(nil),                 // 5: kappa.Business
	(SourceType)(0),                  // 6: kappa.SourceType
	(*Currency)(nil),                 // 7: kappa.Currency
	(*Country)(nil),                  // 8: kappa.Country
	(DestinationType)(0),             // 9: kappa.DestinationType
	(TransactionType)(0),             // 10: kappa.TransactionType
	(*Amount)(nil),                   // 11: kappa.Amount
}
var file_kappa_common_models_transaction_taxes_proto_depIdxs = []int32{
	2,  // 0: kappa.TransactionTaxSchedule.fixed_taxes:type_name -> kappa.TransactionFixedTax
	3,  // 1: kappa.TransactionTaxSchedule.percentage_taxes:type_name -> kappa.TransactionPercentageTax
	5,  // 2: kappa.TransactionFixedTax.entity:type_name -> kappa.Business
	6,  // 3: kappa.TransactionFixedTax.source_types:type_name -> kappa.SourceType
	7,  // 4: kappa.TransactionFixedTax.source_currency:type_name -> kappa.Currency
	8,  // 5: kappa.TransactionFixedTax.source_domicile:type_name -> kappa.Country
	9,  // 6: kappa.TransactionFixedTax.destination_types:type_name -> kappa.DestinationType
	7,  // 7: kappa.TransactionFixedTax.destination_currency:type_name -> kappa.Currency
	8,  // 8: kappa.TransactionFixedTax.destination_domicile:type_name -> kappa.Country
	10, // 9: kappa.TransactionFixedTax.transaction_types:type_name -> kappa.TransactionType
	11, // 10: kappa.TransactionFixedTax.value:type_name -> kappa.Amount
	5,  // 11: kappa.TransactionPercentageTax.entity:type_name -> kappa.Business
	6,  // 12: kappa.TransactionPercentageTax.source_types:type_name -> kappa.SourceType
	7,  // 13: kappa.TransactionPercentageTax.source_currency:type_name -> kappa.Currency
	8,  // 14: kappa.TransactionPercentageTax.source_domicile:type_name -> kappa.Country
	9,  // 15: kappa.TransactionPercentageTax.destination_types:type_name -> kappa.DestinationType
	7,  // 16: kappa.TransactionPercentageTax.destination_currency:type_name -> kappa.Currency
	8,  // 17: kappa.TransactionPercentageTax.destination_domicile:type_name -> kappa.Country
	10, // 18: kappa.TransactionPercentageTax.transaction_types:type_name -> kappa.TransactionType
	2,  // 19: kappa.TransactionTaxAmount.fixed_tax:type_name -> kappa.TransactionFixedTax
	3,  // 20: kappa.TransactionTaxAmount.percentage_tax:type_name -> kappa.TransactionPercentageTax
	0,  // 21: kappa.TransactionTaxAmount.tax_type:type_name -> kappa.TransactionTaxType
	11, // 22: kappa.TransactionTaxAmount.amount:type_name -> kappa.Amount
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_kappa_common_models_transaction_taxes_proto_init() }
func file_kappa_common_models_transaction_taxes_proto_init() {
	if File_kappa_common_models_transaction_taxes_proto != nil {
		return
	}
	file_kappa_common_models_amount_proto_init()
	file_kappa_common_models_configuration_proto_init()
	file_kappa_common_models_source_proto_init()
	file_kappa_common_models_destination_proto_init()
	file_kappa_common_models_transaction_type_proto_init()
	file_kappa_common_models_entities_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kappa_common_models_transaction_taxes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTaxSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_transaction_taxes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionFixedTax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_transaction_taxes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPercentageTax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_transaction_taxes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTaxAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kappa_common_models_transaction_taxes_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TransactionTaxAmount_FixedTax)(nil),
		(*TransactionTaxAmount_PercentageTax)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kappa_common_models_transaction_taxes_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kappa_common_models_transaction_taxes_proto_goTypes,
		DependencyIndexes: file_kappa_common_models_transaction_taxes_proto_depIdxs,
		EnumInfos:         file_kappa_common_models_transaction_taxes_proto_enumTypes,
		MessageInfos:      file_kappa_common_models_transaction_taxes_proto_msgTypes,
	}.Build()
	File_kappa_common_models_transaction_taxes_proto = out.File
	file_kappa_common_models_transaction_taxes_proto_rawDesc = nil
	file_kappa_common_models_transaction_taxes_proto_goTypes = nil
	file_kappa_common_models_transaction_taxes_proto_depIdxs = nil
}
