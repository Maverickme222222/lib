// ------------------------------------------------------------------------------
// <copyright company="Kappa Pay Inc.">
// Copyright (C) Kappa Pay Inc.  All rights reserved.
// Unauthorised copying of this file, via any medium, is strictly prohibited.
// Proprietary and confidential
// </copyright>
// <author>Andreas Fragner</author>
// ------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: kappa/common/models/transaction.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionStatus int32

const (
	TransactionStatus_TRANSACTION_STATUS_UNSPECIFIED TransactionStatus = 0
	// The transaction is in a draft state and has not been submitted yet
	// The user may need to complete one or multiple steps to submit it,
	// such as authorize it or meet compliance requirements
	TransactionStatus_TRANSACTION_STATUS_DRAFT TransactionStatus = 1
	// The transaction has been cancelled while it was in DRAFT,
	// AWAITING_FUNDS or REVIEW state. Terminal state.
	TransactionStatus_TRANSACTION_STATUS_CANCELLED TransactionStatus = 2
	// The transaction has successfully finished processing. Depending on the
	// type of destination, settlement may or may not have completed yet.
	// E.g. for wallet destinations, this state is synonymous with funds
	// settlement, while for bank account destinations, it means payout was
	// successfully processed and funds may or may not yet have arrived
	TransactionStatus_TRANSACTION_STATUS_COMPLETED TransactionStatus = 9
	// One or multiple steps have failed and the transaction is being rolled back
	TransactionStatus_TRANSACTION_STATUS_ROLLBACK TransactionStatus = 10
	// One or multiple steps have failed. Terminal state. If any rollback steps
	// were required, they have either successfully completed or terminally
	// failed.
	TransactionStatus_TRANSACTION_STATUS_FAILED TransactionStatus = 11
	// The transaction is being reviewed by compliance
	TransactionStatus_TRANSACTION_STATUS_REVIEW TransactionStatus = 12
	// Funding for the transaction has been requested and we are waiting for
	// the user to take steps to complete it, such as making a bank transfer
	// or authorizing the funding request in a third-party app.
	TransactionStatus_TRANSACTION_STATUS_AWAITING_FUNDS TransactionStatus = 13
	// The quote for the transaction has expired while it was in DRAFT or
	// AWAITING_FUNDS state. Terminal state.
	TransactionStatus_TRANSACTION_STATUS_QUOTE_EXPIRED TransactionStatus = 14
	// The transaction is being processed, no steps have failed yet
	TransactionStatus_TRANSACTION_STATUS_PROCESSING TransactionStatus = 15
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0:  "TRANSACTION_STATUS_UNSPECIFIED",
		1:  "TRANSACTION_STATUS_DRAFT",
		2:  "TRANSACTION_STATUS_CANCELLED",
		9:  "TRANSACTION_STATUS_COMPLETED",
		10: "TRANSACTION_STATUS_ROLLBACK",
		11: "TRANSACTION_STATUS_FAILED",
		12: "TRANSACTION_STATUS_REVIEW",
		13: "TRANSACTION_STATUS_AWAITING_FUNDS",
		14: "TRANSACTION_STATUS_QUOTE_EXPIRED",
		15: "TRANSACTION_STATUS_PROCESSING",
	}
	TransactionStatus_value = map[string]int32{
		"TRANSACTION_STATUS_UNSPECIFIED":    0,
		"TRANSACTION_STATUS_DRAFT":          1,
		"TRANSACTION_STATUS_CANCELLED":      2,
		"TRANSACTION_STATUS_COMPLETED":      9,
		"TRANSACTION_STATUS_ROLLBACK":       10,
		"TRANSACTION_STATUS_FAILED":         11,
		"TRANSACTION_STATUS_REVIEW":         12,
		"TRANSACTION_STATUS_AWAITING_FUNDS": 13,
		"TRANSACTION_STATUS_QUOTE_EXPIRED":  14,
		"TRANSACTION_STATUS_PROCESSING":     15,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_transaction_proto_enumTypes[0].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_transaction_proto_enumTypes[0]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_proto_rawDescGZIP(), []int{0}
}

type TransactionFundingStatus int32

const (
	TransactionFundingStatus_TRANSACTION_FUNDING_STATUS_UNSPECIFIED TransactionFundingStatus = 0
	// funding has been requested and the user may to take action to complete it
	TransactionFundingStatus_TRANSACTION_FUNDING_STATUS_REQUESTED TransactionFundingStatus = 2
	// funding has been initiated, funds sufficiency and limits checks have passed
	TransactionFundingStatus_TRANSACTION_FUNDING_STATUS_INITIATED TransactionFundingStatus = 3
	// failed to initiate funding
	TransactionFundingStatus_TRANSACTION_FUNDING_STATUS_FAILED_TO_INITIATE TransactionFundingStatus = 4
	// funding successfully completed. Terminal state.
	TransactionFundingStatus_TRANSACTION_FUNDING_STATUS_COMPLETED TransactionFundingStatus = 5
	// funding has failed. Terminal state
	TransactionFundingStatus_TRANSACTION_FUNDING_STATUS_FAILED TransactionFundingStatus = 7
	// funding is being processed, no steps have failed yet
	TransactionFundingStatus_TRANSACTION_FUNDING_STATUS_PROCESSING TransactionFundingStatus = 8
	// request for funding has expired, or transaction quote has expired prior to receiving funding
	TransactionFundingStatus_TRANSACTION_FUNDING_STATUS_REQUEST_EXPIRED TransactionFundingStatus = 10
)

// Enum value maps for TransactionFundingStatus.
var (
	TransactionFundingStatus_name = map[int32]string{
		0:  "TRANSACTION_FUNDING_STATUS_UNSPECIFIED",
		2:  "TRANSACTION_FUNDING_STATUS_REQUESTED",
		3:  "TRANSACTION_FUNDING_STATUS_INITIATED",
		4:  "TRANSACTION_FUNDING_STATUS_FAILED_TO_INITIATE",
		5:  "TRANSACTION_FUNDING_STATUS_COMPLETED",
		7:  "TRANSACTION_FUNDING_STATUS_FAILED",
		8:  "TRANSACTION_FUNDING_STATUS_PROCESSING",
		10: "TRANSACTION_FUNDING_STATUS_REQUEST_EXPIRED",
	}
	TransactionFundingStatus_value = map[string]int32{
		"TRANSACTION_FUNDING_STATUS_UNSPECIFIED":        0,
		"TRANSACTION_FUNDING_STATUS_REQUESTED":          2,
		"TRANSACTION_FUNDING_STATUS_INITIATED":          3,
		"TRANSACTION_FUNDING_STATUS_FAILED_TO_INITIATE": 4,
		"TRANSACTION_FUNDING_STATUS_COMPLETED":          5,
		"TRANSACTION_FUNDING_STATUS_FAILED":             7,
		"TRANSACTION_FUNDING_STATUS_PROCESSING":         8,
		"TRANSACTION_FUNDING_STATUS_REQUEST_EXPIRED":    10,
	}
)

func (x TransactionFundingStatus) Enum() *TransactionFundingStatus {
	p := new(TransactionFundingStatus)
	*p = x
	return p
}

func (x TransactionFundingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionFundingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_transaction_proto_enumTypes[1].Descriptor()
}

func (TransactionFundingStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_transaction_proto_enumTypes[1]
}

func (x TransactionFundingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionFundingStatus.Descriptor instead.
func (TransactionFundingStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_proto_rawDescGZIP(), []int{1}
}

type TransactionComplianceStatus int32

const (
	TransactionComplianceStatus_TRANSACTION_COMPLIANCE_STATUS_UNSPECIFIED TransactionComplianceStatus = 0
	// requires supporting documents
	TransactionComplianceStatus_TRANSACTION_COMPLIANCE_STATUS_REQUIRES_DOCUMENTS TransactionComplianceStatus = 2
	// pre-approved by compliance, got supporting docs or no docs required
	TransactionComplianceStatus_TRANSACTION_COMPLIANCE_STATUS_PRE_APPROVED TransactionComplianceStatus = 3
	// pending review by compliance
	TransactionComplianceStatus_TRANSACTION_COMPLIANCE_STATUS_PENDING_REVIEW TransactionComplianceStatus = 4
	// approved by compliance
	TransactionComplianceStatus_TRANSACTION_COMPLIANCE_STATUS_APPROVED TransactionComplianceStatus = 5
	// rejected by compliance
	TransactionComplianceStatus_TRANSACTION_COMPLIANCE_STATUS_REJECTED TransactionComplianceStatus = 6
	// failed to provide documents in time
	TransactionComplianceStatus_TRANSACTION_COMPLIANCE_STATUS_FAILED_TO_PROVIDE_DOCUMENTS TransactionComplianceStatus = 7
)

// Enum value maps for TransactionComplianceStatus.
var (
	TransactionComplianceStatus_name = map[int32]string{
		0: "TRANSACTION_COMPLIANCE_STATUS_UNSPECIFIED",
		2: "TRANSACTION_COMPLIANCE_STATUS_REQUIRES_DOCUMENTS",
		3: "TRANSACTION_COMPLIANCE_STATUS_PRE_APPROVED",
		4: "TRANSACTION_COMPLIANCE_STATUS_PENDING_REVIEW",
		5: "TRANSACTION_COMPLIANCE_STATUS_APPROVED",
		6: "TRANSACTION_COMPLIANCE_STATUS_REJECTED",
		7: "TRANSACTION_COMPLIANCE_STATUS_FAILED_TO_PROVIDE_DOCUMENTS",
	}
	TransactionComplianceStatus_value = map[string]int32{
		"TRANSACTION_COMPLIANCE_STATUS_UNSPECIFIED":                 0,
		"TRANSACTION_COMPLIANCE_STATUS_REQUIRES_DOCUMENTS":          2,
		"TRANSACTION_COMPLIANCE_STATUS_PRE_APPROVED":                3,
		"TRANSACTION_COMPLIANCE_STATUS_PENDING_REVIEW":              4,
		"TRANSACTION_COMPLIANCE_STATUS_APPROVED":                    5,
		"TRANSACTION_COMPLIANCE_STATUS_REJECTED":                    6,
		"TRANSACTION_COMPLIANCE_STATUS_FAILED_TO_PROVIDE_DOCUMENTS": 7,
	}
)

func (x TransactionComplianceStatus) Enum() *TransactionComplianceStatus {
	p := new(TransactionComplianceStatus)
	*p = x
	return p
}

func (x TransactionComplianceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionComplianceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_transaction_proto_enumTypes[2].Descriptor()
}

func (TransactionComplianceStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_transaction_proto_enumTypes[2]
}

func (x TransactionComplianceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionComplianceStatus.Descriptor instead.
func (TransactionComplianceStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_proto_rawDescGZIP(), []int{2}
}

type TransactionExecutionStatus int32

const (
	TransactionExecutionStatus_TRANSACTION_EXECUTION_STATUS_UNSPECIFIED            TransactionExecutionStatus = 0
	TransactionExecutionStatus_TRANSACTION_EXECUTION_STATUS_COMPLETED              TransactionExecutionStatus = 2 // final state, status completed
	TransactionExecutionStatus_TRANSACTION_EXECUTION_STATUS_QUOTE_REQUESTED        TransactionExecutionStatus = 3
	TransactionExecutionStatus_TRANSACTION_EXECUTION_STATUS_QUOTE_RECEIVED         TransactionExecutionStatus = 4
	TransactionExecutionStatus_TRANSACTION_EXECUTION_STATUS_QUOTE_REQUEST_REJECTED TransactionExecutionStatus = 5
	TransactionExecutionStatus_TRANSACTION_EXECUTION_STATUS_QUOTE_ACCEPTED         TransactionExecutionStatus = 6
	TransactionExecutionStatus_TRANSACTION_EXECUTION_STATUS_FAILED                 TransactionExecutionStatus = 7
)

// Enum value maps for TransactionExecutionStatus.
var (
	TransactionExecutionStatus_name = map[int32]string{
		0: "TRANSACTION_EXECUTION_STATUS_UNSPECIFIED",
		2: "TRANSACTION_EXECUTION_STATUS_COMPLETED",
		3: "TRANSACTION_EXECUTION_STATUS_QUOTE_REQUESTED",
		4: "TRANSACTION_EXECUTION_STATUS_QUOTE_RECEIVED",
		5: "TRANSACTION_EXECUTION_STATUS_QUOTE_REQUEST_REJECTED",
		6: "TRANSACTION_EXECUTION_STATUS_QUOTE_ACCEPTED",
		7: "TRANSACTION_EXECUTION_STATUS_FAILED",
	}
	TransactionExecutionStatus_value = map[string]int32{
		"TRANSACTION_EXECUTION_STATUS_UNSPECIFIED":            0,
		"TRANSACTION_EXECUTION_STATUS_COMPLETED":              2,
		"TRANSACTION_EXECUTION_STATUS_QUOTE_REQUESTED":        3,
		"TRANSACTION_EXECUTION_STATUS_QUOTE_RECEIVED":         4,
		"TRANSACTION_EXECUTION_STATUS_QUOTE_REQUEST_REJECTED": 5,
		"TRANSACTION_EXECUTION_STATUS_QUOTE_ACCEPTED":         6,
		"TRANSACTION_EXECUTION_STATUS_FAILED":                 7,
	}
)

func (x TransactionExecutionStatus) Enum() *TransactionExecutionStatus {
	p := new(TransactionExecutionStatus)
	*p = x
	return p
}

func (x TransactionExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_transaction_proto_enumTypes[3].Descriptor()
}

func (TransactionExecutionStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_transaction_proto_enumTypes[3]
}

func (x TransactionExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionExecutionStatus.Descriptor instead.
func (TransactionExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_proto_rawDescGZIP(), []int{3}
}

type TransactionPayoutStatus int32

const (
	TransactionPayoutStatus_TRANSACTION_PAYOUT_STATUS_UNSPECIFIED TransactionPayoutStatus = 0
	// payout has been initiated
	TransactionPayoutStatus_TRANSACTION_PAYOUT_STATUS_INITIATED TransactionPayoutStatus = 2
	// failed to initiate payout
	TransactionPayoutStatus_TRANSACTION_PAYOUT_STATUS_FAILED_TO_INITIATE TransactionPayoutStatus = 3
	// payout completed. Terminal state.
	TransactionPayoutStatus_TRANSACTION_PAYOUT_STATUS_COMPLETED TransactionPayoutStatus = 4
	// payout failed. Terminal state.
	TransactionPayoutStatus_TRANSACTION_PAYOUT_STATUS_FAILED TransactionPayoutStatus = 6
)

// Enum value maps for TransactionPayoutStatus.
var (
	TransactionPayoutStatus_name = map[int32]string{
		0: "TRANSACTION_PAYOUT_STATUS_UNSPECIFIED",
		2: "TRANSACTION_PAYOUT_STATUS_INITIATED",
		3: "TRANSACTION_PAYOUT_STATUS_FAILED_TO_INITIATE",
		4: "TRANSACTION_PAYOUT_STATUS_COMPLETED",
		6: "TRANSACTION_PAYOUT_STATUS_FAILED",
	}
	TransactionPayoutStatus_value = map[string]int32{
		"TRANSACTION_PAYOUT_STATUS_UNSPECIFIED":        0,
		"TRANSACTION_PAYOUT_STATUS_INITIATED":          2,
		"TRANSACTION_PAYOUT_STATUS_FAILED_TO_INITIATE": 3,
		"TRANSACTION_PAYOUT_STATUS_COMPLETED":          4,
		"TRANSACTION_PAYOUT_STATUS_FAILED":             6,
	}
)

func (x TransactionPayoutStatus) Enum() *TransactionPayoutStatus {
	p := new(TransactionPayoutStatus)
	*p = x
	return p
}

func (x TransactionPayoutStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionPayoutStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_transaction_proto_enumTypes[4].Descriptor()
}

func (TransactionPayoutStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_transaction_proto_enumTypes[4]
}

func (x TransactionPayoutStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionPayoutStatus.Descriptor instead.
func (TransactionPayoutStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_proto_rawDescGZIP(), []int{4}
}

type TransactionAuthorizationStatus int32

const (
	TransactionAuthorizationStatus_TRANSACTION_AUTHORIZATION_STATUS_UNSPECIFIED TransactionAuthorizationStatus = 0
	// transaction needs to be authorized
	TransactionAuthorizationStatus_TRANSACTION_AUTHORIZATION_STATUS_REQUIRES_AUTHORIZATION TransactionAuthorizationStatus = 1
	// transaction has been successfully authorized, or no authorization was required
	TransactionAuthorizationStatus_TRANSACTION_AUTHORIZATION_STATUS_AUTHORIZED TransactionAuthorizationStatus = 2
	// failed to authorize transaction after max attempts. Terminal state
	TransactionAuthorizationStatus_TRANSACTION_AUTHORIZATION_STATUS_FAILED TransactionAuthorizationStatus = 3
)

// Enum value maps for TransactionAuthorizationStatus.
var (
	TransactionAuthorizationStatus_name = map[int32]string{
		0: "TRANSACTION_AUTHORIZATION_STATUS_UNSPECIFIED",
		1: "TRANSACTION_AUTHORIZATION_STATUS_REQUIRES_AUTHORIZATION",
		2: "TRANSACTION_AUTHORIZATION_STATUS_AUTHORIZED",
		3: "TRANSACTION_AUTHORIZATION_STATUS_FAILED",
	}
	TransactionAuthorizationStatus_value = map[string]int32{
		"TRANSACTION_AUTHORIZATION_STATUS_UNSPECIFIED":            0,
		"TRANSACTION_AUTHORIZATION_STATUS_REQUIRES_AUTHORIZATION": 1,
		"TRANSACTION_AUTHORIZATION_STATUS_AUTHORIZED":             2,
		"TRANSACTION_AUTHORIZATION_STATUS_FAILED":                 3,
	}
)

func (x TransactionAuthorizationStatus) Enum() *TransactionAuthorizationStatus {
	p := new(TransactionAuthorizationStatus)
	*p = x
	return p
}

func (x TransactionAuthorizationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionAuthorizationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_transaction_proto_enumTypes[5].Descriptor()
}

func (TransactionAuthorizationStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_transaction_proto_enumTypes[5]
}

func (x TransactionAuthorizationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionAuthorizationStatus.Descriptor instead.
func (TransactionAuthorizationStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_proto_rawDescGZIP(), []int{5}
}

type TransactionRollbackStatus int32

const (
	// No rollback action has been taken or requested
	TransactionRollbackStatus_TRANSACTION_ROLLBACK_STATUS_UNSPECIFIED TransactionRollbackStatus = 0
	// Rollback has been initiated
	TransactionRollbackStatus_TRANSACTION_ROLLBACK_STATUS_INITIATED TransactionRollbackStatus = 1
	// Rollback has been successfully completed, or no rollback steps were required
	TransactionRollbackStatus_TRANSACTION_ROLLBACK_STATUS_COMPLETED TransactionRollbackStatus = 2
	// Rollback has failed. Terminal state
	TransactionRollbackStatus_TRANSACTION_ROLLBACK_STATUS_FAILED TransactionRollbackStatus = 3
)

// Enum value maps for TransactionRollbackStatus.
var (
	TransactionRollbackStatus_name = map[int32]string{
		0: "TRANSACTION_ROLLBACK_STATUS_UNSPECIFIED",
		1: "TRANSACTION_ROLLBACK_STATUS_INITIATED",
		2: "TRANSACTION_ROLLBACK_STATUS_COMPLETED",
		3: "TRANSACTION_ROLLBACK_STATUS_FAILED",
	}
	TransactionRollbackStatus_value = map[string]int32{
		"TRANSACTION_ROLLBACK_STATUS_UNSPECIFIED": 0,
		"TRANSACTION_ROLLBACK_STATUS_INITIATED":   1,
		"TRANSACTION_ROLLBACK_STATUS_COMPLETED":   2,
		"TRANSACTION_ROLLBACK_STATUS_FAILED":      3,
	}
)

func (x TransactionRollbackStatus) Enum() *TransactionRollbackStatus {
	p := new(TransactionRollbackStatus)
	*p = x
	return p
}

func (x TransactionRollbackStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionRollbackStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_transaction_proto_enumTypes[6].Descriptor()
}

func (TransactionRollbackStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_transaction_proto_enumTypes[6]
}

func (x TransactionRollbackStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionRollbackStatus.Descriptor instead.
func (TransactionRollbackStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_proto_rawDescGZIP(), []int{6}
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 TransactionType                `protobuf:"varint,2,opt,name=type,proto3,enum=kappa.TransactionType" json:"type,omitempty"`
	Status               TransactionStatus              `protobuf:"varint,3,opt,name=status,proto3,enum=kappa.TransactionStatus" json:"status,omitempty"`
	Source               *Source                        `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Destination          *Destination                   `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	SourceAmount         *Amount                        `protobuf:"bytes,6,opt,name=source_amount,json=sourceAmount,proto3" json:"source_amount,omitempty"`
	DestinationAmount    *Amount                        `protobuf:"bytes,7,opt,name=destination_amount,json=destinationAmount,proto3" json:"destination_amount,omitempty"`
	Fees                 *TransactionFees               `protobuf:"bytes,8,opt,name=fees,proto3" json:"fees,omitempty"`
	ExchangeRate         *ExchangeRate                  `protobuf:"bytes,9,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	QuoteId              string                         `protobuf:"bytes,10,opt,name=quote_id,json=quoteId,proto3" json:"quote_id,omitempty"` // the quote this transaction was created from
	FundingStatus        TransactionFundingStatus       `protobuf:"varint,11,opt,name=funding_status,json=fundingStatus,proto3,enum=kappa.TransactionFundingStatus" json:"funding_status,omitempty"`
	ComplianceStatus     TransactionComplianceStatus    `protobuf:"varint,12,opt,name=compliance_status,json=complianceStatus,proto3,enum=kappa.TransactionComplianceStatus" json:"compliance_status,omitempty"`
	ExecutionStatus      TransactionExecutionStatus     `protobuf:"varint,13,opt,name=execution_status,json=executionStatus,proto3,enum=kappa.TransactionExecutionStatus" json:"execution_status,omitempty"`
	PayoutStatus         TransactionPayoutStatus        `protobuf:"varint,14,opt,name=payout_status,json=payoutStatus,proto3,enum=kappa.TransactionPayoutStatus" json:"payout_status,omitempty"`
	AuthorizationStatus  TransactionAuthorizationStatus `protobuf:"varint,15,opt,name=authorization_status,json=authorizationStatus,proto3,enum=kappa.TransactionAuthorizationStatus" json:"authorization_status,omitempty"`
	Description          string                         `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"` // free text description field for references or memos
	CreatedAt            *timestamppb.Timestamp         `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp         `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Reference            string                         `protobuf:"bytes,19,opt,name=reference,proto3" json:"reference,omitempty"` // user friendly reference
	EstimatedArrivalTime *timestamppb.Timestamp         `protobuf:"bytes,20,opt,name=estimated_arrival_time,json=estimatedArrivalTime,proto3" json:"estimated_arrival_time,omitempty"`
	ActualArrivalTime    *timestamppb.Timestamp         `protobuf:"bytes,21,opt,name=actual_arrival_time,json=actualArrivalTime,proto3" json:"actual_arrival_time,omitempty"`
	LedgerName           *string                        `protobuf:"bytes,22,opt,name=ledger_name,json=ledgerName,proto3,oneof" json:"ledger_name,omitempty"`
	Taxes                []*TransactionTaxAmount        `protobuf:"bytes,23,rep,name=taxes,proto3" json:"taxes,omitempty"`
	RollbackStatus       TransactionRollbackStatus      `protobuf:"varint,24,opt,name=rollback_status,json=rollbackStatus,proto3,enum=kappa.TransactionRollbackStatus" json:"rollback_status,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *Transaction) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_TRANSACTION_STATUS_UNSPECIFIED
}

func (x *Transaction) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Transaction) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Transaction) GetSourceAmount() *Amount {
	if x != nil {
		return x.SourceAmount
	}
	return nil
}

func (x *Transaction) GetDestinationAmount() *Amount {
	if x != nil {
		return x.DestinationAmount
	}
	return nil
}

func (x *Transaction) GetFees() *TransactionFees {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *Transaction) GetExchangeRate() *ExchangeRate {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *Transaction) GetQuoteId() string {
	if x != nil {
		return x.QuoteId
	}
	return ""
}

func (x *Transaction) GetFundingStatus() TransactionFundingStatus {
	if x != nil {
		return x.FundingStatus
	}
	return TransactionFundingStatus_TRANSACTION_FUNDING_STATUS_UNSPECIFIED
}

func (x *Transaction) GetComplianceStatus() TransactionComplianceStatus {
	if x != nil {
		return x.ComplianceStatus
	}
	return TransactionComplianceStatus_TRANSACTION_COMPLIANCE_STATUS_UNSPECIFIED
}

func (x *Transaction) GetExecutionStatus() TransactionExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return TransactionExecutionStatus_TRANSACTION_EXECUTION_STATUS_UNSPECIFIED
}

func (x *Transaction) GetPayoutStatus() TransactionPayoutStatus {
	if x != nil {
		return x.PayoutStatus
	}
	return TransactionPayoutStatus_TRANSACTION_PAYOUT_STATUS_UNSPECIFIED
}

func (x *Transaction) GetAuthorizationStatus() TransactionAuthorizationStatus {
	if x != nil {
		return x.AuthorizationStatus
	}
	return TransactionAuthorizationStatus_TRANSACTION_AUTHORIZATION_STATUS_UNSPECIFIED
}

func (x *Transaction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Transaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Transaction) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Transaction) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Transaction) GetEstimatedArrivalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedArrivalTime
	}
	return nil
}

func (x *Transaction) GetActualArrivalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualArrivalTime
	}
	return nil
}

func (x *Transaction) GetLedgerName() string {
	if x != nil && x.LedgerName != nil {
		return *x.LedgerName
	}
	return ""
}

func (x *Transaction) GetTaxes() []*TransactionTaxAmount {
	if x != nil {
		return x.Taxes
	}
	return nil
}

func (x *Transaction) GetRollbackStatus() TransactionRollbackStatus {
	if x != nil {
		return x.RollbackStatus
	}
	return TransactionRollbackStatus_TRANSACTION_ROLLBACK_STATUS_UNSPECIFIED
}

type TransactionStatusFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              []TransactionStatus              `protobuf:"varint,1,rep,packed,name=status,proto3,enum=kappa.TransactionStatus" json:"status,omitempty"`                                                                   // Providing an empty slice or not defining this field will match any status value
	FundingStatus       []TransactionFundingStatus       `protobuf:"varint,2,rep,packed,name=funding_status,json=fundingStatus,proto3,enum=kappa.TransactionFundingStatus" json:"funding_status,omitempty"`                         // Providing an empty slice or not defining this field will match any status value
	ComplianceStatus    []TransactionComplianceStatus    `protobuf:"varint,3,rep,packed,name=compliance_status,json=complianceStatus,proto3,enum=kappa.TransactionComplianceStatus" json:"compliance_status,omitempty"`             // Providing an empty slice or not defining this field will match any status value
	ExecutionStatus     []TransactionExecutionStatus     `protobuf:"varint,4,rep,packed,name=execution_status,json=executionStatus,proto3,enum=kappa.TransactionExecutionStatus" json:"execution_status,omitempty"`                 // Providing an empty slice or not defining this field will match any status value
	PayoutStatus        []TransactionPayoutStatus        `protobuf:"varint,5,rep,packed,name=payout_status,json=payoutStatus,proto3,enum=kappa.TransactionPayoutStatus" json:"payout_status,omitempty"`                             // Providing an empty slice or not defining this field will match any status value
	AuthorizationStatus []TransactionAuthorizationStatus `protobuf:"varint,6,rep,packed,name=authorization_status,json=authorizationStatus,proto3,enum=kappa.TransactionAuthorizationStatus" json:"authorization_status,omitempty"` // Providing an empty slice or not defining this field will match any status value
	RollbackStatus      []TransactionRollbackStatus      `protobuf:"varint,7,rep,packed,name=rollback_status,json=rollbackStatus,proto3,enum=kappa.TransactionRollbackStatus" json:"rollback_status,omitempty"`                     // Providing an empty slice or not defining this field will match any status value
}

func (x *TransactionStatusFilters) Reset() {
	*x = TransactionStatusFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStatusFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStatusFilters) ProtoMessage() {}

func (x *TransactionStatusFilters) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStatusFilters.ProtoReflect.Descriptor instead.
func (*TransactionStatusFilters) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionStatusFilters) GetStatus() []TransactionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TransactionStatusFilters) GetFundingStatus() []TransactionFundingStatus {
	if x != nil {
		return x.FundingStatus
	}
	return nil
}

func (x *TransactionStatusFilters) GetComplianceStatus() []TransactionComplianceStatus {
	if x != nil {
		return x.ComplianceStatus
	}
	return nil
}

func (x *TransactionStatusFilters) GetExecutionStatus() []TransactionExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return nil
}

func (x *TransactionStatusFilters) GetPayoutStatus() []TransactionPayoutStatus {
	if x != nil {
		return x.PayoutStatus
	}
	return nil
}

func (x *TransactionStatusFilters) GetAuthorizationStatus() []TransactionAuthorizationStatus {
	if x != nil {
		return x.AuthorizationStatus
	}
	return nil
}

func (x *TransactionStatusFilters) GetRollbackStatus() []TransactionRollbackStatus {
	if x != nil {
		return x.RollbackStatus
	}
	return nil
}

var File_kappa_common_models_transaction_proto protoreflect.FileDescriptor

var file_kappa_common_models_transaction_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x61,
	0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x0a, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x12, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x65, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x52,
	0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b,
	0x61, 0x70, 0x70, 0x61, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x61,
	0x78, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x74, 0x61, 0x78, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x04, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4f, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4c, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43,
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a,
	0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x8c, 0x03, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x1e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x0d, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0e,
	0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x0f, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x22,
	0x04, 0x08, 0x05, 0x10, 0x05, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x22, 0x04, 0x08, 0x07, 0x10,
	0x07, 0x22, 0x04, 0x08, 0x08, 0x10, 0x08, 0x2a, 0x8b, 0x03, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x0a, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x22,
	0x04, 0x08, 0x09, 0x10, 0x09, 0x2a, 0x81, 0x03, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x3d, 0x0a, 0x39, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x53, 0x10, 0x07, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x2a, 0xf2, 0x02, 0x0a, 0x1a, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x37, 0x0a, 0x33, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2f,
	0x0a, 0x2b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x27, 0x0a, 0x23, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x2a, 0xfa,
	0x01, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x30,
	0x0a, 0x2c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41,
	0x59, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x27, 0x0a, 0x23, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x22,
	0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x2a, 0xed, 0x01, 0x0a, 0x1e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x2c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x3b, 0x0a, 0x37, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x2f, 0x0a,
	0x2b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b,
	0x0a, 0x27, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xc6, 0x01, 0x0a, 0x19,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x70, 0x61, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kappa_common_models_transaction_proto_rawDescOnce sync.Once
	file_kappa_common_models_transaction_proto_rawDescData = file_kappa_common_models_transaction_proto_rawDesc
)

func file_kappa_common_models_transaction_proto_rawDescGZIP() []byte {
	file_kappa_common_models_transaction_proto_rawDescOnce.Do(func() {
		file_kappa_common_models_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_kappa_common_models_transaction_proto_rawDescData)
	})
	return file_kappa_common_models_transaction_proto_rawDescData
}

var file_kappa_common_models_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_kappa_common_models_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_kappa_common_models_transaction_proto_goTypes = []interface{}{
	(TransactionStatus)(0),              // 0: kappa.TransactionStatus
	(TransactionFundingStatus)(0),       // 1: kappa.TransactionFundingStatus
	(TransactionComplianceStatus)(0),    // 2: kappa.TransactionComplianceStatus
	(TransactionExecutionStatus)(0),     // 3: kappa.TransactionExecutionStatus
	(TransactionPayoutStatus)(0),        // 4: kappa.TransactionPayoutStatus
	(TransactionAuthorizationStatus)(0), // 5: kappa.TransactionAuthorizationStatus
	(TransactionRollbackStatus)(0),      // 6: kappa.TransactionRollbackStatus
	(*Transaction)(nil),                 // 7: kappa.Transaction
	(*TransactionStatusFilters)(nil),    // 8: kappa.TransactionStatusFilters
	(TransactionType)(0),                // 9: kappa.TransactionType
	(*Source)(nil),                      // 10: kappa.Source
	(*Destination)(nil),                 // 11: kappa.Destination
	(*Amount)(nil),                      // 12: kappa.Amount
	(*TransactionFees)(nil),             // 13: kappa.TransactionFees
	(*ExchangeRate)(nil),                // 14: kappa.ExchangeRate
	(*timestamppb.Timestamp)(nil),       // 15: google.protobuf.Timestamp
	(*TransactionTaxAmount)(nil),        // 16: kappa.TransactionTaxAmount
}
var file_kappa_common_models_transaction_proto_depIdxs = []int32{
	9,  // 0: kappa.Transaction.type:type_name -> kappa.TransactionType
	0,  // 1: kappa.Transaction.status:type_name -> kappa.TransactionStatus
	10, // 2: kappa.Transaction.source:type_name -> kappa.Source
	11, // 3: kappa.Transaction.destination:type_name -> kappa.Destination
	12, // 4: kappa.Transaction.source_amount:type_name -> kappa.Amount
	12, // 5: kappa.Transaction.destination_amount:type_name -> kappa.Amount
	13, // 6: kappa.Transaction.fees:type_name -> kappa.TransactionFees
	14, // 7: kappa.Transaction.exchange_rate:type_name -> kappa.ExchangeRate
	1,  // 8: kappa.Transaction.funding_status:type_name -> kappa.TransactionFundingStatus
	2,  // 9: kappa.Transaction.compliance_status:type_name -> kappa.TransactionComplianceStatus
	3,  // 10: kappa.Transaction.execution_status:type_name -> kappa.TransactionExecutionStatus
	4,  // 11: kappa.Transaction.payout_status:type_name -> kappa.TransactionPayoutStatus
	5,  // 12: kappa.Transaction.authorization_status:type_name -> kappa.TransactionAuthorizationStatus
	15, // 13: kappa.Transaction.created_at:type_name -> google.protobuf.Timestamp
	15, // 14: kappa.Transaction.updated_at:type_name -> google.protobuf.Timestamp
	15, // 15: kappa.Transaction.estimated_arrival_time:type_name -> google.protobuf.Timestamp
	15, // 16: kappa.Transaction.actual_arrival_time:type_name -> google.protobuf.Timestamp
	16, // 17: kappa.Transaction.taxes:type_name -> kappa.TransactionTaxAmount
	6,  // 18: kappa.Transaction.rollback_status:type_name -> kappa.TransactionRollbackStatus
	0,  // 19: kappa.TransactionStatusFilters.status:type_name -> kappa.TransactionStatus
	1,  // 20: kappa.TransactionStatusFilters.funding_status:type_name -> kappa.TransactionFundingStatus
	2,  // 21: kappa.TransactionStatusFilters.compliance_status:type_name -> kappa.TransactionComplianceStatus
	3,  // 22: kappa.TransactionStatusFilters.execution_status:type_name -> kappa.TransactionExecutionStatus
	4,  // 23: kappa.TransactionStatusFilters.payout_status:type_name -> kappa.TransactionPayoutStatus
	5,  // 24: kappa.TransactionStatusFilters.authorization_status:type_name -> kappa.TransactionAuthorizationStatus
	6,  // 25: kappa.TransactionStatusFilters.rollback_status:type_name -> kappa.TransactionRollbackStatus
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_kappa_common_models_transaction_proto_init() }
func file_kappa_common_models_transaction_proto_init() {
	if File_kappa_common_models_transaction_proto != nil {
		return
	}
	file_kappa_common_models_exchange_rate_proto_init()
	file_kappa_common_models_amount_proto_init()
	file_kappa_common_models_source_proto_init()
	file_kappa_common_models_destination_proto_init()
	file_kappa_common_models_fees_proto_init()
	file_kappa_common_models_transaction_type_proto_init()
	file_kappa_common_models_transaction_taxes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kappa_common_models_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStatusFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kappa_common_models_transaction_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kappa_common_models_transaction_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kappa_common_models_transaction_proto_goTypes,
		DependencyIndexes: file_kappa_common_models_transaction_proto_depIdxs,
		EnumInfos:         file_kappa_common_models_transaction_proto_enumTypes,
		MessageInfos:      file_kappa_common_models_transaction_proto_msgTypes,
	}.Build()
	File_kappa_common_models_transaction_proto = out.File
	file_kappa_common_models_transaction_proto_rawDesc = nil
	file_kappa_common_models_transaction_proto_goTypes = nil
	file_kappa_common_models_transaction_proto_depIdxs = nil
}
