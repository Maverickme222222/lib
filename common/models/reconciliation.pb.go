// ------------------------------------------------------------------------------
// <copyright company="Kappa Pay Inc.">
// Copyright (C) Kappa Pay Inc.  All rights reserved.
// Unauthorised copying of this file, via any medium, is strictly prohibited.
// Proprietary and confidential
// </copyright>
// ------------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: kappa/common/models/reconciliation.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExternalTransactionNotificationChannel int32

const (
	ExternalTransactionNotificationChannel_EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_UNSPECIFIED      ExternalTransactionNotificationChannel = 0
	ExternalTransactionNotificationChannel_EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_EMAIL            ExternalTransactionNotificationChannel = 1
	ExternalTransactionNotificationChannel_EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_SMS              ExternalTransactionNotificationChannel = 2
	ExternalTransactionNotificationChannel_EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_API_STATEMENT    ExternalTransactionNotificationChannel = 3
	ExternalTransactionNotificationChannel_EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_MANUAL_STATEMENT ExternalTransactionNotificationChannel = 4
)

// Enum value maps for ExternalTransactionNotificationChannel.
var (
	ExternalTransactionNotificationChannel_name = map[int32]string{
		0: "EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_UNSPECIFIED",
		1: "EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_EMAIL",
		2: "EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_SMS",
		3: "EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_API_STATEMENT",
		4: "EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_MANUAL_STATEMENT",
	}
	ExternalTransactionNotificationChannel_value = map[string]int32{
		"EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_UNSPECIFIED":      0,
		"EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_EMAIL":            1,
		"EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_SMS":              2,
		"EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_API_STATEMENT":    3,
		"EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_MANUAL_STATEMENT": 4,
	}
)

func (x ExternalTransactionNotificationChannel) Enum() *ExternalTransactionNotificationChannel {
	p := new(ExternalTransactionNotificationChannel)
	*p = x
	return p
}

func (x ExternalTransactionNotificationChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalTransactionNotificationChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_reconciliation_proto_enumTypes[0].Descriptor()
}

func (ExternalTransactionNotificationChannel) Type() protoreflect.EnumType {
	return &file_kappa_common_models_reconciliation_proto_enumTypes[0]
}

func (x ExternalTransactionNotificationChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalTransactionNotificationChannel.Descriptor instead.
func (ExternalTransactionNotificationChannel) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_reconciliation_proto_rawDescGZIP(), []int{0}
}

type ExternalTransactionReconciliationStatus int32

const (
	ExternalTransactionReconciliationStatus_EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_UNSPECIFIED ExternalTransactionReconciliationStatus = 0
	// This transaction has not yet been reconciled against any customer
	// transaction in our system
	ExternalTransactionReconciliationStatus_EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_PENDING ExternalTransactionReconciliationStatus = 1
	// This external transaction has been matched with a Kappa transaction. This
	// transaction does not need to be analyzed anymore, but it is still possible
	// for new notifications to be added.
	ExternalTransactionReconciliationStatus_EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_MATCHED ExternalTransactionReconciliationStatus = 2
	// This external transaction needs manual review. Possible causes include: no
	// transaction matches with a high probability, notifications are not
	// internally consistent (eg sms says 100 dollars, while the email says 200
	// dollars).
	ExternalTransactionReconciliationStatus_EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_REQUIRES_REVIEW ExternalTransactionReconciliationStatus = 3
	// Certain transactions may not map to any transaction in our ledger and
	// should be ignored. E.g., a credit to our Ecobank account. Note this status
	// should be considered temporary, as eventually we will want to reconcile
	// everything.
	ExternalTransactionReconciliationStatus_EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_IGNORE ExternalTransactionReconciliationStatus = 4
	// A transaction has matched but downstream processing failed.
	// This could happen if the amounts or currency don't match. Or it could also
	// be because the transaction has already been reconciled based on information
	// from another notification.
	ExternalTransactionReconciliationStatus_EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_RECONCILIATION_FAILED ExternalTransactionReconciliationStatus = 5
	// Following is a terminal state. This Transactation reconciliation record has
	// been fully reconciled
	ExternalTransactionReconciliationStatus_EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_RECONCILED ExternalTransactionReconciliationStatus = 6
)

// Enum value maps for ExternalTransactionReconciliationStatus.
var (
	ExternalTransactionReconciliationStatus_name = map[int32]string{
		0: "EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_UNSPECIFIED",
		1: "EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_PENDING",
		2: "EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_MATCHED",
		3: "EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_REQUIRES_REVIEW",
		4: "EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_IGNORE",
		5: "EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_RECONCILIATION_FAILED",
		6: "EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_RECONCILED",
	}
	ExternalTransactionReconciliationStatus_value = map[string]int32{
		"EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_UNSPECIFIED":           0,
		"EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_PENDING":               1,
		"EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_MATCHED":               2,
		"EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_REQUIRES_REVIEW":       3,
		"EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_IGNORE":                4,
		"EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_RECONCILIATION_FAILED": 5,
		"EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_RECONCILED":            6,
	}
)

func (x ExternalTransactionReconciliationStatus) Enum() *ExternalTransactionReconciliationStatus {
	p := new(ExternalTransactionReconciliationStatus)
	*p = x
	return p
}

func (x ExternalTransactionReconciliationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalTransactionReconciliationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_reconciliation_proto_enumTypes[1].Descriptor()
}

func (ExternalTransactionReconciliationStatus) Type() protoreflect.EnumType {
	return &file_kappa_common_models_reconciliation_proto_enumTypes[1]
}

func (x ExternalTransactionReconciliationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalTransactionReconciliationStatus.Descriptor instead.
func (ExternalTransactionReconciliationStatus) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_reconciliation_proto_rawDescGZIP(), []int{1}
}

type ExternalTransactionDirection int32

const (
	ExternalTransactionDirection_EXTERNAL_TRANSACTION_DIRECTION_UNSPECIFIED ExternalTransactionDirection = 0
	ExternalTransactionDirection_EXTERNAL_TRANSACTION_DIRECTION_DEBIT       ExternalTransactionDirection = 1
	ExternalTransactionDirection_EXTERNAL_TRANSACTION_DIRECTION_CREDIT      ExternalTransactionDirection = 2
)

// Enum value maps for ExternalTransactionDirection.
var (
	ExternalTransactionDirection_name = map[int32]string{
		0: "EXTERNAL_TRANSACTION_DIRECTION_UNSPECIFIED",
		1: "EXTERNAL_TRANSACTION_DIRECTION_DEBIT",
		2: "EXTERNAL_TRANSACTION_DIRECTION_CREDIT",
	}
	ExternalTransactionDirection_value = map[string]int32{
		"EXTERNAL_TRANSACTION_DIRECTION_UNSPECIFIED": 0,
		"EXTERNAL_TRANSACTION_DIRECTION_DEBIT":       1,
		"EXTERNAL_TRANSACTION_DIRECTION_CREDIT":      2,
	}
)

func (x ExternalTransactionDirection) Enum() *ExternalTransactionDirection {
	p := new(ExternalTransactionDirection)
	*p = x
	return p
}

func (x ExternalTransactionDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalTransactionDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_kappa_common_models_reconciliation_proto_enumTypes[2].Descriptor()
}

func (ExternalTransactionDirection) Type() protoreflect.EnumType {
	return &file_kappa_common_models_reconciliation_proto_enumTypes[2]
}

func (x ExternalTransactionDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalTransactionDirection.Descriptor instead.
func (ExternalTransactionDirection) EnumDescriptor() ([]byte, []int) {
	return file_kappa_common_models_reconciliation_proto_rawDescGZIP(), []int{2}
}

// A notification associated with an external transaction. Note that in many
// cases several of these fields could be empty for a given external
// transaction. For example, it's unlikely that an SMS notification will have
// much information. An external transaction is a transaction in a third party's
// system of record which we are looking to reconcile against a transaction in
// our own system of record
type ExternalTransactionNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationChannel ExternalTransactionNotificationChannel `protobuf:"varint,1,opt,name=notification_channel,json=notificationChannel,proto3,enum=kappa.ExternalTransactionNotificationChannel" json:"notification_channel,omitempty"`
	// The counterparty's reference id for the transaction
	// This field is required because it's assumed to be present in every
	// notification AND we need this id to deterministically associate
	// notifications to a single external transaction.
	ExternalTransactionId string `protobuf:"bytes,2,opt,name=external_transaction_id,json=externalTransactionId,proto3" json:"external_transaction_id,omitempty"`
	// An id that can be tied back to a specific notification
	ExternalNotificationId *string `protobuf:"bytes,3,opt,name=external_notification_id,json=externalNotificationId,proto3,oneof" json:"external_notification_id,omitempty"`
	// The Kappa reference id that the depositor should add to the deposit
	TransactionReference *string `protobuf:"bytes,4,opt,name=transaction_reference,json=transactionReference,proto3,oneof" json:"transaction_reference,omitempty"`
	// This is the account that the notification pertains to.
	KappaAccountNumber  string  `protobuf:"bytes,5,opt,name=kappa_account_number,json=kappaAccountNumber,proto3" json:"kappa_account_number,omitempty"`
	Description         *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Amount              *string `protobuf:"bytes,7,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	IsoCurrencyCode     *string `protobuf:"bytes,8,opt,name=iso_currency_code,json=isoCurrencyCode,proto3,oneof" json:"iso_currency_code,omitempty"`
	SenderName          *string `protobuf:"bytes,9,opt,name=sender_name,json=senderName,proto3,oneof" json:"sender_name,omitempty"`
	SenderAccountNumber *string `protobuf:"bytes,10,opt,name=sender_account_number,json=senderAccountNumber,proto3,oneof" json:"sender_account_number,omitempty"`
	// If this is a deposit this will be the sender's account number. If this was
	// a payout, then this will be the beneficiary's account number. Note this
	// could be a Kappa account number if this is a transfer between our accounts.
	ExternalAccountNumber *string                       `protobuf:"bytes,11,opt,name=external_account_number,json=externalAccountNumber,proto3,oneof" json:"external_account_number,omitempty"`
	NotificationTimestamp *timestamppb.Timestamp        `protobuf:"bytes,12,opt,name=notification_timestamp,json=notificationTimestamp,proto3,oneof" json:"notification_timestamp,omitempty"`
	TransactionType       *ExternalTransactionDirection `protobuf:"varint,13,opt,name=transaction_type,json=transactionType,proto3,enum=kappa.ExternalTransactionDirection,oneof" json:"transaction_type,omitempty"`
	RawNotificationBody   *string                       `protobuf:"bytes,14,opt,name=raw_notification_body,json=rawNotificationBody,proto3,oneof" json:"raw_notification_body,omitempty"`
}

func (x *ExternalTransactionNotification) Reset() {
	*x = ExternalTransactionNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_reconciliation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalTransactionNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalTransactionNotification) ProtoMessage() {}

func (x *ExternalTransactionNotification) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_reconciliation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalTransactionNotification.ProtoReflect.Descriptor instead.
func (*ExternalTransactionNotification) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_reconciliation_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalTransactionNotification) GetNotificationChannel() ExternalTransactionNotificationChannel {
	if x != nil {
		return x.NotificationChannel
	}
	return ExternalTransactionNotificationChannel_EXTERNAL_TRANSACTION_NOTIFICATION_CHANNEL_UNSPECIFIED
}

func (x *ExternalTransactionNotification) GetExternalTransactionId() string {
	if x != nil {
		return x.ExternalTransactionId
	}
	return ""
}

func (x *ExternalTransactionNotification) GetExternalNotificationId() string {
	if x != nil && x.ExternalNotificationId != nil {
		return *x.ExternalNotificationId
	}
	return ""
}

func (x *ExternalTransactionNotification) GetTransactionReference() string {
	if x != nil && x.TransactionReference != nil {
		return *x.TransactionReference
	}
	return ""
}

func (x *ExternalTransactionNotification) GetKappaAccountNumber() string {
	if x != nil {
		return x.KappaAccountNumber
	}
	return ""
}

func (x *ExternalTransactionNotification) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ExternalTransactionNotification) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *ExternalTransactionNotification) GetIsoCurrencyCode() string {
	if x != nil && x.IsoCurrencyCode != nil {
		return *x.IsoCurrencyCode
	}
	return ""
}

func (x *ExternalTransactionNotification) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *ExternalTransactionNotification) GetSenderAccountNumber() string {
	if x != nil && x.SenderAccountNumber != nil {
		return *x.SenderAccountNumber
	}
	return ""
}

func (x *ExternalTransactionNotification) GetExternalAccountNumber() string {
	if x != nil && x.ExternalAccountNumber != nil {
		return *x.ExternalAccountNumber
	}
	return ""
}

func (x *ExternalTransactionNotification) GetNotificationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.NotificationTimestamp
	}
	return nil
}

func (x *ExternalTransactionNotification) GetTransactionType() ExternalTransactionDirection {
	if x != nil && x.TransactionType != nil {
		return *x.TransactionType
	}
	return ExternalTransactionDirection_EXTERNAL_TRANSACTION_DIRECTION_UNSPECIFIED
}

func (x *ExternalTransactionNotification) GetRawNotificationBody() string {
	if x != nil && x.RawNotificationBody != nil {
		return *x.RawNotificationBody
	}
	return ""
}

type TransactionMatchProbability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kappa's internal transaction id
	TransactionId string  `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Probability   float64 `protobuf:"fixed64,2,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (x *TransactionMatchProbability) Reset() {
	*x = TransactionMatchProbability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_reconciliation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMatchProbability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMatchProbability) ProtoMessage() {}

func (x *TransactionMatchProbability) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_reconciliation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMatchProbability.ProtoReflect.Descriptor instead.
func (*TransactionMatchProbability) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_reconciliation_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionMatchProbability) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionMatchProbability) GetProbability() float64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type TransactionReconciliationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Notifications []*ExternalTransactionNotification `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty"`
	// the ID of the Kappa internal transaction this transaction was matched to
	MatchedTransactionId *string                                 `protobuf:"bytes,3,opt,name=matched_transaction_id,json=matchedTransactionId,proto3,oneof" json:"matched_transaction_id,omitempty"`
	Probabilities        []*TransactionMatchProbability          `protobuf:"bytes,4,rep,name=probabilities,proto3" json:"probabilities,omitempty"`
	Status               ExternalTransactionReconciliationStatus `protobuf:"varint,5,opt,name=status,proto3,enum=kappa.ExternalTransactionReconciliationStatus" json:"status,omitempty"`
	// if this was matched manually, this will be the ID of the operations user
	MatchedBy *string `protobuf:"bytes,6,opt,name=matched_by,json=matchedBy,proto3,oneof" json:"matched_by,omitempty"`
	// This is required if the status is RECONCILED or IGNORE
	StatusSetBy *string `protobuf:"bytes,7,opt,name=status_set_by,json=statusSetBy,proto3,oneof" json:"status_set_by,omitempty"`
}

func (x *TransactionReconciliationRecord) Reset() {
	*x = TransactionReconciliationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kappa_common_models_reconciliation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReconciliationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReconciliationRecord) ProtoMessage() {}

func (x *TransactionReconciliationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_kappa_common_models_reconciliation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReconciliationRecord.ProtoReflect.Descriptor instead.
func (*TransactionReconciliationRecord) Descriptor() ([]byte, []int) {
	return file_kappa_common_models_reconciliation_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionReconciliationRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionReconciliationRecord) GetNotifications() []*ExternalTransactionNotification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *TransactionReconciliationRecord) GetMatchedTransactionId() string {
	if x != nil && x.MatchedTransactionId != nil {
		return *x.MatchedTransactionId
	}
	return ""
}

func (x *TransactionReconciliationRecord) GetProbabilities() []*TransactionMatchProbability {
	if x != nil {
		return x.Probabilities
	}
	return nil
}

func (x *TransactionReconciliationRecord) GetStatus() ExternalTransactionReconciliationStatus {
	if x != nil {
		return x.Status
	}
	return ExternalTransactionReconciliationStatus_EXTERNAL_TRANSACTION_RECONCILIATION_STATUS_UNSPECIFIED
}

func (x *TransactionReconciliationRecord) GetMatchedBy() string {
	if x != nil && x.MatchedBy != nil {
		return *x.MatchedBy
	}
	return ""
}

func (x *TransactionReconciliationRecord) GetStatusSetBy() string {
	if x != nil && x.StatusSetBy != nil {
		return *x.StatusSetBy
	}
	return ""
}

var File_kappa_common_models_reconciliation_proto protoreflect.FileDescriptor

var file_kappa_common_models_reconciliation_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd5, 0x08, 0x0a, 0x1f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x6b, 0x61, 0x70,
	0x70, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x69, 0x73,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x16,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x08, 0x52, 0x15, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x72, 0x61, 0x77,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x13, 0x72, 0x61, 0x77, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x66, 0x0a, 0x1b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0xd5, 0x03, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x48, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6b, 0x61, 0x70, 0x70,
	0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x74, 0x42, 0x79, 0x88, 0x01, 0x01, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x2a, 0xc8, 0x02, 0x0a, 0x26, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x35, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x33, 0x0a, 0x2f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x3b, 0x0a, 0x37, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x3e, 0x0a, 0x3a, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0xcd, 0x03, 0x0a, 0x27, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3a, 0x0a, 0x36, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43,
	0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x36, 0x0a,
	0x32, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x3e, 0x0a,
	0x3a, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x03, 0x12, 0x35, 0x0a,
	0x31, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x47, 0x4e, 0x4f,
	0x52, 0x45, 0x10, 0x04, 0x12, 0x44, 0x0a, 0x40, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x39, 0x0a, 0x35, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xa3, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0x01,
	0x12, 0x29, 0x0a, 0x25, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x02, 0x42, 0x40, 0x5a, 0x3e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x70,
	0x61, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kappa_common_models_reconciliation_proto_rawDescOnce sync.Once
	file_kappa_common_models_reconciliation_proto_rawDescData = file_kappa_common_models_reconciliation_proto_rawDesc
)

func file_kappa_common_models_reconciliation_proto_rawDescGZIP() []byte {
	file_kappa_common_models_reconciliation_proto_rawDescOnce.Do(func() {
		file_kappa_common_models_reconciliation_proto_rawDescData = protoimpl.X.CompressGZIP(file_kappa_common_models_reconciliation_proto_rawDescData)
	})
	return file_kappa_common_models_reconciliation_proto_rawDescData
}

var file_kappa_common_models_reconciliation_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kappa_common_models_reconciliation_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kappa_common_models_reconciliation_proto_goTypes = []interface{}{
	(ExternalTransactionNotificationChannel)(0),  // 0: kappa.ExternalTransactionNotificationChannel
	(ExternalTransactionReconciliationStatus)(0), // 1: kappa.ExternalTransactionReconciliationStatus
	(ExternalTransactionDirection)(0),            // 2: kappa.ExternalTransactionDirection
	(*ExternalTransactionNotification)(nil),      // 3: kappa.ExternalTransactionNotification
	(*TransactionMatchProbability)(nil),          // 4: kappa.TransactionMatchProbability
	(*TransactionReconciliationRecord)(nil),      // 5: kappa.TransactionReconciliationRecord
	(*timestamppb.Timestamp)(nil),                // 6: google.protobuf.Timestamp
}
var file_kappa_common_models_reconciliation_proto_depIdxs = []int32{
	0, // 0: kappa.ExternalTransactionNotification.notification_channel:type_name -> kappa.ExternalTransactionNotificationChannel
	6, // 1: kappa.ExternalTransactionNotification.notification_timestamp:type_name -> google.protobuf.Timestamp
	2, // 2: kappa.ExternalTransactionNotification.transaction_type:type_name -> kappa.ExternalTransactionDirection
	3, // 3: kappa.TransactionReconciliationRecord.notifications:type_name -> kappa.ExternalTransactionNotification
	4, // 4: kappa.TransactionReconciliationRecord.probabilities:type_name -> kappa.TransactionMatchProbability
	1, // 5: kappa.TransactionReconciliationRecord.status:type_name -> kappa.ExternalTransactionReconciliationStatus
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_kappa_common_models_reconciliation_proto_init() }
func file_kappa_common_models_reconciliation_proto_init() {
	if File_kappa_common_models_reconciliation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kappa_common_models_reconciliation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalTransactionNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_reconciliation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionMatchProbability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kappa_common_models_reconciliation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReconciliationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kappa_common_models_reconciliation_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_kappa_common_models_reconciliation_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kappa_common_models_reconciliation_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kappa_common_models_reconciliation_proto_goTypes,
		DependencyIndexes: file_kappa_common_models_reconciliation_proto_depIdxs,
		EnumInfos:         file_kappa_common_models_reconciliation_proto_enumTypes,
		MessageInfos:      file_kappa_common_models_reconciliation_proto_msgTypes,
	}.Build()
	File_kappa_common_models_reconciliation_proto = out.File
	file_kappa_common_models_reconciliation_proto_rawDesc = nil
	file_kappa_common_models_reconciliation_proto_goTypes = nil
	file_kappa_common_models_reconciliation_proto_depIdxs = nil
}
